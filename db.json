{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg.jpg","path":"images/bg.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7b2e095b0fbe6b5d2403e3faf1057f31458b5d3b","modified":1642991845092},{"_id":"source/_posts/4种常用命令用法.md","hash":"89bddc0fc95f46142931f70b6582e57b84a1f70f","modified":1643007481335},{"_id":"source/_posts/CSS堆叠上下文.md","hash":"b1159abc76586af60ffed2ba9b6f2916e117adca","modified":1643007480023},{"_id":"source/_posts/CSS实现图片加载前占位.md","hash":"d1fbd3faecbe58d7f98e08a0ef05d12369c920dc","modified":1643007481356},{"_id":"source/_posts/CSS布局.md","hash":"7c9c7f80f47adfdab7398b81a242235996092a84","modified":1643007480053},{"_id":"source/_posts/CSS深入浅出.md","hash":"f29212bbd5ebcd3bdbe62d4b7a2a2c91d7c4529b","modified":1643007480052},{"_id":"source/_posts/CSS知识点.md","hash":"7c2c86dd2e8abcdbed7ee0184af7f90896aa3845","modified":1643007480025},{"_id":"source/_posts/Cookies.md","hash":"8c139ebb211cc304c985d1acc108a383973fd03d","modified":1643007480020},{"_id":"source/_posts/Docker 入门学习.md","hash":"8bdc24bbb6af43fb15687c70a0a9d89b5daf8592","modified":1643007480014},{"_id":"source/_posts/HTTP请求与响应.md","hash":"49b13fc6c845351390ca6aa9f91ad667e7e31fb8","modified":1643007480052},{"_id":"source/_posts/Hexo博客搭建.md","hash":"bea987ff0e66158761e76dc0228a02f419452f92","modified":1643007866675},{"_id":"source/_posts/JS里的数据类型.md","hash":"7e5c6270185bd314abaffd1090fa113dd782966b","modified":1643007480052},{"_id":"source/_posts/JS里的数据类型转换.md","hash":"2ee29c2d93dd211c051028339eef4a1c89e3ae83","modified":1643007480052},{"_id":"source/_posts/JavaScript 中的生成器.md","hash":"044ccdedff01bf26031054d138da0efdaaa26f2d","modified":1643007480052},{"_id":"source/_posts/JavaScript 深拷贝.md","hash":"529ea96ed6c42e2c95ac4cd7e353edecdc9fd286","modified":1643007480052},{"_id":"source/_posts/Promise.md","hash":"89af5158fd41c7e1a3f51376adaf5e7d166bc7fc","modified":1643007480052},{"_id":"source/_posts/React Hooks 获取“过去”和“未来”的值.md","hash":"ddba12debf0e2623ff348655708ed655a0f4f57b","modified":1643007480052},{"_id":"source/_posts/Session、LocalStorage、HTTP缓存.md","hash":"ec2cf9ffe15341eaaa3f109444cfc43c5606a02a","modified":1643007480052},{"_id":"source/_posts/VSCode 配置跳转定义.md","hash":"3047f46d868485a521829b5b9d3e7a8e439de915","modified":1643007480052},{"_id":"source/_posts/Vue Router的基本使用.md","hash":"a6771827e8d52146213a1d98f58cd54320a940e4","modified":1643007480052},{"_id":"source/_posts/Vue diff 算法解析.md","hash":"ffbc96d199ad6994013eaef0699b8eb57808bbe7","modified":1643007480052},{"_id":"source/_posts/Vue 基础知识.md","hash":"23175ffaf3835570c0e56566289848147ba1bea3","modified":1643007480052},{"_id":"source/_posts/Vuex 小记.md","hash":"6fa589a332a32f47bdf2272f8db8af77cd8cf4d1","modified":1643007480052},{"_id":"source/_posts/Vue组件间通信.md","hash":"e27a2d41a2c0ced4f25c13d0a66b965832512afa","modified":1643007480053},{"_id":"source/_posts/express 初识.md","hash":"f18f036a8441b267c6b1dc9011997da50db1dd2d","modified":1643007480052},{"_id":"source/_posts/git入门.md","hash":"e1f26f0a0adbbfcb73e375903897efdf15fd1c08","modified":1643007480052},{"_id":"source/_posts/mixin、科里化，高阶函数.md","hash":"8a43965ba5f0f0692334f6f012d66eff3e1e50c3","modified":1643007480052},{"_id":"source/_posts/render函数.md","hash":"ab7093a0f32d7438a043171e165b4ebdd6b6c828","modified":1643007480052},{"_id":"source/_posts/var,let,const之间的区别.md","hash":"87f0095b0d0b4676314118e5b9279dde304db716","modified":1643007480052},{"_id":"source/_posts/web性能优化.md","hash":"e3805b1582de34b3d40946359e164e43b6e8565d","modified":1643007480052},{"_id":"source/_posts/三种常见排序.md","hash":"4051da3114d04447c07569944549aadbb94779c7","modified":1643007480052},{"_id":"source/_posts/事件委托.md","hash":"31c4649b9eca98def7dbbfa3d605b749df72a100","modified":1643007480053},{"_id":"source/_posts/个性化echarts.md","hash":"6c63b71c241ff500e44afd987ee0dabf01e78b86","modified":1643007480053},{"_id":"source/_posts/什么是AJAX.md","hash":"3b91c61ce684e372b76d79d35d75f3915cd85bc8","modified":1643007480053},{"_id":"source/_posts/二分查找如何定位左边界和右边界.md","hash":"75f250038e356552e4bd310642aa4bdf4469b98a","modified":1643007481346},{"_id":"source/_posts/什么是MVC.md","hash":"52e1c1d116ab43d2c586d9ce40f3276fad1a0c59","modified":1643007480053},{"_id":"source/_posts/什么是JSONP.md","hash":"340a59a2cee4b90d070ba1f1fec85eb3eabe289a","modified":1643007480053},{"_id":"source/_posts/使用 Vue directives 封装 clipboard.md.md","hash":"b31244308639d80908b86d7386b565bc85232499","modified":1643007480053},{"_id":"source/_posts/使用new后到底发生了什么？.md","hash":"ef405e0b668c66c627a9617410535dfc9ff36b29","modified":1643007480053},{"_id":"source/_posts/函数节流.md","hash":"784b976d61dffe5495df7258ea2226dba54d4766","modified":1643007480053},{"_id":"source/_posts/原型与原型链.md","hash":"3e54405f00674ecc91ab2c65bb60db4aba4ce861","modified":1643007480053},{"_id":"source/_posts/初识JQuery.md","hash":"1a4ca64682c8e899c2549d33477292a3dd9c915a","modified":1643007480053},{"_id":"source/_posts/堆排序代码分析.md","hash":"5b3226e2df4f340f8aafbba4dacd03f1cdfd4dc2","modified":1643007480053},{"_id":"source/_posts/多个迭代器.md","hash":"b85c78dfa620b6a155be77fc676343d3bb4d7a55","modified":1643007480053},{"_id":"source/_posts/如何发布npm包.md","hash":"41b85066ca536cf6f65ffa78a434e54a910ee176","modified":1643007480053},{"_id":"source/_posts/如何调试手机页面.md","hash":"e8049f7e053c7a7ff4f44413c7cef24274a89b44","modified":1643007480053},{"_id":"source/_posts/实现极简版reactive.md","hash":"caf366b72857c3e52c5e0e202610f9ce6f286df5","modified":1643007480053},{"_id":"source/_posts/对类的初步认识.md","hash":"e74b7d5d62f6159aeb5b400a3979310bac17de87","modified":1643007480053},{"_id":"source/_posts/常见网站攻击.md","hash":"60d08306e2c81673092899c0a353b18f3acad044","modified":1643007480053},{"_id":"source/_posts/弄懂 JavaScript 执行机制.md","hash":"7ae1e1d0e551255c02e6614776c5793291060257","modified":1643007480053},{"_id":"source/_posts/巧用 Git 分支.md","hash":"c8b9a3736e085845397b3bf617abe5e0a5f64469","modified":1643007480053},{"_id":"source/_posts/弄懂 Promise 的 async 和 await.md","hash":"1aac09816adcb9766363f1691dbcb5579dc695ba","modified":1643007480053},{"_id":"source/_posts/手写一个批量请求函数.md","hash":"a79fdefbc71f728e5a54f3296efea339269e54d7","modified":1643007480053},{"_id":"source/_posts/手写 Promise.md","hash":"34988d97b835b3a0ff5894ee29e80530ec2b4528","modified":1643007480053},{"_id":"source/_posts/插入排序代码分析.md","hash":"91ccd0f9c314dcd1c4109ccba83a595e7c148e61","modified":1643007480053},{"_id":"source/_posts/插槽slot.md","hash":"910f11f73fce9ff8dc5df534cc993f605b9832a6","modified":1643007480053},{"_id":"source/_posts/模拟继承.md","hash":"ae553c35fbdce7628d8a2814f0946d1b67be7dcc","modified":1643007480053},{"_id":"source/_posts/浅谈 JavaScript 解构赋值语法.md","hash":"9d439d6f33639cc69695c66e6406f4bc7ab1f948","modified":1643007480053},{"_id":"source/_posts/深度优先遍历和广度优先遍历.md","hash":"2f32b1f37160afb4f049e3cd12b7accbd16b5224","modified":1643007480053},{"_id":"source/_posts/理解 await.md","hash":"6c4aedb20a4e5a06d730795f3187117f2a8bcf09","modified":1643007480053},{"_id":"source/_posts/简单实现一个发布订阅模式.md","hash":"d308fdbcceee6623a643ce83ef61cfa705608cb8","modified":1643007480053},{"_id":"source/_posts/简单的模块管理器.md","hash":"61ef1fe627b16ab4d387c5aa17aaa2d9668530b7","modified":1643007480053},{"_id":"source/_posts/造轮子时踩的坑.md","hash":"7321701bb6f64250e166ad41aaddce25ed8df157","modified":1643007480053},{"_id":"source/_posts/重排和重绘.md","hash":"3f563cebb51ce3f3c5266539d54bcd251d47126d","modified":1643007480053},{"_id":"source/_posts/闭包.md","hash":"950ae47ffca18f290286c5932484163dc9de6017","modified":1643007480053},{"_id":"source/tags/index.md","hash":"1466bed4504eab0e6658d3c08f1f9b8bb6c5fbd5","modified":1642745418223},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1642733565737},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1642733565737},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1642733565737},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1642733565742},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1642733565743},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1642733565743},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1642733565743},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1642733565744},{"_id":"themes/next/_config.yml","hash":"8ab896a02d55c6cf3a9a6647dce8962c4a6e8dd8","modified":1642753860406},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1642733565745},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1642733565754},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1642733565789},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1642733565746},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1642733565746},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1642733565746},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1642733565747},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1642733565747},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1642733565748},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1642733565748},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1642733565748},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1642733565749},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1642733565762},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1642735340223},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1642733565788},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1642733565789},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1642733565788},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1642733565789},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1642733565789},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1642733565755},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1642733565755},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1642733565755},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1642733565755},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1642733565756},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1642733565756},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1642733565756},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1642733565757},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1642733565757},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1642733565757},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1642733565758},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1642733565758},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1642733565758},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1642733565759},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1642733565759},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1642733565759},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1642733565760},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1642733565760},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1642733565760},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1642733565760},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1642733565761},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1642733565761},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1642733565796},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1642733565749},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1642733565750},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1642733565750},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1642733565750},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1642733565751},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1642733565751},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1642733565752},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1642733565752},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1642733565752},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1642733565753},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1642733565753},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1642733565754},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1642733565754},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1642733565762},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1642733565763},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1642733565763},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1642733565764},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1642733565764},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1642733565767},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1642733565769},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1642733565772},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1642733565772},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1642733565773},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1642733565773},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1642733565775},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1642733565776},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1642733565777},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1642733565781},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1642733565783},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1642733565783},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1642733565790},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1642733565793},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1642733565794},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1642733565794},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1642733565794},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1642733565795},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1642733565795},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1642733565796},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1642733565796},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1642733565796},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1642733565797},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1642733565797},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1642733565798},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1642733565798},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1642733565798},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1642733565799},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1642733565800},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1642733565801},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1642733565801},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1642733565802},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1642733565800},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1642733565823},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1642733565832},{"_id":"themes/next/source/images/avatar.jpg","hash":"618774a203622143f8d218515cd9dfa1cebc2cae","modified":1623118790654},{"_id":"themes/next/source/css/main.styl","hash":"5882792ac79a2bed582daa12d0e77d4a48554947","modified":1642753666745},{"_id":"themes/next/source/images/favicon.ico","hash":"96fc8d75dbcf1a6e29049ccf1e762de02bff8a87","modified":1623118790660},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1642733565838},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1642733565838},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1642733565839},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1642733565839},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1642733565841},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1642733565839},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1642733565842},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1642733565765},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1642733565765},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1642733565765},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1642733565766},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1642733565766},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1642733565766},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1642733565768},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1642733565767},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1642733565768},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1642733565769},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1642733565769},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1642733565770},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1642733565770},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1642733565770},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1642733565771},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1642733565771},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1642733565772},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1642733565771},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1642733565773},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1642733565774},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1642733565774},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1642733565775},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1642733565776},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1642733565774},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1642733565777},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1642733565777},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1642733565777},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1642733565778},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1642733565778},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1642733565779},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1642733565779},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1642733565780},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1642733565780},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1642733565780},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1642733565781},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1642733565781},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1642733565782},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1642733565782},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1642733565784},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1642733565784},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1642733565784},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1642733565785},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1642733565785},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1642733565785},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1642733565786},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1642733565786},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1642733565787},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1642733565787},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1642733565790},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1642733565790},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1642733565791},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1642733565791},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1642733565791},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1642733565792},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1642733565792},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1642733565792},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1642733565792},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1642733565793},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1642733565793},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1642733565830},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1642733565830},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1642733565831},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1642733565831},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1642733565832},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1642733565840},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1642733565840},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1642733565846},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1642733565846},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1642733565813},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1642733565813},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1642733565802},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1642733565802},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1642733565803},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1642733565808},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"bcda199d54ccc8f74a58528b57191967d3414c3f","modified":1642753662843},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1642733565816},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1642733565816},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1642733565818},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1642733565819},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1642733565819},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1642733565820},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1642733565823},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1642733565824},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1642733565826},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1642733565826},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1642733565826},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1642733565826},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1642733565827},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1642733565827},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1642733565824},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1642733565824},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1642733565825},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1642733565825},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1642733565828},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1642733565825},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1642733565828},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1642733565829},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1642733565829},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1642733565829},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1642733565830},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1642733565843},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1642733565844},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1642733565810},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1642733565810},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1642733565810},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1642733565811},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1642733565811},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1642733565812},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1642733565812},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1642733565812},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1642733565813},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1642733565813},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1642733565814},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1642733565814},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1642733565814},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1642733565815},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1642733565815},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1642733565815},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1642733565815},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1642733565815},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1642733565803},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1642733565803},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1642733565803},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1642733565804},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1642733565804},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1642733565804},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1642733565804},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1642733565805},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1642733565805},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1642733565805},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1642733565806},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1642733565806},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1642733565806},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1642733565806},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1642733565807},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1642733565807},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1642733565807},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1642733565807},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1642733565808},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1642733565809},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1642733565809},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1642733565809},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1642733565809},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1642733565817},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1642733565818},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1642733565818},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1642733565818},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1642733565820},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1642733565820},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1642733565820},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1642733565821},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1642733565821},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1642733565821},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1642733565822},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1642733565844},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1642733565845},{"_id":"themes/next/source/images/bg.jpg","hash":"e581f862d1b7755b78181462de232fb4e705c219","modified":1623118790657}],"Category":[],"Data":[],"Page":[{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: 'tags'\n---\n","date":"2022-01-21T06:10:18.223Z","updated":"2022-01-21T06:10:18.223Z","path":"tags/index.html","comments":1,"_id":"ckyscmpw10000k4u9btqp7a5g","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"4种常用Linux命令用法","date":"2018-10-10T16:00:00.000Z","updated":"2018-10-10T16:00:00.000Z","_content":"\n### ls\n\n- 语法：`ls [选项参数] [目录或者目录名]`\n- 常用选项参数：\n  - `-a`：显示所有的文件，包括隐藏文件(以.开头的文件)，参考示例 1\n  - `-d`：仅列出目录本身，而不是列出目录里的内容列\n  - `-l`：列出长数据串，显示出文件的属性与权限等数据信息\n  - `-h`：将文件内容大小以 GB、KB 等易读的方式显示\n- 全部选项参数：[https://explainshell.com/explain/1/ls](https://explainshell.com/explain/1/ls)\n\n<!-- more -->\n\n### cat\n\n- 语法：`cat [选项] [文件]`\n- cat 主要有三大功能:\n  - 一次显示整个文件：`cat filename`\n  - 创建一个新文件：`car > filename`\n  - 将几个文件合并成为一个文件：`cat file1 file2 > filename`\n- 常用选项参数：\n  - `-n`：由 1 开始对所有输出的行数编号\n  - `-b`：和`-n`相似，只不过对于空白行不编号\n  - `-s`：当遇到有连续两行以上的空白行，就代换为一行的空白行\n  - `-v`：使用`^`和`M-`符号，除了 LFD 和 TAB 之外\n  - `-E`：在每行结束处显示`$`\n  - `-T`：将 TAB 字符显示为`^I`\n- cat 命令详解：[https://www.cnblogs.com/zhangchengxiang/p/5195583.html](https://www.cnblogs.com/zhangchengxiang/p/5195583.html)\n\n### mv\n\n- 语法：`mv [选项] 源文件或目录 目标文件或目录`\n\n  | 命令格式             | 运行结果                                                  |\n  | -------------------- | --------------------------------------------------------- |\n  | `mv 文件名1 文件名2` | 将文件名 1 重命名为文件名 2                               |\n  | `mv 文件名 目录名`   | 将文件移动到目标目录                                      |\n  | `mv 目录名1 目录名2` | 目录 1 已存在，将目录 1 移动到目录 2；目录 2 不存在则改名 |\n\n- 常用选项参数\n  - `-i`：若目标文件已经存在时，就会询问是否覆盖\n  - `-f`：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖\n- 全部选项参数：[https://explainshell.com/explain/1/mv](https://explainshell.com/explain/1/mv)\n\n### touch\n\n- 语法：`touch [选项] [文件或者目录]`\n  - 命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件\n- 全部选项参数：[https://explainshell.com/explain/1/touch](https://explainshell.com/explain/1/touch)\n\n> 注：命令行解释工具[explainshell.com](explainshell.com)是一个帮助你解释命令行的网站，它会分析命令的帮助文档，然后根据你想查询的命令参数来抽取对应的解释，然后简洁易懂地显示出来，在国内访问受限。\n","source":"_posts/4种常用命令用法.md","raw":"---\ntitle: 4种常用Linux命令用法\ndate: 2018-10-11 00:00:00\nupdated: 2018-10-11 00:00:00\ntags:\n  - 命令\n---\n\n### ls\n\n- 语法：`ls [选项参数] [目录或者目录名]`\n- 常用选项参数：\n  - `-a`：显示所有的文件，包括隐藏文件(以.开头的文件)，参考示例 1\n  - `-d`：仅列出目录本身，而不是列出目录里的内容列\n  - `-l`：列出长数据串，显示出文件的属性与权限等数据信息\n  - `-h`：将文件内容大小以 GB、KB 等易读的方式显示\n- 全部选项参数：[https://explainshell.com/explain/1/ls](https://explainshell.com/explain/1/ls)\n\n<!-- more -->\n\n### cat\n\n- 语法：`cat [选项] [文件]`\n- cat 主要有三大功能:\n  - 一次显示整个文件：`cat filename`\n  - 创建一个新文件：`car > filename`\n  - 将几个文件合并成为一个文件：`cat file1 file2 > filename`\n- 常用选项参数：\n  - `-n`：由 1 开始对所有输出的行数编号\n  - `-b`：和`-n`相似，只不过对于空白行不编号\n  - `-s`：当遇到有连续两行以上的空白行，就代换为一行的空白行\n  - `-v`：使用`^`和`M-`符号，除了 LFD 和 TAB 之外\n  - `-E`：在每行结束处显示`$`\n  - `-T`：将 TAB 字符显示为`^I`\n- cat 命令详解：[https://www.cnblogs.com/zhangchengxiang/p/5195583.html](https://www.cnblogs.com/zhangchengxiang/p/5195583.html)\n\n### mv\n\n- 语法：`mv [选项] 源文件或目录 目标文件或目录`\n\n  | 命令格式             | 运行结果                                                  |\n  | -------------------- | --------------------------------------------------------- |\n  | `mv 文件名1 文件名2` | 将文件名 1 重命名为文件名 2                               |\n  | `mv 文件名 目录名`   | 将文件移动到目标目录                                      |\n  | `mv 目录名1 目录名2` | 目录 1 已存在，将目录 1 移动到目录 2；目录 2 不存在则改名 |\n\n- 常用选项参数\n  - `-i`：若目标文件已经存在时，就会询问是否覆盖\n  - `-f`：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖\n- 全部选项参数：[https://explainshell.com/explain/1/mv](https://explainshell.com/explain/1/mv)\n\n### touch\n\n- 语法：`touch [选项] [文件或者目录]`\n  - 命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件\n- 全部选项参数：[https://explainshell.com/explain/1/touch](https://explainshell.com/explain/1/touch)\n\n> 注：命令行解释工具[explainshell.com](explainshell.com)是一个帮助你解释命令行的网站，它会分析命令的帮助文档，然后根据你想查询的命令参数来抽取对应的解释，然后简洁易懂地显示出来，在国内访问受限。\n","slug":"4种常用命令用法","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpw50001k4u94cue1l1e","content":"<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><ul>\n<li>语法：<code>ls [选项参数] [目录或者目录名]</code></li>\n<li>常用选项参数：<ul>\n<li><code>-a</code>：显示所有的文件，包括隐藏文件(以.开头的文件)，参考示例 1</li>\n<li><code>-d</code>：仅列出目录本身，而不是列出目录里的内容列</li>\n<li><code>-l</code>：列出长数据串，显示出文件的属性与权限等数据信息</li>\n<li><code>-h</code>：将文件内容大小以 GB、KB 等易读的方式显示</li>\n</ul>\n</li>\n<li>全部选项参数：<a href=\"https://explainshell.com/explain/1/ls\">https://explainshell.com/explain/1/ls</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><ul>\n<li>语法：<code>cat [选项] [文件]</code></li>\n<li>cat 主要有三大功能:<ul>\n<li>一次显示整个文件：<code>cat filename</code></li>\n<li>创建一个新文件：<code>car &gt; filename</code></li>\n<li>将几个文件合并成为一个文件：<code>cat file1 file2 &gt; filename</code></li>\n</ul>\n</li>\n<li>常用选项参数：<ul>\n<li><code>-n</code>：由 1 开始对所有输出的行数编号</li>\n<li><code>-b</code>：和<code>-n</code>相似，只不过对于空白行不编号</li>\n<li><code>-s</code>：当遇到有连续两行以上的空白行，就代换为一行的空白行</li>\n<li><code>-v</code>：使用<code>^</code>和<code>M-</code>符号，除了 LFD 和 TAB 之外</li>\n<li><code>-E</code>：在每行结束处显示<code>$</code></li>\n<li><code>-T</code>：将 TAB 字符显示为<code>^I</code></li>\n</ul>\n</li>\n<li>cat 命令详解：<a href=\"https://www.cnblogs.com/zhangchengxiang/p/5195583.html\">https://www.cnblogs.com/zhangchengxiang/p/5195583.html</a></li>\n</ul>\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><ul>\n<li><p>语法：<code>mv [选项] 源文件或目录 目标文件或目录</code></p>\n<table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>运行结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>mv 文件名1 文件名2</code></td>\n<td>将文件名 1 重命名为文件名 2</td>\n</tr>\n<tr>\n<td><code>mv 文件名 目录名</code></td>\n<td>将文件移动到目标目录</td>\n</tr>\n<tr>\n<td><code>mv 目录名1 目录名2</code></td>\n<td>目录 1 已存在，将目录 1 移动到目录 2；目录 2 不存在则改名</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>常用选项参数</p>\n<ul>\n<li><code>-i</code>：若目标文件已经存在时，就会询问是否覆盖</li>\n<li><code>-f</code>：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</li>\n</ul>\n</li>\n<li><p>全部选项参数：<a href=\"https://explainshell.com/explain/1/mv\">https://explainshell.com/explain/1/mv</a></p>\n</li>\n</ul>\n<h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><ul>\n<li>语法：<code>touch [选项] [文件或者目录]</code><ul>\n<li>命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</li>\n</ul>\n</li>\n<li>全部选项参数：<a href=\"https://explainshell.com/explain/1/touch\">https://explainshell.com/explain/1/touch</a></li>\n</ul>\n<blockquote>\n<p>注：命令行解释工具<a href=\"explainshell.com\">explainshell.com</a>是一个帮助你解释命令行的网站，它会分析命令的帮助文档，然后根据你想查询的命令参数来抽取对应的解释，然后简洁易懂地显示出来，在国内访问受限。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><ul>\n<li>语法：<code>ls [选项参数] [目录或者目录名]</code></li>\n<li>常用选项参数：<ul>\n<li><code>-a</code>：显示所有的文件，包括隐藏文件(以.开头的文件)，参考示例 1</li>\n<li><code>-d</code>：仅列出目录本身，而不是列出目录里的内容列</li>\n<li><code>-l</code>：列出长数据串，显示出文件的属性与权限等数据信息</li>\n<li><code>-h</code>：将文件内容大小以 GB、KB 等易读的方式显示</li>\n</ul>\n</li>\n<li>全部选项参数：<a href=\"https://explainshell.com/explain/1/ls\">https://explainshell.com/explain/1/ls</a></li>\n</ul>","more":"<h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><ul>\n<li>语法：<code>cat [选项] [文件]</code></li>\n<li>cat 主要有三大功能:<ul>\n<li>一次显示整个文件：<code>cat filename</code></li>\n<li>创建一个新文件：<code>car &gt; filename</code></li>\n<li>将几个文件合并成为一个文件：<code>cat file1 file2 &gt; filename</code></li>\n</ul>\n</li>\n<li>常用选项参数：<ul>\n<li><code>-n</code>：由 1 开始对所有输出的行数编号</li>\n<li><code>-b</code>：和<code>-n</code>相似，只不过对于空白行不编号</li>\n<li><code>-s</code>：当遇到有连续两行以上的空白行，就代换为一行的空白行</li>\n<li><code>-v</code>：使用<code>^</code>和<code>M-</code>符号，除了 LFD 和 TAB 之外</li>\n<li><code>-E</code>：在每行结束处显示<code>$</code></li>\n<li><code>-T</code>：将 TAB 字符显示为<code>^I</code></li>\n</ul>\n</li>\n<li>cat 命令详解：<a href=\"https://www.cnblogs.com/zhangchengxiang/p/5195583.html\">https://www.cnblogs.com/zhangchengxiang/p/5195583.html</a></li>\n</ul>\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><ul>\n<li><p>语法：<code>mv [选项] 源文件或目录 目标文件或目录</code></p>\n<table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>运行结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>mv 文件名1 文件名2</code></td>\n<td>将文件名 1 重命名为文件名 2</td>\n</tr>\n<tr>\n<td><code>mv 文件名 目录名</code></td>\n<td>将文件移动到目标目录</td>\n</tr>\n<tr>\n<td><code>mv 目录名1 目录名2</code></td>\n<td>目录 1 已存在，将目录 1 移动到目录 2；目录 2 不存在则改名</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>常用选项参数</p>\n<ul>\n<li><code>-i</code>：若目标文件已经存在时，就会询问是否覆盖</li>\n<li><code>-f</code>：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</li>\n</ul>\n</li>\n<li><p>全部选项参数：<a href=\"https://explainshell.com/explain/1/mv\">https://explainshell.com/explain/1/mv</a></p>\n</li>\n</ul>\n<h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><ul>\n<li>语法：<code>touch [选项] [文件或者目录]</code><ul>\n<li>命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</li>\n</ul>\n</li>\n<li>全部选项参数：<a href=\"https://explainshell.com/explain/1/touch\">https://explainshell.com/explain/1/touch</a></li>\n</ul>\n<blockquote>\n<p>注：命令行解释工具<a href=\"explainshell.com\">explainshell.com</a>是一个帮助你解释命令行的网站，它会分析命令的帮助文档，然后根据你想查询的命令参数来抽取对应的解释，然后简洁易懂地显示出来，在国内访问受限。</p>\n</blockquote>"},{"title":"堆叠上下文","date":"2018-11-03T16:00:00.000Z","updated":"2018-11-03T16:00:00.000Z","_content":"\n### 什么是堆叠上下文\n\n层叠上下文，英文称作 ”stacking context” 。是 HTML 中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素（包括其中的子元素）在 z 轴上就“高人一等”。\n\n<!-- more -->\n\n![堆叠顺序](https://jiangnana.fun/test/%E5%A0%86%E5%8F%A0%E9%A1%BA%E5%BA%8F.jpg)\n\n### 什么时候出现堆叠上下文？\n\n堆叠上下文可以理解为堆叠作用域，以下属性会出发堆叠上下文。\n\n- 根元素(HTML)\n- z-index 值不为 auto 的，相对绝对定位\n- z-index 值不为 auto，flex 项目，即父元素 display:flex/inline-flex\n- opacity 的值小于 1 的元素，rgba 不算，这是背景\n- transform 属性不为 none\n- mix-blend-mode 属性不为 normal 的元素\n- filter 的值不为 none 的元素\n- perspective 的值不为 none 的元素\n- isolation 属性被设置为 isolate 的元素\n- position: fixed\n- 在 will-charge 中指定了任意 css 属性\n- webkit-overflow-scrolling 属性被设置 touch 的元素\n\n> 引用\n\n- https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\n","source":"_posts/CSS堆叠上下文.md","raw":"---\ntitle: 堆叠上下文\ndate: 2018-11-04 00:00:00\nupdated: 2018-11-04 00:00:00\ntags:\n  - 堆叠上下文\n  - z-index\n  - CSS\n---\n\n### 什么是堆叠上下文\n\n层叠上下文，英文称作 ”stacking context” 。是 HTML 中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素（包括其中的子元素）在 z 轴上就“高人一等”。\n\n<!-- more -->\n\n![堆叠顺序](https://jiangnana.fun/test/%E5%A0%86%E5%8F%A0%E9%A1%BA%E5%BA%8F.jpg)\n\n### 什么时候出现堆叠上下文？\n\n堆叠上下文可以理解为堆叠作用域，以下属性会出发堆叠上下文。\n\n- 根元素(HTML)\n- z-index 值不为 auto 的，相对绝对定位\n- z-index 值不为 auto，flex 项目，即父元素 display:flex/inline-flex\n- opacity 的值小于 1 的元素，rgba 不算，这是背景\n- transform 属性不为 none\n- mix-blend-mode 属性不为 normal 的元素\n- filter 的值不为 none 的元素\n- perspective 的值不为 none 的元素\n- isolation 属性被设置为 isolate 的元素\n- position: fixed\n- 在 will-charge 中指定了任意 css 属性\n- webkit-overflow-scrolling 属性被设置 touch 的元素\n\n> 引用\n\n- https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\n","slug":"CSS堆叠上下文","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpw90002k4u90cw3f3si","content":"<h3 id=\"什么是堆叠上下文\"><a href=\"#什么是堆叠上下文\" class=\"headerlink\" title=\"什么是堆叠上下文\"></a>什么是堆叠上下文</h3><p>层叠上下文，英文称作 ”stacking context” 。是 HTML 中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素（包括其中的子元素）在 z 轴上就“高人一等”。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://jiangnana.fun/test/%E5%A0%86%E5%8F%A0%E9%A1%BA%E5%BA%8F.jpg\" alt=\"堆叠顺序\"></p>\n<h3 id=\"什么时候出现堆叠上下文？\"><a href=\"#什么时候出现堆叠上下文？\" class=\"headerlink\" title=\"什么时候出现堆叠上下文？\"></a>什么时候出现堆叠上下文？</h3><p>堆叠上下文可以理解为堆叠作用域，以下属性会出发堆叠上下文。</p>\n<ul>\n<li>根元素(HTML)</li>\n<li>z-index 值不为 auto 的，相对绝对定位</li>\n<li>z-index 值不为 auto，flex 项目，即父元素 display:flex/inline-flex</li>\n<li>opacity 的值小于 1 的元素，rgba 不算，这是背景</li>\n<li>transform 属性不为 none</li>\n<li>mix-blend-mode 属性不为 normal 的元素</li>\n<li>filter 的值不为 none 的元素</li>\n<li>perspective 的值不为 none 的元素</li>\n<li>isolation 属性被设置为 isolate 的元素</li>\n<li>position: fixed</li>\n<li>在 will-charge 中指定了任意 css 属性</li>\n<li>webkit-overflow-scrolling 属性被设置 touch 的元素</li>\n</ul>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\">https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是堆叠上下文\"><a href=\"#什么是堆叠上下文\" class=\"headerlink\" title=\"什么是堆叠上下文\"></a>什么是堆叠上下文</h3><p>层叠上下文，英文称作 ”stacking context” 。是 HTML 中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素（包括其中的子元素）在 z 轴上就“高人一等”。</p>","more":"<p><img src=\"https://jiangnana.fun/test/%E5%A0%86%E5%8F%A0%E9%A1%BA%E5%BA%8F.jpg\" alt=\"堆叠顺序\"></p>\n<h3 id=\"什么时候出现堆叠上下文？\"><a href=\"#什么时候出现堆叠上下文？\" class=\"headerlink\" title=\"什么时候出现堆叠上下文？\"></a>什么时候出现堆叠上下文？</h3><p>堆叠上下文可以理解为堆叠作用域，以下属性会出发堆叠上下文。</p>\n<ul>\n<li>根元素(HTML)</li>\n<li>z-index 值不为 auto 的，相对绝对定位</li>\n<li>z-index 值不为 auto，flex 项目，即父元素 display:flex/inline-flex</li>\n<li>opacity 的值小于 1 的元素，rgba 不算，这是背景</li>\n<li>transform 属性不为 none</li>\n<li>mix-blend-mode 属性不为 normal 的元素</li>\n<li>filter 的值不为 none 的元素</li>\n<li>perspective 的值不为 none 的元素</li>\n<li>isolation 属性被设置为 isolate 的元素</li>\n<li>position: fixed</li>\n<li>在 will-charge 中指定了任意 css 属性</li>\n<li>webkit-overflow-scrolling 属性被设置 touch 的元素</li>\n</ul>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\">https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/</a></li>\n</ul>"},{"title":"CSS实现图片加载前占位","date":"2019-04-10T16:00:00.000Z","updated":"2019-04-10T16:00:00.000Z","_content":"\n在优化个人简历网站的时候，发现图片加载很慢，页面结构异常，故通过提前占位的方式使页面结构能保持正常\n\n<!-- more -->\n\n基本思路是利用图片的比例，给父元素加一个 padding-top，代码如下：\n\n```css\n.parent {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding-top: 100%; //假设图片比例1:1，则是100%；\n}\n\n.parent img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n```\n","source":"_posts/CSS实现图片加载前占位.md","raw":"---\ntitle: CSS实现图片加载前占位\ndate: 2019-04-11 00:00:00\nupdated: 2019-04-11 00:00:00\ntags:\n  - CSS\n---\n\n在优化个人简历网站的时候，发现图片加载很慢，页面结构异常，故通过提前占位的方式使页面结构能保持正常\n\n<!-- more -->\n\n基本思路是利用图片的比例，给父元素加一个 padding-top，代码如下：\n\n```css\n.parent {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding-top: 100%; //假设图片比例1:1，则是100%；\n}\n\n.parent img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n```\n","slug":"CSS实现图片加载前占位","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwc0004k4u91f7653yn","content":"<p>在优化个人简历网站的时候，发现图片加载很慢，页面结构异常，故通过提前占位的方式使页面结构能保持正常</p>\n<span id=\"more\"></span>\n\n<p>基本思路是利用图片的比例，给父元素加一个 padding-top，代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">100%</span>; //假设图片比例<span class=\"number\">1</span>:<span class=\"number\">1</span>，则是<span class=\"number\">100%</span>；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在优化个人简历网站的时候，发现图片加载很慢，页面结构异常，故通过提前占位的方式使页面结构能保持正常</p>","more":"<p>基本思路是利用图片的比例，给父元素加一个 padding-top，代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">100%</span>; //假设图片比例<span class=\"number\">1</span>:<span class=\"number\">1</span>，则是<span class=\"number\">100%</span>；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSS布局","date":"2018-10-22T16:00:00.000Z","updated":"2018-10-22T16:00:00.000Z","_content":"\n### 左右布局\n\n1. 绝对定位布局\n   - 在父元素下设置两个宽度 50%容器，设置绝对定位。但有时候会出错。\n   - 父容器不得不必须要设置高度，但设置高度会出 bug（内容改变的时候），更不要说绝对定位的元素脱离了文档流。\n\n<!-- more -->\n\n2. Table 布局\n   使用`display: table`使父亲元素变成一个 table，然后使用`display: table-cell`使子元素变成里面的元素。\n\n3. 浮动布局\n   使用 float 布局，可以解决绝对定位带来问题。此外父元素要清除浮动，以避免浮动带来高度塌陷的问题。\n\n4. Flex 布局\n   - flex 布局非常棒，但是它仅限用于 ie10 以上的浏览器。\n   - 首先把父容器设置`display:flex`，为了使子元素都一样，子元素设置`flex:1`，不用设置宽高，完美。\n\n> 以上参考：\n\n- https://css-tricks.com/left-and-right/\n- https://segmentfault.com/a/1190000011358507\n\n### 左中右布局\n\n1. Table 布局\n   和左右布局类似，再多加一列，只是不能优先显示中间的一列。\n\n2. 双飞翼布局\n\n   - 在 HTML 布局中，center 放在最前面，其次 left，最后是 right，因此优先显示 center；\n   - center，left，right 都设置`float:left`;\n   - center 设置宽度 100%，此时 center 占满一行，left 和 right 都被挤到第二行；\n   - 此时给 left 设置`margin-left:100%`,left 就被拉倒最左边，同理 right 设置`margin-lef: 300px`（right 的宽度），拉到最右侧；\n   - 此时 center 的左右两边的内容被覆盖，给 center 加一个子元素 div，设置 margin，左右值分别为 left 和 right 的宽度； -浮动布局要给父元素清除浮动，或者添加属性`over-flow:hidden`\n\n3. flex 布局\n   - 给 container 设置`display: flex`；\n   - center 设置宽度`width:100%`，left 和 right 设置；\n   - 给 left 和 right 设置`flex-shrink: 0`，使之不会收缩；\n   - 使用 order 属性给三个 div 重新排序，left 设置`order:1`，center 设置`order:2`，right 设置`order:3`。\n\n> 以上参考：\n\n- https://www.cnblogs.com/imwtr/p/4441741.html\n- https://www.jianshu.com/p/3046eb050664\n\n### 水平居中\n\n1. 行内元素\n   对于`<span>、<a>、<label>、<em>、<img>`这种内联元素，直接构建一个样式是`text-align:center`的容器。如果是块级元素，里面的文本会居中。\n\n2. 块级元素\n\n   - 定宽\n\n     - 添加样式`margin:0 auto`实现容器居中，`text-align:center`实现里面的文本居中;\n     - 设置绝对定位 50%，`margin:left：宽度的一半`；\n\n   - 不定宽\n     - CSS3 的 flex 实现水平居中，父元素设置：`display：flex`，子元素设置`margin:auto`；\n     - 绝对定位 + transform，`transform: translateX(-50%)`可以移动本身元素的 50%；\n\n> 以上参考\n\n- https://blog.csdn.net/dengdongxia/article/details/80297116\n- https://blog.csdn.net/MrZZhou/article/details/70344947\n\n### 垂直居中\n\n1. 先试试`padding:20px 0;`再说\n\n2. 单行文本\n\n   - 若元素是单行文本, 则可设置 line-height 等于父元素高度\n\n3. 行内块级元素\n\n   - 基本思想是使用 display: inline-block，vertical-align: middle 和一个伪元素让内容块处于容器中央。\n\n   ```css\n   .parent::after,\n   .son {\n     display: inline-block;\n     vertical-align: middle;\n   }\n   .parent::after {\n     content: '';\n     height: 100%;\n   }\n   ```\n\n4. 元素高度不定\n   使用 flex，父元素做如下设置即可保证子元素垂直居中:\n\n   ```css\n   .parent {\n     display: flex;\n     align-items: center;\n   }\n   ```\n\n> 以上参考\n\n- https://blog.csdn.net/MrZZhou/article/details/70344947\n","source":"_posts/CSS布局.md","raw":"---\ntitle: CSS布局\ndate: 2018-10-23 00:00:00\nupdated: 2018-10-23 00:00:00\ntags:\n  - CSS\n  - 布局\n---\n\n### 左右布局\n\n1. 绝对定位布局\n   - 在父元素下设置两个宽度 50%容器，设置绝对定位。但有时候会出错。\n   - 父容器不得不必须要设置高度，但设置高度会出 bug（内容改变的时候），更不要说绝对定位的元素脱离了文档流。\n\n<!-- more -->\n\n2. Table 布局\n   使用`display: table`使父亲元素变成一个 table，然后使用`display: table-cell`使子元素变成里面的元素。\n\n3. 浮动布局\n   使用 float 布局，可以解决绝对定位带来问题。此外父元素要清除浮动，以避免浮动带来高度塌陷的问题。\n\n4. Flex 布局\n   - flex 布局非常棒，但是它仅限用于 ie10 以上的浏览器。\n   - 首先把父容器设置`display:flex`，为了使子元素都一样，子元素设置`flex:1`，不用设置宽高，完美。\n\n> 以上参考：\n\n- https://css-tricks.com/left-and-right/\n- https://segmentfault.com/a/1190000011358507\n\n### 左中右布局\n\n1. Table 布局\n   和左右布局类似，再多加一列，只是不能优先显示中间的一列。\n\n2. 双飞翼布局\n\n   - 在 HTML 布局中，center 放在最前面，其次 left，最后是 right，因此优先显示 center；\n   - center，left，right 都设置`float:left`;\n   - center 设置宽度 100%，此时 center 占满一行，left 和 right 都被挤到第二行；\n   - 此时给 left 设置`margin-left:100%`,left 就被拉倒最左边，同理 right 设置`margin-lef: 300px`（right 的宽度），拉到最右侧；\n   - 此时 center 的左右两边的内容被覆盖，给 center 加一个子元素 div，设置 margin，左右值分别为 left 和 right 的宽度； -浮动布局要给父元素清除浮动，或者添加属性`over-flow:hidden`\n\n3. flex 布局\n   - 给 container 设置`display: flex`；\n   - center 设置宽度`width:100%`，left 和 right 设置；\n   - 给 left 和 right 设置`flex-shrink: 0`，使之不会收缩；\n   - 使用 order 属性给三个 div 重新排序，left 设置`order:1`，center 设置`order:2`，right 设置`order:3`。\n\n> 以上参考：\n\n- https://www.cnblogs.com/imwtr/p/4441741.html\n- https://www.jianshu.com/p/3046eb050664\n\n### 水平居中\n\n1. 行内元素\n   对于`<span>、<a>、<label>、<em>、<img>`这种内联元素，直接构建一个样式是`text-align:center`的容器。如果是块级元素，里面的文本会居中。\n\n2. 块级元素\n\n   - 定宽\n\n     - 添加样式`margin:0 auto`实现容器居中，`text-align:center`实现里面的文本居中;\n     - 设置绝对定位 50%，`margin:left：宽度的一半`；\n\n   - 不定宽\n     - CSS3 的 flex 实现水平居中，父元素设置：`display：flex`，子元素设置`margin:auto`；\n     - 绝对定位 + transform，`transform: translateX(-50%)`可以移动本身元素的 50%；\n\n> 以上参考\n\n- https://blog.csdn.net/dengdongxia/article/details/80297116\n- https://blog.csdn.net/MrZZhou/article/details/70344947\n\n### 垂直居中\n\n1. 先试试`padding:20px 0;`再说\n\n2. 单行文本\n\n   - 若元素是单行文本, 则可设置 line-height 等于父元素高度\n\n3. 行内块级元素\n\n   - 基本思想是使用 display: inline-block，vertical-align: middle 和一个伪元素让内容块处于容器中央。\n\n   ```css\n   .parent::after,\n   .son {\n     display: inline-block;\n     vertical-align: middle;\n   }\n   .parent::after {\n     content: '';\n     height: 100%;\n   }\n   ```\n\n4. 元素高度不定\n   使用 flex，父元素做如下设置即可保证子元素垂直居中:\n\n   ```css\n   .parent {\n     display: flex;\n     align-items: center;\n   }\n   ```\n\n> 以上参考\n\n- https://blog.csdn.net/MrZZhou/article/details/70344947\n","slug":"CSS布局","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwe0005k4u96gnkfx26","content":"<h3 id=\"左右布局\"><a href=\"#左右布局\" class=\"headerlink\" title=\"左右布局\"></a>左右布局</h3><ol>\n<li>绝对定位布局<ul>\n<li>在父元素下设置两个宽度 50%容器，设置绝对定位。但有时候会出错。</li>\n<li>父容器不得不必须要设置高度，但设置高度会出 bug（内容改变的时候），更不要说绝对定位的元素脱离了文档流。</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li><p>Table 布局<br>使用<code>display: table</code>使父亲元素变成一个 table，然后使用<code>display: table-cell</code>使子元素变成里面的元素。</p>\n</li>\n<li><p>浮动布局<br>使用 float 布局，可以解决绝对定位带来问题。此外父元素要清除浮动，以避免浮动带来高度塌陷的问题。</p>\n</li>\n<li><p>Flex 布局</p>\n<ul>\n<li>flex 布局非常棒，但是它仅限用于 ie10 以上的浏览器。</li>\n<li>首先把父容器设置<code>display:flex</code>，为了使子元素都一样，子元素设置<code>flex:1</code>，不用设置宽高，完美。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>以上参考：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://css-tricks.com/left-and-right/\">https://css-tricks.com/left-and-right/</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011358507\">https://segmentfault.com/a/1190000011358507</a></li>\n</ul>\n<h3 id=\"左中右布局\"><a href=\"#左中右布局\" class=\"headerlink\" title=\"左中右布局\"></a>左中右布局</h3><ol>\n<li><p>Table 布局<br>和左右布局类似，再多加一列，只是不能优先显示中间的一列。</p>\n</li>\n<li><p>双飞翼布局</p>\n<ul>\n<li>在 HTML 布局中，center 放在最前面，其次 left，最后是 right，因此优先显示 center；</li>\n<li>center，left，right 都设置<code>float:left</code>;</li>\n<li>center 设置宽度 100%，此时 center 占满一行，left 和 right 都被挤到第二行；</li>\n<li>此时给 left 设置<code>margin-left:100%</code>,left 就被拉倒最左边，同理 right 设置<code>margin-lef: 300px</code>（right 的宽度），拉到最右侧；</li>\n<li>此时 center 的左右两边的内容被覆盖，给 center 加一个子元素 div，设置 margin，左右值分别为 left 和 right 的宽度； -浮动布局要给父元素清除浮动，或者添加属性<code>over-flow:hidden</code></li>\n</ul>\n</li>\n<li><p>flex 布局</p>\n<ul>\n<li>给 container 设置<code>display: flex</code>；</li>\n<li>center 设置宽度<code>width:100%</code>，left 和 right 设置；</li>\n<li>给 left 和 right 设置<code>flex-shrink: 0</code>，使之不会收缩；</li>\n<li>使用 order 属性给三个 div 重新排序，left 设置<code>order:1</code>，center 设置<code>order:2</code>，right 设置<code>order:3</code>。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>以上参考：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.cnblogs.com/imwtr/p/4441741.html\">https://www.cnblogs.com/imwtr/p/4441741.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/3046eb050664\">https://www.jianshu.com/p/3046eb050664</a></li>\n</ul>\n<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><ol>\n<li><p>行内元素<br>对于<code>&lt;span&gt;、&lt;a&gt;、&lt;label&gt;、&lt;em&gt;、&lt;img&gt;</code>这种内联元素，直接构建一个样式是<code>text-align:center</code>的容器。如果是块级元素，里面的文本会居中。</p>\n</li>\n<li><p>块级元素</p>\n<ul>\n<li><p>定宽</p>\n<ul>\n<li>添加样式<code>margin:0 auto</code>实现容器居中，<code>text-align:center</code>实现里面的文本居中;</li>\n<li>设置绝对定位 50%，<code>margin:left：宽度的一半</code>；</li>\n</ul>\n</li>\n<li><p>不定宽</p>\n<ul>\n<li>CSS3 的 flex 实现水平居中，父元素设置：<code>display：flex</code>，子元素设置<code>margin:auto</code>；</li>\n<li>绝对定位 + transform，<code>transform: translateX(-50%)</code>可以移动本身元素的 50%；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>以上参考</p>\n</blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/dengdongxia/article/details/80297116\">https://blog.csdn.net/dengdongxia/article/details/80297116</a></li>\n<li><a href=\"https://blog.csdn.net/MrZZhou/article/details/70344947\">https://blog.csdn.net/MrZZhou/article/details/70344947</a></li>\n</ul>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><ol>\n<li><p>先试试<code>padding:20px 0;</code>再说</p>\n</li>\n<li><p>单行文本</p>\n<ul>\n<li>若元素是单行文本, 则可设置 line-height 等于父元素高度</li>\n</ul>\n</li>\n<li><p>行内块级元素</p>\n<ul>\n<li>基本思想是使用 display: inline-block，vertical-align: middle 和一个伪元素让内容块处于容器中央。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::after</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.son</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>元素高度不定<br>使用 flex，父元素做如下设置即可保证子元素垂直居中:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>以上参考</p>\n</blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/MrZZhou/article/details/70344947\">https://blog.csdn.net/MrZZhou/article/details/70344947</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"左右布局\"><a href=\"#左右布局\" class=\"headerlink\" title=\"左右布局\"></a>左右布局</h3><ol>\n<li>绝对定位布局<ul>\n<li>在父元素下设置两个宽度 50%容器，设置绝对定位。但有时候会出错。</li>\n<li>父容器不得不必须要设置高度，但设置高度会出 bug（内容改变的时候），更不要说绝对定位的元素脱离了文档流。</li>\n</ul>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>Table 布局<br>使用<code>display: table</code>使父亲元素变成一个 table，然后使用<code>display: table-cell</code>使子元素变成里面的元素。</p>\n</li>\n<li><p>浮动布局<br>使用 float 布局，可以解决绝对定位带来问题。此外父元素要清除浮动，以避免浮动带来高度塌陷的问题。</p>\n</li>\n<li><p>Flex 布局</p>\n<ul>\n<li>flex 布局非常棒，但是它仅限用于 ie10 以上的浏览器。</li>\n<li>首先把父容器设置<code>display:flex</code>，为了使子元素都一样，子元素设置<code>flex:1</code>，不用设置宽高，完美。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>以上参考：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://css-tricks.com/left-and-right/\">https://css-tricks.com/left-and-right/</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011358507\">https://segmentfault.com/a/1190000011358507</a></li>\n</ul>\n<h3 id=\"左中右布局\"><a href=\"#左中右布局\" class=\"headerlink\" title=\"左中右布局\"></a>左中右布局</h3><ol>\n<li><p>Table 布局<br>和左右布局类似，再多加一列，只是不能优先显示中间的一列。</p>\n</li>\n<li><p>双飞翼布局</p>\n<ul>\n<li>在 HTML 布局中，center 放在最前面，其次 left，最后是 right，因此优先显示 center；</li>\n<li>center，left，right 都设置<code>float:left</code>;</li>\n<li>center 设置宽度 100%，此时 center 占满一行，left 和 right 都被挤到第二行；</li>\n<li>此时给 left 设置<code>margin-left:100%</code>,left 就被拉倒最左边，同理 right 设置<code>margin-lef: 300px</code>（right 的宽度），拉到最右侧；</li>\n<li>此时 center 的左右两边的内容被覆盖，给 center 加一个子元素 div，设置 margin，左右值分别为 left 和 right 的宽度； -浮动布局要给父元素清除浮动，或者添加属性<code>over-flow:hidden</code></li>\n</ul>\n</li>\n<li><p>flex 布局</p>\n<ul>\n<li>给 container 设置<code>display: flex</code>；</li>\n<li>center 设置宽度<code>width:100%</code>，left 和 right 设置；</li>\n<li>给 left 和 right 设置<code>flex-shrink: 0</code>，使之不会收缩；</li>\n<li>使用 order 属性给三个 div 重新排序，left 设置<code>order:1</code>，center 设置<code>order:2</code>，right 设置<code>order:3</code>。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>以上参考：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.cnblogs.com/imwtr/p/4441741.html\">https://www.cnblogs.com/imwtr/p/4441741.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/3046eb050664\">https://www.jianshu.com/p/3046eb050664</a></li>\n</ul>\n<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><ol>\n<li><p>行内元素<br>对于<code>&lt;span&gt;、&lt;a&gt;、&lt;label&gt;、&lt;em&gt;、&lt;img&gt;</code>这种内联元素，直接构建一个样式是<code>text-align:center</code>的容器。如果是块级元素，里面的文本会居中。</p>\n</li>\n<li><p>块级元素</p>\n<ul>\n<li><p>定宽</p>\n<ul>\n<li>添加样式<code>margin:0 auto</code>实现容器居中，<code>text-align:center</code>实现里面的文本居中;</li>\n<li>设置绝对定位 50%，<code>margin:left：宽度的一半</code>；</li>\n</ul>\n</li>\n<li><p>不定宽</p>\n<ul>\n<li>CSS3 的 flex 实现水平居中，父元素设置：<code>display：flex</code>，子元素设置<code>margin:auto</code>；</li>\n<li>绝对定位 + transform，<code>transform: translateX(-50%)</code>可以移动本身元素的 50%；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>以上参考</p>\n</blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/dengdongxia/article/details/80297116\">https://blog.csdn.net/dengdongxia/article/details/80297116</a></li>\n<li><a href=\"https://blog.csdn.net/MrZZhou/article/details/70344947\">https://blog.csdn.net/MrZZhou/article/details/70344947</a></li>\n</ul>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><ol>\n<li><p>先试试<code>padding:20px 0;</code>再说</p>\n</li>\n<li><p>单行文本</p>\n<ul>\n<li>若元素是单行文本, 则可设置 line-height 等于父元素高度</li>\n</ul>\n</li>\n<li><p>行内块级元素</p>\n<ul>\n<li>基本思想是使用 display: inline-block，vertical-align: middle 和一个伪元素让内容块处于容器中央。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::after</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.son</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>元素高度不定<br>使用 flex，父元素做如下设置即可保证子元素垂直居中:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>以上参考</p>\n</blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/MrZZhou/article/details/70344947\">https://blog.csdn.net/MrZZhou/article/details/70344947</a></li>\n</ul>"},{"title":"CSS深入浅出","date":"2018-11-18T16:00:00.000Z","updated":"2018-11-18T16:00:00.000Z","_content":"\n以前在用 CSS 时，总想系统学习一下 CSS 知识。因为以前写 CSS 时，总是哪里不会 baidu 哪里，没有系统性，对一些“效果”（bug）也是浅尝辄止，属于解决完就忘了的那种。现系统学习一番后，将学习总结、体会汇成一篇博客。\n\n<!-- more -->\n\n# CSS 不正交\n\nCSS 易学，只要记住定义元素的属性和值就可以了，但因其不正交的特点，又使得它又非常难学。何为不正交？举个例子：当我们在页面中增加`u>li`标签，其默认样式是有小圆点的，但是当我们给`li`加上`display:block`时，小圆点非常奇怪的消失了，这使得我们在使用 CSS 非常小心，因为你也不知道什么时候会踩坑。除此之外，还有以下几个坑：\n\n- margin 与 border\n\n  1. 上下两个 div，margin 都为 10px 上 div 底部与下 div 顶部的 margin 会重合，有以下解决方法：\n\n     - 在两个 div 之间加个 border 为 0.1px 的 div\n     - 给两个 div 之间加`display：table`的 div\n     - 给两个 div 之间加`display：flex`的 div\n     - 给两个 div 之间加`overflow: hidden;`的 div\n\n  2. 两个父子 div，子元素有 margin 值，子元素的 margin 值会超出父元素，有以下解决方法：\n     - 给父元素加 border\n     - 给父元素加 padding\n     - 给父元素加`overflow: hidden;`\n     - 给父元素加`display：flex`，子元素宽度会有变化\n\n- `display:inline`、`display:inline-block`的元素，加了`position:absolute`，display 会变成 block;\n\n- `display:fix`与 transform 混用，会影响 fix 的定位位置\n\n- float 与 inline 元素，inline 元素会环绕 float 元素，而不会在 float 元素下方，但是 block 元素会在下方\n\n# 元素的宽高\n\n记住一点，能不用定死宽高的，就不要定死宽高，采用添加 padding 的方式撑高元素\n\n- 字与字通过基线对齐，元素高度相同，基线不同，并排的话，可能会导致撑开的高度大于元素本身。内联元素 margin 和 padding 会只会影响宽，不会影响高，其高度由 line-height 决定\n- `font-size`的大小不一定真是字体大小，不同字体有默认行高（设计师设计时设置），使得不同字体的撑开的高度可能不一致\n- 内联元素之间如果有空格，或有回车，在网页则会显示两个内联元素之间有一个莫名其妙的空格\n- 设置了浮动，父元素要清除浮动，防止浮动造成高度塌陷\n- 设置两端对齐\n  ```css\n  .paernt {\n    text-align: justify;\n  }\n  .parent::after {\n    content: '';\n    display: inline-block;\n    width: 100%;\n  }\n  ```\n- [一行字，超出省略号](https://jiangnana.fun/test/%E7%9C%81%E7%95%A5%E5%8F%B7.html)\n- [多行字超出省略号（管 IE 干嘛 →_→）](https://jiangnana.fun/test/%E5%A4%9A%E8%A1%8C%E8%B6%85%E5%87%BA%E7%9C%81%E7%95%A5%E5%8F%B7.html)\n\n# 堆叠上下文\n\n[开启传送门·另一篇博客](https://jiangnana.fun/2018/11/04/CSS%E5%A0%86%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/)\n\n# icon 的做法\n\n现在使用较多的是通过 SVG 导入在线图标，也有通过背景图的（sprites 生成器），或者直接用 CSS 干的比如[太极图](https://jiangnana.fun/test/taichi.html)\n\n# 移动端页面\n\n移动端的页面和 PC 端的没区别，但要注意以下几点\n\n- 手机端要加个`<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">`禁止用户缩放\n- 媒体查询，需要注意优先级问题，后面优先级强\n  ```css\n  @media (max-width: 980px) {\n    body {\n      background: red;\n    }\n  }\n  @media (max-width: 375px) {\n    body {\n      background: yellow;\n    }\n  }\n  ```\n- `<link rel='stylesheet' href='xxx.css' media='max-width:375px'>`设备小于 320px 才引用 style.css\n- 要设计图，没设计图不做\n- 学会隐藏元素\n- 手机端有 touch 事件，没有 hover 事件\n- 手机端不能改变屏幕大小（resize），也没有滚动条\n\n# flex 布局\n\nflex 适用于简单的线性布局，更复杂的用 grid\n\n主要记住 flex container 以及 flex item 的六个属性\n\nflex container\n\n| 属性名          | 功能                                                                      |\n| --------------- | ------------------------------------------------------------------------- |\n| flex-direction  | 定义内部元素的排序方向，常用的有 row，row-reverse，column，column-reverse |\n| flex-wrap       | 是否换行                                                                  |\n| flex-flow       | 上面两个的简写                                                            |\n| justify-content | 主轴方向的对齐方向                                                        |\n| align-items     | 侧轴方向的对齐方向                                                        |\n| align-content   | 多行、多列内容的对齐方向，center，space-around，space-bteween 等          |\n\nflex item\n\n| 属性名      | 功能                                    |\n| ----------- | --------------------------------------- |\n| flex-grow   | 空间有空余时，增长比例                  |\n| flex-shrink | 空间不够时，收缩比例                    |\n| flex-basis  | 设置初始大小                            |\n| flex        | 上面三个的缩写                          |\n| order       | 元素排列顺序                            |\n| align-self  | 自身的对齐方式，重写 align-items 的属性 |\n\n# BFC（格式化上下文）\n\n什么是 BFC 说不清楚\n\n但可以说明某例子是否是 BFC\n\n一个块格式化上下文（block formatting context） 是 Web 页面的可视化 CSS 渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。\n\n一个块格式化上下文由以下之一创建：\n\n- 根元素或其它包含它的元素\n- 浮动元素 (元素的 float 不是 none)\n- 绝对定位元素 (元素具有 position 为 absolute 或 fixed)\n- 内联块 (元素具有 display: inline-block)\n- 表格单元格 (元素具有 display: table-cell，HTML 表格单元格默认属性)\n- 表格标题 (元素具有 display: table-caption, HTML 表格标题默认属性)\n- 具有 overflow 且值不是 visible 的块元素，\n- display: flow-root\n- column-span: all 应当总是会创建一个新的格式化上下文，即便具有 - - column-span: all 的元素并不被包裹在一个多列容器中\n\n一个块格式化上下文包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。\n\nBFC 有什么用？ - 使父元素能包住子元素 - 兄弟之间划清界限\n\n# 动态 rem\n\nem 是自己的 font-size 的值的大小，大概就是一个汉字的高度，或者一个字母 M 的高度\n\nrem 是 root em ，指的是根元素（html）的字体大小\n\n- 可以通过 js 动态调整 rem 大小\n\n```javascript\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n <script>\n     var pageWidth = window.innerWidth\n     document.write('<style>html{font-size:'+pageWidth+'px;}</style>')\n </script>\n```\n\n- 在 SCSS 里使用 PX2REM\n  在 vscode 里可以下载 sass 插件\n\n```scss\n@function px($px) {\n  @return $px/$designWidth * 10 + rem;\n}\n\n$designWidth: 640; // 640 是设计稿的宽度，你要根据设计稿的宽度填写。如果设计师的设计稿宽度不统一，就杀死设计师，换个新的。\n\n.child {\n  width: px(320);\n  height: px(160);\n  margin: px(40) px(40);\n  border: 1px solid red;\n  float: left;\n  font-size: 1.2em;\n}\n```\n\n# bootstrap\n\n2 兼容 IE6,3 不兼容 IE6\n\n栅栏布局：\n\n    - .row>div.col-lg-12\n    - .row>div.col-md-12\n    - .row>div.col-xs-12\n    - .row>div.col-sn-12\n\n建议不要更改 bootstrap 上类的值，如需修改，建议套一个父级 div，在父级 div 上更改\n\n其余的抄官方文档就完事了。。。\n\n# IFC\n\nBFC 的兄弟，指 inline formatting context\n\n`font-size：100px;`到底指的是什么呢？em-square，要去了解国外的活字印刷，指的是印刷这个字的模具大小。\n\nline-height：实际占地高度\n\n`vertical-align`可以用来解决 img 元素在 div 中，底部有空隙的 bug，其余没什么用。\n","source":"_posts/CSS深入浅出.md","raw":"---\ntitle: CSS深入浅出\ndate: 2018-11-19 00:00:00\nupdated: 2018-11-19 00:00:00\ntags:\n  - CSS\n---\n\n以前在用 CSS 时，总想系统学习一下 CSS 知识。因为以前写 CSS 时，总是哪里不会 baidu 哪里，没有系统性，对一些“效果”（bug）也是浅尝辄止，属于解决完就忘了的那种。现系统学习一番后，将学习总结、体会汇成一篇博客。\n\n<!-- more -->\n\n# CSS 不正交\n\nCSS 易学，只要记住定义元素的属性和值就可以了，但因其不正交的特点，又使得它又非常难学。何为不正交？举个例子：当我们在页面中增加`u>li`标签，其默认样式是有小圆点的，但是当我们给`li`加上`display:block`时，小圆点非常奇怪的消失了，这使得我们在使用 CSS 非常小心，因为你也不知道什么时候会踩坑。除此之外，还有以下几个坑：\n\n- margin 与 border\n\n  1. 上下两个 div，margin 都为 10px 上 div 底部与下 div 顶部的 margin 会重合，有以下解决方法：\n\n     - 在两个 div 之间加个 border 为 0.1px 的 div\n     - 给两个 div 之间加`display：table`的 div\n     - 给两个 div 之间加`display：flex`的 div\n     - 给两个 div 之间加`overflow: hidden;`的 div\n\n  2. 两个父子 div，子元素有 margin 值，子元素的 margin 值会超出父元素，有以下解决方法：\n     - 给父元素加 border\n     - 给父元素加 padding\n     - 给父元素加`overflow: hidden;`\n     - 给父元素加`display：flex`，子元素宽度会有变化\n\n- `display:inline`、`display:inline-block`的元素，加了`position:absolute`，display 会变成 block;\n\n- `display:fix`与 transform 混用，会影响 fix 的定位位置\n\n- float 与 inline 元素，inline 元素会环绕 float 元素，而不会在 float 元素下方，但是 block 元素会在下方\n\n# 元素的宽高\n\n记住一点，能不用定死宽高的，就不要定死宽高，采用添加 padding 的方式撑高元素\n\n- 字与字通过基线对齐，元素高度相同，基线不同，并排的话，可能会导致撑开的高度大于元素本身。内联元素 margin 和 padding 会只会影响宽，不会影响高，其高度由 line-height 决定\n- `font-size`的大小不一定真是字体大小，不同字体有默认行高（设计师设计时设置），使得不同字体的撑开的高度可能不一致\n- 内联元素之间如果有空格，或有回车，在网页则会显示两个内联元素之间有一个莫名其妙的空格\n- 设置了浮动，父元素要清除浮动，防止浮动造成高度塌陷\n- 设置两端对齐\n  ```css\n  .paernt {\n    text-align: justify;\n  }\n  .parent::after {\n    content: '';\n    display: inline-block;\n    width: 100%;\n  }\n  ```\n- [一行字，超出省略号](https://jiangnana.fun/test/%E7%9C%81%E7%95%A5%E5%8F%B7.html)\n- [多行字超出省略号（管 IE 干嘛 →_→）](https://jiangnana.fun/test/%E5%A4%9A%E8%A1%8C%E8%B6%85%E5%87%BA%E7%9C%81%E7%95%A5%E5%8F%B7.html)\n\n# 堆叠上下文\n\n[开启传送门·另一篇博客](https://jiangnana.fun/2018/11/04/CSS%E5%A0%86%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/)\n\n# icon 的做法\n\n现在使用较多的是通过 SVG 导入在线图标，也有通过背景图的（sprites 生成器），或者直接用 CSS 干的比如[太极图](https://jiangnana.fun/test/taichi.html)\n\n# 移动端页面\n\n移动端的页面和 PC 端的没区别，但要注意以下几点\n\n- 手机端要加个`<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">`禁止用户缩放\n- 媒体查询，需要注意优先级问题，后面优先级强\n  ```css\n  @media (max-width: 980px) {\n    body {\n      background: red;\n    }\n  }\n  @media (max-width: 375px) {\n    body {\n      background: yellow;\n    }\n  }\n  ```\n- `<link rel='stylesheet' href='xxx.css' media='max-width:375px'>`设备小于 320px 才引用 style.css\n- 要设计图，没设计图不做\n- 学会隐藏元素\n- 手机端有 touch 事件，没有 hover 事件\n- 手机端不能改变屏幕大小（resize），也没有滚动条\n\n# flex 布局\n\nflex 适用于简单的线性布局，更复杂的用 grid\n\n主要记住 flex container 以及 flex item 的六个属性\n\nflex container\n\n| 属性名          | 功能                                                                      |\n| --------------- | ------------------------------------------------------------------------- |\n| flex-direction  | 定义内部元素的排序方向，常用的有 row，row-reverse，column，column-reverse |\n| flex-wrap       | 是否换行                                                                  |\n| flex-flow       | 上面两个的简写                                                            |\n| justify-content | 主轴方向的对齐方向                                                        |\n| align-items     | 侧轴方向的对齐方向                                                        |\n| align-content   | 多行、多列内容的对齐方向，center，space-around，space-bteween 等          |\n\nflex item\n\n| 属性名      | 功能                                    |\n| ----------- | --------------------------------------- |\n| flex-grow   | 空间有空余时，增长比例                  |\n| flex-shrink | 空间不够时，收缩比例                    |\n| flex-basis  | 设置初始大小                            |\n| flex        | 上面三个的缩写                          |\n| order       | 元素排列顺序                            |\n| align-self  | 自身的对齐方式，重写 align-items 的属性 |\n\n# BFC（格式化上下文）\n\n什么是 BFC 说不清楚\n\n但可以说明某例子是否是 BFC\n\n一个块格式化上下文（block formatting context） 是 Web 页面的可视化 CSS 渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。\n\n一个块格式化上下文由以下之一创建：\n\n- 根元素或其它包含它的元素\n- 浮动元素 (元素的 float 不是 none)\n- 绝对定位元素 (元素具有 position 为 absolute 或 fixed)\n- 内联块 (元素具有 display: inline-block)\n- 表格单元格 (元素具有 display: table-cell，HTML 表格单元格默认属性)\n- 表格标题 (元素具有 display: table-caption, HTML 表格标题默认属性)\n- 具有 overflow 且值不是 visible 的块元素，\n- display: flow-root\n- column-span: all 应当总是会创建一个新的格式化上下文，即便具有 - - column-span: all 的元素并不被包裹在一个多列容器中\n\n一个块格式化上下文包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。\n\nBFC 有什么用？ - 使父元素能包住子元素 - 兄弟之间划清界限\n\n# 动态 rem\n\nem 是自己的 font-size 的值的大小，大概就是一个汉字的高度，或者一个字母 M 的高度\n\nrem 是 root em ，指的是根元素（html）的字体大小\n\n- 可以通过 js 动态调整 rem 大小\n\n```javascript\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n <script>\n     var pageWidth = window.innerWidth\n     document.write('<style>html{font-size:'+pageWidth+'px;}</style>')\n </script>\n```\n\n- 在 SCSS 里使用 PX2REM\n  在 vscode 里可以下载 sass 插件\n\n```scss\n@function px($px) {\n  @return $px/$designWidth * 10 + rem;\n}\n\n$designWidth: 640; // 640 是设计稿的宽度，你要根据设计稿的宽度填写。如果设计师的设计稿宽度不统一，就杀死设计师，换个新的。\n\n.child {\n  width: px(320);\n  height: px(160);\n  margin: px(40) px(40);\n  border: 1px solid red;\n  float: left;\n  font-size: 1.2em;\n}\n```\n\n# bootstrap\n\n2 兼容 IE6,3 不兼容 IE6\n\n栅栏布局：\n\n    - .row>div.col-lg-12\n    - .row>div.col-md-12\n    - .row>div.col-xs-12\n    - .row>div.col-sn-12\n\n建议不要更改 bootstrap 上类的值，如需修改，建议套一个父级 div，在父级 div 上更改\n\n其余的抄官方文档就完事了。。。\n\n# IFC\n\nBFC 的兄弟，指 inline formatting context\n\n`font-size：100px;`到底指的是什么呢？em-square，要去了解国外的活字印刷，指的是印刷这个字的模具大小。\n\nline-height：实际占地高度\n\n`vertical-align`可以用来解决 img 元素在 div 中，底部有空隙的 bug，其余没什么用。\n","slug":"CSS深入浅出","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwf0006k4u908vzbd2r","content":"<p>以前在用 CSS 时，总想系统学习一下 CSS 知识。因为以前写 CSS 时，总是哪里不会 baidu 哪里，没有系统性，对一些“效果”（bug）也是浅尝辄止，属于解决完就忘了的那种。现系统学习一番后，将学习总结、体会汇成一篇博客。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"CSS-不正交\"><a href=\"#CSS-不正交\" class=\"headerlink\" title=\"CSS 不正交\"></a>CSS 不正交</h1><p>CSS 易学，只要记住定义元素的属性和值就可以了，但因其不正交的特点，又使得它又非常难学。何为不正交？举个例子：当我们在页面中增加<code>u&gt;li</code>标签，其默认样式是有小圆点的，但是当我们给<code>li</code>加上<code>display:block</code>时，小圆点非常奇怪的消失了，这使得我们在使用 CSS 非常小心，因为你也不知道什么时候会踩坑。除此之外，还有以下几个坑：</p>\n<ul>\n<li><p>margin 与 border</p>\n<ol>\n<li><p>上下两个 div，margin 都为 10px 上 div 底部与下 div 顶部的 margin 会重合，有以下解决方法：</p>\n<ul>\n<li>在两个 div 之间加个 border 为 0.1px 的 div</li>\n<li>给两个 div 之间加<code>display：table</code>的 div</li>\n<li>给两个 div 之间加<code>display：flex</code>的 div</li>\n<li>给两个 div 之间加<code>overflow: hidden;</code>的 div</li>\n</ul>\n</li>\n<li><p>两个父子 div，子元素有 margin 值，子元素的 margin 值会超出父元素，有以下解决方法：</p>\n<ul>\n<li>给父元素加 border</li>\n<li>给父元素加 padding</li>\n<li>给父元素加<code>overflow: hidden;</code></li>\n<li>给父元素加<code>display：flex</code>，子元素宽度会有变化</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><code>display:inline</code>、<code>display:inline-block</code>的元素，加了<code>position:absolute</code>，display 会变成 block;</p>\n</li>\n<li><p><code>display:fix</code>与 transform 混用，会影响 fix 的定位位置</p>\n</li>\n<li><p>float 与 inline 元素，inline 元素会环绕 float 元素，而不会在 float 元素下方，但是 block 元素会在下方</p>\n</li>\n</ul>\n<h1 id=\"元素的宽高\"><a href=\"#元素的宽高\" class=\"headerlink\" title=\"元素的宽高\"></a>元素的宽高</h1><p>记住一点，能不用定死宽高的，就不要定死宽高，采用添加 padding 的方式撑高元素</p>\n<ul>\n<li>字与字通过基线对齐，元素高度相同，基线不同，并排的话，可能会导致撑开的高度大于元素本身。内联元素 margin 和 padding 会只会影响宽，不会影响高，其高度由 line-height 决定</li>\n<li><code>font-size</code>的大小不一定真是字体大小，不同字体有默认行高（设计师设计时设置），使得不同字体的撑开的高度可能不一致</li>\n<li>内联元素之间如果有空格，或有回车，在网页则会显示两个内联元素之间有一个莫名其妙的空格</li>\n<li>设置了浮动，父元素要清除浮动，防止浮动造成高度塌陷</li>\n<li>设置两端对齐<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.paernt</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><a href=\"https://jiangnana.fun/test/%E7%9C%81%E7%95%A5%E5%8F%B7.html\">一行字，超出省略号</a></li>\n<li><a href=\"https://jiangnana.fun/test/%E5%A4%9A%E8%A1%8C%E8%B6%85%E5%87%BA%E7%9C%81%E7%95%A5%E5%8F%B7.html\">多行字超出省略号（管 IE 干嘛 →_→）</a></li>\n</ul>\n<h1 id=\"堆叠上下文\"><a href=\"#堆叠上下文\" class=\"headerlink\" title=\"堆叠上下文\"></a>堆叠上下文</h1><p><a href=\"https://jiangnana.fun/2018/11/04/CSS%E5%A0%86%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/\">开启传送门·另一篇博客</a></p>\n<h1 id=\"icon-的做法\"><a href=\"#icon-的做法\" class=\"headerlink\" title=\"icon 的做法\"></a>icon 的做法</h1><p>现在使用较多的是通过 SVG 导入在线图标，也有通过背景图的（sprites 生成器），或者直接用 CSS 干的比如<a href=\"https://jiangnana.fun/test/taichi.html\">太极图</a></p>\n<h1 id=\"移动端页面\"><a href=\"#移动端页面\" class=\"headerlink\" title=\"移动端页面\"></a>移动端页面</h1><p>移动端的页面和 PC 端的没区别，但要注意以下几点</p>\n<ul>\n<li>手机端要加个<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code>禁止用户缩放</li>\n<li>媒体查询，需要注意优先级问题，后面优先级强<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">980px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">375px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>&lt;link rel=&#39;stylesheet&#39; href=&#39;xxx.css&#39; media=&#39;max-width:375px&#39;&gt;</code>设备小于 320px 才引用 style.css</li>\n<li>要设计图，没设计图不做</li>\n<li>学会隐藏元素</li>\n<li>手机端有 touch 事件，没有 hover 事件</li>\n<li>手机端不能改变屏幕大小（resize），也没有滚动条</li>\n</ul>\n<h1 id=\"flex-布局\"><a href=\"#flex-布局\" class=\"headerlink\" title=\"flex 布局\"></a>flex 布局</h1><p>flex 适用于简单的线性布局，更复杂的用 grid</p>\n<p>主要记住 flex container 以及 flex item 的六个属性</p>\n<p>flex container</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-direction</td>\n<td>定义内部元素的排序方向，常用的有 row，row-reverse，column，column-reverse</td>\n</tr>\n<tr>\n<td>flex-wrap</td>\n<td>是否换行</td>\n</tr>\n<tr>\n<td>flex-flow</td>\n<td>上面两个的简写</td>\n</tr>\n<tr>\n<td>justify-content</td>\n<td>主轴方向的对齐方向</td>\n</tr>\n<tr>\n<td>align-items</td>\n<td>侧轴方向的对齐方向</td>\n</tr>\n<tr>\n<td>align-content</td>\n<td>多行、多列内容的对齐方向，center，space-around，space-bteween 等</td>\n</tr>\n</tbody></table>\n<p>flex item</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-grow</td>\n<td>空间有空余时，增长比例</td>\n</tr>\n<tr>\n<td>flex-shrink</td>\n<td>空间不够时，收缩比例</td>\n</tr>\n<tr>\n<td>flex-basis</td>\n<td>设置初始大小</td>\n</tr>\n<tr>\n<td>flex</td>\n<td>上面三个的缩写</td>\n</tr>\n<tr>\n<td>order</td>\n<td>元素排列顺序</td>\n</tr>\n<tr>\n<td>align-self</td>\n<td>自身的对齐方式，重写 align-items 的属性</td>\n</tr>\n</tbody></table>\n<h1 id=\"BFC（格式化上下文）\"><a href=\"#BFC（格式化上下文）\" class=\"headerlink\" title=\"BFC（格式化上下文）\"></a>BFC（格式化上下文）</h1><p>什么是 BFC 说不清楚</p>\n<p>但可以说明某例子是否是 BFC</p>\n<p>一个块格式化上下文（block formatting context） 是 Web 页面的可视化 CSS 渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。</p>\n<p>一个块格式化上下文由以下之一创建：</p>\n<ul>\n<li>根元素或其它包含它的元素</li>\n<li>浮动元素 (元素的 float 不是 none)</li>\n<li>绝对定位元素 (元素具有 position 为 absolute 或 fixed)</li>\n<li>内联块 (元素具有 display: inline-block)</li>\n<li>表格单元格 (元素具有 display: table-cell，HTML 表格单元格默认属性)</li>\n<li>表格标题 (元素具有 display: table-caption, HTML 表格标题默认属性)</li>\n<li>具有 overflow 且值不是 visible 的块元素，</li>\n<li>display: flow-root</li>\n<li>column-span: all 应当总是会创建一个新的格式化上下文，即便具有 - - column-span: all 的元素并不被包裹在一个多列容器中</li>\n</ul>\n<p>一个块格式化上下文包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。</p>\n<p>BFC 有什么用？ - 使父元素能包住子元素 - 兄弟之间划清界限</p>\n<h1 id=\"动态-rem\"><a href=\"#动态-rem\" class=\"headerlink\" title=\"动态 rem\"></a>动态 rem</h1><p>em 是自己的 font-size 的值的大小，大概就是一个汉字的高度，或者一个字母 M 的高度</p>\n<p>rem 是 root em ，指的是根元素（html）的字体大小</p>\n<ul>\n<li>可以通过 js 动态调整 rem 大小</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\">     var pageWidth = window.innerWidth</span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\">     document.write(&#x27;<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"string\">&#x27;+pageWidth+&#x27;</span>px;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>&#x27;)</span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"> </span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 SCSS 里使用 PX2REM<br>在 vscode 里可以下载 sass 插件</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@function</span> px(<span class=\"variable\">$px</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@return</span> <span class=\"variable\">$px</span>/<span class=\"variable\">$designWidth</span> * <span class=\"number\">10</span> + rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$designWidth</span>: <span class=\"number\">640</span>; <span class=\"comment\">// 640 是设计稿的宽度，你要根据设计稿的宽度填写。如果设计师的设计稿宽度不统一，就杀死设计师，换个新的。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: px(<span class=\"number\">320</span>);</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: px(<span class=\"number\">160</span>);</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: px(<span class=\"number\">40</span>) px(<span class=\"number\">40</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"bootstrap\"><a href=\"#bootstrap\" class=\"headerlink\" title=\"bootstrap\"></a>bootstrap</h1><p>2 兼容 IE6,3 不兼容 IE6</p>\n<p>栅栏布局：</p>\n<pre><code>- .row&gt;div.col-lg-12\n- .row&gt;div.col-md-12\n- .row&gt;div.col-xs-12\n- .row&gt;div.col-sn-12\n</code></pre>\n<p>建议不要更改 bootstrap 上类的值，如需修改，建议套一个父级 div，在父级 div 上更改</p>\n<p>其余的抄官方文档就完事了。。。</p>\n<h1 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h1><p>BFC 的兄弟，指 inline formatting context</p>\n<p><code>font-size：100px;</code>到底指的是什么呢？em-square，要去了解国外的活字印刷，指的是印刷这个字的模具大小。</p>\n<p>line-height：实际占地高度</p>\n<p><code>vertical-align</code>可以用来解决 img 元素在 div 中，底部有空隙的 bug，其余没什么用。</p>\n","site":{"data":{}},"excerpt":"<p>以前在用 CSS 时，总想系统学习一下 CSS 知识。因为以前写 CSS 时，总是哪里不会 baidu 哪里，没有系统性，对一些“效果”（bug）也是浅尝辄止，属于解决完就忘了的那种。现系统学习一番后，将学习总结、体会汇成一篇博客。</p>","more":"<h1 id=\"CSS-不正交\"><a href=\"#CSS-不正交\" class=\"headerlink\" title=\"CSS 不正交\"></a>CSS 不正交</h1><p>CSS 易学，只要记住定义元素的属性和值就可以了，但因其不正交的特点，又使得它又非常难学。何为不正交？举个例子：当我们在页面中增加<code>u&gt;li</code>标签，其默认样式是有小圆点的，但是当我们给<code>li</code>加上<code>display:block</code>时，小圆点非常奇怪的消失了，这使得我们在使用 CSS 非常小心，因为你也不知道什么时候会踩坑。除此之外，还有以下几个坑：</p>\n<ul>\n<li><p>margin 与 border</p>\n<ol>\n<li><p>上下两个 div，margin 都为 10px 上 div 底部与下 div 顶部的 margin 会重合，有以下解决方法：</p>\n<ul>\n<li>在两个 div 之间加个 border 为 0.1px 的 div</li>\n<li>给两个 div 之间加<code>display：table</code>的 div</li>\n<li>给两个 div 之间加<code>display：flex</code>的 div</li>\n<li>给两个 div 之间加<code>overflow: hidden;</code>的 div</li>\n</ul>\n</li>\n<li><p>两个父子 div，子元素有 margin 值，子元素的 margin 值会超出父元素，有以下解决方法：</p>\n<ul>\n<li>给父元素加 border</li>\n<li>给父元素加 padding</li>\n<li>给父元素加<code>overflow: hidden;</code></li>\n<li>给父元素加<code>display：flex</code>，子元素宽度会有变化</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><code>display:inline</code>、<code>display:inline-block</code>的元素，加了<code>position:absolute</code>，display 会变成 block;</p>\n</li>\n<li><p><code>display:fix</code>与 transform 混用，会影响 fix 的定位位置</p>\n</li>\n<li><p>float 与 inline 元素，inline 元素会环绕 float 元素，而不会在 float 元素下方，但是 block 元素会在下方</p>\n</li>\n</ul>\n<h1 id=\"元素的宽高\"><a href=\"#元素的宽高\" class=\"headerlink\" title=\"元素的宽高\"></a>元素的宽高</h1><p>记住一点，能不用定死宽高的，就不要定死宽高，采用添加 padding 的方式撑高元素</p>\n<ul>\n<li>字与字通过基线对齐，元素高度相同，基线不同，并排的话，可能会导致撑开的高度大于元素本身。内联元素 margin 和 padding 会只会影响宽，不会影响高，其高度由 line-height 决定</li>\n<li><code>font-size</code>的大小不一定真是字体大小，不同字体有默认行高（设计师设计时设置），使得不同字体的撑开的高度可能不一致</li>\n<li>内联元素之间如果有空格，或有回车，在网页则会显示两个内联元素之间有一个莫名其妙的空格</li>\n<li>设置了浮动，父元素要清除浮动，防止浮动造成高度塌陷</li>\n<li>设置两端对齐<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.paernt</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><a href=\"https://jiangnana.fun/test/%E7%9C%81%E7%95%A5%E5%8F%B7.html\">一行字，超出省略号</a></li>\n<li><a href=\"https://jiangnana.fun/test/%E5%A4%9A%E8%A1%8C%E8%B6%85%E5%87%BA%E7%9C%81%E7%95%A5%E5%8F%B7.html\">多行字超出省略号（管 IE 干嘛 →_→）</a></li>\n</ul>\n<h1 id=\"堆叠上下文\"><a href=\"#堆叠上下文\" class=\"headerlink\" title=\"堆叠上下文\"></a>堆叠上下文</h1><p><a href=\"https://jiangnana.fun/2018/11/04/CSS%E5%A0%86%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/\">开启传送门·另一篇博客</a></p>\n<h1 id=\"icon-的做法\"><a href=\"#icon-的做法\" class=\"headerlink\" title=\"icon 的做法\"></a>icon 的做法</h1><p>现在使用较多的是通过 SVG 导入在线图标，也有通过背景图的（sprites 生成器），或者直接用 CSS 干的比如<a href=\"https://jiangnana.fun/test/taichi.html\">太极图</a></p>\n<h1 id=\"移动端页面\"><a href=\"#移动端页面\" class=\"headerlink\" title=\"移动端页面\"></a>移动端页面</h1><p>移动端的页面和 PC 端的没区别，但要注意以下几点</p>\n<ul>\n<li>手机端要加个<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code>禁止用户缩放</li>\n<li>媒体查询，需要注意优先级问题，后面优先级强<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">980px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">375px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>&lt;link rel=&#39;stylesheet&#39; href=&#39;xxx.css&#39; media=&#39;max-width:375px&#39;&gt;</code>设备小于 320px 才引用 style.css</li>\n<li>要设计图，没设计图不做</li>\n<li>学会隐藏元素</li>\n<li>手机端有 touch 事件，没有 hover 事件</li>\n<li>手机端不能改变屏幕大小（resize），也没有滚动条</li>\n</ul>\n<h1 id=\"flex-布局\"><a href=\"#flex-布局\" class=\"headerlink\" title=\"flex 布局\"></a>flex 布局</h1><p>flex 适用于简单的线性布局，更复杂的用 grid</p>\n<p>主要记住 flex container 以及 flex item 的六个属性</p>\n<p>flex container</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-direction</td>\n<td>定义内部元素的排序方向，常用的有 row，row-reverse，column，column-reverse</td>\n</tr>\n<tr>\n<td>flex-wrap</td>\n<td>是否换行</td>\n</tr>\n<tr>\n<td>flex-flow</td>\n<td>上面两个的简写</td>\n</tr>\n<tr>\n<td>justify-content</td>\n<td>主轴方向的对齐方向</td>\n</tr>\n<tr>\n<td>align-items</td>\n<td>侧轴方向的对齐方向</td>\n</tr>\n<tr>\n<td>align-content</td>\n<td>多行、多列内容的对齐方向，center，space-around，space-bteween 等</td>\n</tr>\n</tbody></table>\n<p>flex item</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-grow</td>\n<td>空间有空余时，增长比例</td>\n</tr>\n<tr>\n<td>flex-shrink</td>\n<td>空间不够时，收缩比例</td>\n</tr>\n<tr>\n<td>flex-basis</td>\n<td>设置初始大小</td>\n</tr>\n<tr>\n<td>flex</td>\n<td>上面三个的缩写</td>\n</tr>\n<tr>\n<td>order</td>\n<td>元素排列顺序</td>\n</tr>\n<tr>\n<td>align-self</td>\n<td>自身的对齐方式，重写 align-items 的属性</td>\n</tr>\n</tbody></table>\n<h1 id=\"BFC（格式化上下文）\"><a href=\"#BFC（格式化上下文）\" class=\"headerlink\" title=\"BFC（格式化上下文）\"></a>BFC（格式化上下文）</h1><p>什么是 BFC 说不清楚</p>\n<p>但可以说明某例子是否是 BFC</p>\n<p>一个块格式化上下文（block formatting context） 是 Web 页面的可视化 CSS 渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。</p>\n<p>一个块格式化上下文由以下之一创建：</p>\n<ul>\n<li>根元素或其它包含它的元素</li>\n<li>浮动元素 (元素的 float 不是 none)</li>\n<li>绝对定位元素 (元素具有 position 为 absolute 或 fixed)</li>\n<li>内联块 (元素具有 display: inline-block)</li>\n<li>表格单元格 (元素具有 display: table-cell，HTML 表格单元格默认属性)</li>\n<li>表格标题 (元素具有 display: table-caption, HTML 表格标题默认属性)</li>\n<li>具有 overflow 且值不是 visible 的块元素，</li>\n<li>display: flow-root</li>\n<li>column-span: all 应当总是会创建一个新的格式化上下文，即便具有 - - column-span: all 的元素并不被包裹在一个多列容器中</li>\n</ul>\n<p>一个块格式化上下文包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。</p>\n<p>BFC 有什么用？ - 使父元素能包住子元素 - 兄弟之间划清界限</p>\n<h1 id=\"动态-rem\"><a href=\"#动态-rem\" class=\"headerlink\" title=\"动态 rem\"></a>动态 rem</h1><p>em 是自己的 font-size 的值的大小，大概就是一个汉字的高度，或者一个字母 M 的高度</p>\n<p>rem 是 root em ，指的是根元素（html）的字体大小</p>\n<ul>\n<li>可以通过 js 动态调整 rem 大小</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\">     var pageWidth = window.innerWidth</span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\">     document.write(&#x27;<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"string\">&#x27;+pageWidth+&#x27;</span>px;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>&#x27;)</span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"> </span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 SCSS 里使用 PX2REM<br>在 vscode 里可以下载 sass 插件</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@function</span> px(<span class=\"variable\">$px</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@return</span> <span class=\"variable\">$px</span>/<span class=\"variable\">$designWidth</span> * <span class=\"number\">10</span> + rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$designWidth</span>: <span class=\"number\">640</span>; <span class=\"comment\">// 640 是设计稿的宽度，你要根据设计稿的宽度填写。如果设计师的设计稿宽度不统一，就杀死设计师，换个新的。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: px(<span class=\"number\">320</span>);</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: px(<span class=\"number\">160</span>);</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: px(<span class=\"number\">40</span>) px(<span class=\"number\">40</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"bootstrap\"><a href=\"#bootstrap\" class=\"headerlink\" title=\"bootstrap\"></a>bootstrap</h1><p>2 兼容 IE6,3 不兼容 IE6</p>\n<p>栅栏布局：</p>\n<pre><code>- .row&gt;div.col-lg-12\n- .row&gt;div.col-md-12\n- .row&gt;div.col-xs-12\n- .row&gt;div.col-sn-12\n</code></pre>\n<p>建议不要更改 bootstrap 上类的值，如需修改，建议套一个父级 div，在父级 div 上更改</p>\n<p>其余的抄官方文档就完事了。。。</p>\n<h1 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h1><p>BFC 的兄弟，指 inline formatting context</p>\n<p><code>font-size：100px;</code>到底指的是什么呢？em-square，要去了解国外的活字印刷，指的是印刷这个字的模具大小。</p>\n<p>line-height：实际占地高度</p>\n<p><code>vertical-align</code>可以用来解决 img 元素在 div 中，底部有空隙的 bug，其余没什么用。</p>"},{"title":"CSS知识点","date":"2018-10-20T16:00:00.000Z","updated":"2018-10-20T16:00:00.000Z","_content":"\n### CSS 介绍\n\n层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。\n\n<!-- more -->\n\nCSS 是开放网络的核心语言之一，由 W3C 规范 实现跨浏览器的标准化。CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准（修改了 CSS2 中部分错误）， CSS3 分成多个小模块且正在标准化中。后续不会有 CSS4，各个分支独立升级。\n\n### CSS 知识点\n\n- 引用 CSS 的 4 种方式\n  - 内联样式。\n  - style 标签。\n  - 外联样式`<link rel=\"stylesheet\" href=\"\" >`。\n  - 在 css 中引用样式（不推荐）`@import\"mystyle.css\"。 `\n- 调试时给调试标签加一像素的 border。\n- 使元素排列在一行：给子元素添加浮动，父元素添加 clearfix,不建议使用 overflow:hidden。\n  ```css\n  content: '';\n  display: block;\n  clear: both;\n  ```\n- `<a>`有默认样式，在全局改变字体颜色，其字体颜色不会改变，添加样式`color: inhert`使 a 可以继承全局设置的颜色。\n- 标签的高度由其内部文档流元素的高度总和决定.\n  > 文档流：内联元素按基线从左往右，块级元素从上往下流动。\n- `position:relative`不会使元素脱离文档流\n- 内联元素的 margin 和 padding 会影响宽，不会影响高，高度取决于 line-height\n- 少用`display：inline`，有 bug，使用`float`。\n- 行高建议比字体大，不同字体的建议行高不一样。\n- 字和字通过基线对齐，不是通过中线对齐。\n- `position:fix`会使宽度缩进去，使用`width:100%`，但有 padding 时会出 bug，其宽度超过浏览器宽度，可通过在下一级添加一个 div，把左右 padding 加在这个 div 上解决。\n- `background-size：cover`，`background-position：center center`:解决背景图片居中、改变背景大小的问题。\n- 用 padding 撑起宽高，尽量少设置宽高，可用 max-width。\n- span 里不要有 div。\n- `boxsizing:content-box`:标准盒模型，实际宽高为设置的宽高+内外边距+border。\n- `boxsizing:border-box`:怪异盒模型，实际宽高就是设置的宽高。\n- 伪元素不能选中。\n- [设置动画旋转](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n  ```css\n  @keyframes rotate{\n      from{animation： rotate(0deg);}\n      to{animation： rotate(360deg);}\n  }\n  # demo{\n      animation: rotate 2s infinite;\n      animation-timing-function:linear;\n  }\n  ```\n- 下载按钮要用`<a>`标签做，因为有下载请求。\n- `:nth-child(an+b)`这个 CSS 伪类首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从 1 开始排序，选择的结果为第（an+b）个元素的集合（n=0，1，2，3...）。\n- 使用`display:inline-block`会有空隙，要同时使用`vertical-align:top`。\n- 横线做结构，不做类名。\n- nbsp 是 no break space 的缩写\n- 在伪类上加`padding-top:100%`，可以生成个正方形\n","source":"_posts/CSS知识点.md","raw":"---\ntitle: CSS知识点\ndate: 2018-10-21 00:00:00\nupdated: 2018-10-21 00:00:00\ntags:\n  - CSS\n---\n\n### CSS 介绍\n\n层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。\n\n<!-- more -->\n\nCSS 是开放网络的核心语言之一，由 W3C 规范 实现跨浏览器的标准化。CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准（修改了 CSS2 中部分错误）， CSS3 分成多个小模块且正在标准化中。后续不会有 CSS4，各个分支独立升级。\n\n### CSS 知识点\n\n- 引用 CSS 的 4 种方式\n  - 内联样式。\n  - style 标签。\n  - 外联样式`<link rel=\"stylesheet\" href=\"\" >`。\n  - 在 css 中引用样式（不推荐）`@import\"mystyle.css\"。 `\n- 调试时给调试标签加一像素的 border。\n- 使元素排列在一行：给子元素添加浮动，父元素添加 clearfix,不建议使用 overflow:hidden。\n  ```css\n  content: '';\n  display: block;\n  clear: both;\n  ```\n- `<a>`有默认样式，在全局改变字体颜色，其字体颜色不会改变，添加样式`color: inhert`使 a 可以继承全局设置的颜色。\n- 标签的高度由其内部文档流元素的高度总和决定.\n  > 文档流：内联元素按基线从左往右，块级元素从上往下流动。\n- `position:relative`不会使元素脱离文档流\n- 内联元素的 margin 和 padding 会影响宽，不会影响高，高度取决于 line-height\n- 少用`display：inline`，有 bug，使用`float`。\n- 行高建议比字体大，不同字体的建议行高不一样。\n- 字和字通过基线对齐，不是通过中线对齐。\n- `position:fix`会使宽度缩进去，使用`width:100%`，但有 padding 时会出 bug，其宽度超过浏览器宽度，可通过在下一级添加一个 div，把左右 padding 加在这个 div 上解决。\n- `background-size：cover`，`background-position：center center`:解决背景图片居中、改变背景大小的问题。\n- 用 padding 撑起宽高，尽量少设置宽高，可用 max-width。\n- span 里不要有 div。\n- `boxsizing:content-box`:标准盒模型，实际宽高为设置的宽高+内外边距+border。\n- `boxsizing:border-box`:怪异盒模型，实际宽高就是设置的宽高。\n- 伪元素不能选中。\n- [设置动画旋转](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n  ```css\n  @keyframes rotate{\n      from{animation： rotate(0deg);}\n      to{animation： rotate(360deg);}\n  }\n  # demo{\n      animation: rotate 2s infinite;\n      animation-timing-function:linear;\n  }\n  ```\n- 下载按钮要用`<a>`标签做，因为有下载请求。\n- `:nth-child(an+b)`这个 CSS 伪类首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从 1 开始排序，选择的结果为第（an+b）个元素的集合（n=0，1，2，3...）。\n- 使用`display:inline-block`会有空隙，要同时使用`vertical-align:top`。\n- 横线做结构，不做类名。\n- nbsp 是 no break space 的缩写\n- 在伪类上加`padding-top:100%`，可以生成个正方形\n","slug":"CSS知识点","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwh0009k4u90m8s7etr","content":"<h3 id=\"CSS-介绍\"><a href=\"#CSS-介绍\" class=\"headerlink\" title=\"CSS 介绍\"></a>CSS 介绍</h3><p>层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。</p>\n<span id=\"more\"></span>\n\n<p>CSS 是开放网络的核心语言之一，由 W3C 规范 实现跨浏览器的标准化。CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准（修改了 CSS2 中部分错误）， CSS3 分成多个小模块且正在标准化中。后续不会有 CSS4，各个分支独立升级。</p>\n<h3 id=\"CSS-知识点\"><a href=\"#CSS-知识点\" class=\"headerlink\" title=\"CSS 知识点\"></a>CSS 知识点</h3><ul>\n<li>引用 CSS 的 4 种方式<ul>\n<li>内联样式。</li>\n<li>style 标签。</li>\n<li>外联样式<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot; &gt;</code>。</li>\n<li>在 css 中引用样式（不推荐）<code>@import&quot;mystyle.css&quot;。 </code></li>\n</ul>\n</li>\n<li>调试时给调试标签加一像素的 border。</li>\n<li>使元素排列在一行：给子元素添加浮动，父元素添加 clearfix,不建议使用 overflow:hidden。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both;</span><br></pre></td></tr></table></figure></li>\n<li><code>&lt;a&gt;</code>有默认样式，在全局改变字体颜色，其字体颜色不会改变，添加样式<code>color: inhert</code>使 a 可以继承全局设置的颜色。</li>\n<li>标签的高度由其内部文档流元素的高度总和决定.<blockquote>\n<p>文档流：内联元素按基线从左往右，块级元素从上往下流动。</p>\n</blockquote>\n</li>\n<li><code>position:relative</code>不会使元素脱离文档流</li>\n<li>内联元素的 margin 和 padding 会影响宽，不会影响高，高度取决于 line-height</li>\n<li>少用<code>display：inline</code>，有 bug，使用<code>float</code>。</li>\n<li>行高建议比字体大，不同字体的建议行高不一样。</li>\n<li>字和字通过基线对齐，不是通过中线对齐。</li>\n<li><code>position:fix</code>会使宽度缩进去，使用<code>width:100%</code>，但有 padding 时会出 bug，其宽度超过浏览器宽度，可通过在下一级添加一个 div，把左右 padding 加在这个 div 上解决。</li>\n<li><code>background-size：cover</code>，<code>background-position：center center</code>:解决背景图片居中、改变背景大小的问题。</li>\n<li>用 padding 撑起宽高，尽量少设置宽高，可用 max-width。</li>\n<li>span 里不要有 div。</li>\n<li><code>boxsizing:content-box</code>:标准盒模型，实际宽高为设置的宽高+内外边距+border。</li>\n<li><code>boxsizing:border-box</code>:怪异盒模型，实际宽高就是设置的宽高。</li>\n<li>伪元素不能选中。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">设置动画旋转</a><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> rotate&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>&#123;<span class=\"attribute\">animation</span>： rotate(<span class=\"number\">0deg</span>);&#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span>&#123;<span class=\"attribute\">animation</span>： rotate(<span class=\"number\">360deg</span>);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># demo&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: rotate <span class=\"number\">2s</span> infinite;</span><br><span class=\"line\">    <span class=\"attribute\">animation-timing-function</span>:linear;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>下载按钮要用<code>&lt;a&gt;</code>标签做，因为有下载请求。</li>\n<li><code>:nth-child(an+b)</code>这个 CSS 伪类首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从 1 开始排序，选择的结果为第（an+b）个元素的集合（n=0，1，2，3…）。</li>\n<li>使用<code>display:inline-block</code>会有空隙，要同时使用<code>vertical-align:top</code>。</li>\n<li>横线做结构，不做类名。</li>\n<li>nbsp 是 no break space 的缩写</li>\n<li>在伪类上加<code>padding-top:100%</code>，可以生成个正方形</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"CSS-介绍\"><a href=\"#CSS-介绍\" class=\"headerlink\" title=\"CSS 介绍\"></a>CSS 介绍</h3><p>层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。</p>","more":"<p>CSS 是开放网络的核心语言之一，由 W3C 规范 实现跨浏览器的标准化。CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准（修改了 CSS2 中部分错误）， CSS3 分成多个小模块且正在标准化中。后续不会有 CSS4，各个分支独立升级。</p>\n<h3 id=\"CSS-知识点\"><a href=\"#CSS-知识点\" class=\"headerlink\" title=\"CSS 知识点\"></a>CSS 知识点</h3><ul>\n<li>引用 CSS 的 4 种方式<ul>\n<li>内联样式。</li>\n<li>style 标签。</li>\n<li>外联样式<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot; &gt;</code>。</li>\n<li>在 css 中引用样式（不推荐）<code>@import&quot;mystyle.css&quot;。 </code></li>\n</ul>\n</li>\n<li>调试时给调试标签加一像素的 border。</li>\n<li>使元素排列在一行：给子元素添加浮动，父元素添加 clearfix,不建议使用 overflow:hidden。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both;</span><br></pre></td></tr></table></figure></li>\n<li><code>&lt;a&gt;</code>有默认样式，在全局改变字体颜色，其字体颜色不会改变，添加样式<code>color: inhert</code>使 a 可以继承全局设置的颜色。</li>\n<li>标签的高度由其内部文档流元素的高度总和决定.<blockquote>\n<p>文档流：内联元素按基线从左往右，块级元素从上往下流动。</p>\n</blockquote>\n</li>\n<li><code>position:relative</code>不会使元素脱离文档流</li>\n<li>内联元素的 margin 和 padding 会影响宽，不会影响高，高度取决于 line-height</li>\n<li>少用<code>display：inline</code>，有 bug，使用<code>float</code>。</li>\n<li>行高建议比字体大，不同字体的建议行高不一样。</li>\n<li>字和字通过基线对齐，不是通过中线对齐。</li>\n<li><code>position:fix</code>会使宽度缩进去，使用<code>width:100%</code>，但有 padding 时会出 bug，其宽度超过浏览器宽度，可通过在下一级添加一个 div，把左右 padding 加在这个 div 上解决。</li>\n<li><code>background-size：cover</code>，<code>background-position：center center</code>:解决背景图片居中、改变背景大小的问题。</li>\n<li>用 padding 撑起宽高，尽量少设置宽高，可用 max-width。</li>\n<li>span 里不要有 div。</li>\n<li><code>boxsizing:content-box</code>:标准盒模型，实际宽高为设置的宽高+内外边距+border。</li>\n<li><code>boxsizing:border-box</code>:怪异盒模型，实际宽高就是设置的宽高。</li>\n<li>伪元素不能选中。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">设置动画旋转</a><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> rotate&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>&#123;<span class=\"attribute\">animation</span>： rotate(<span class=\"number\">0deg</span>);&#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span>&#123;<span class=\"attribute\">animation</span>： rotate(<span class=\"number\">360deg</span>);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># demo&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: rotate <span class=\"number\">2s</span> infinite;</span><br><span class=\"line\">    <span class=\"attribute\">animation-timing-function</span>:linear;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>下载按钮要用<code>&lt;a&gt;</code>标签做，因为有下载请求。</li>\n<li><code>:nth-child(an+b)</code>这个 CSS 伪类首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从 1 开始排序，选择的结果为第（an+b）个元素的集合（n=0，1，2，3…）。</li>\n<li>使用<code>display:inline-block</code>会有空隙，要同时使用<code>vertical-align:top</code>。</li>\n<li>横线做结构，不做类名。</li>\n<li>nbsp 是 no break space 的缩写</li>\n<li>在伪类上加<code>padding-top:100%</code>，可以生成个正方形</li>\n</ul>"},{"title":"Cookies","date":"2019-01-02T16:00:00.000Z","updated":"2019-01-02T16:00:00.000Z","_content":"\n# Cookie 是什么？\n\n以下是 Web 开发里 Cookie 的含义。\n\n1. Cookie 是浏览器访问服务器后，服务器传给浏览器的**一段数据**。\n2. 浏览器需要保存这段数据，不得轻易删除。\n3. 此后每次浏览器访问该服务器，都必须带上这段数据。\n\n<!-- more -->\n\n# Cookie 的特点\n\n1. 服务器通过 Set-Cookie 响应头设置 Cookie\n2. 浏览器得到 Cookie 之后，每次请求都要带上 Cookie\n3. 客户端在一段时间内保存这个 Cookie，时长可通过代码修改\n4. 最大一般 4kb\n\n# Cookie 的用途\n\n1. 第一个作用是识别用户身份。\n\n   比如用户 A 用浏览器访问了 http://a.com，那么 http://a.com 的服务器就会立刻给 A 返回一段数据「uid=1」（这就是 Cookie）。当 A 再次访问 http://a.com 的其他页面时，就会附带上「uid=1」这段数据。\n\n   同理，用户 B 用浏览器访问 http://a.com 时，http://a.com 发现 B 没有附带 uid 数据，就给 B 分配了一个新的 uid，为 2，然后返回给 B 一段数据「uid=2」。B 之后访问 http://a.com 的时候，就会一直带上「uid=2」这段数据。\n\n   借此，http://a.com 的服务器就能区分 A 和 B 两个用户了。\n\n2. 第二个作用是记录历史。\n\n   假设 http://a.com 是一个购物网站，当 A 在上面将商品 A1 、A2 加入购物车时，JS 可以改写 Cookie，改为「uid=1; cart=A1,A2」，表示购物车里有 A1 和 A2 两样商品了。\n\n   这样一来，当用户关闭网页，过三天再打开网页的时候，依然可以看到 A1、A2 躺在购物车里，因为浏览器并不会无缘无故地删除这个 Cookie。\n\n   借此，就达到里记录用户操作历史的目的了。\n\n（上面的例子只是为了让大家了解 Cookie 的作用而构想出来的，实际的网站使用 Cookie 时会更谨慎一些。）\n\n> 引用\n\n- [https://zhuanlan.zhihu.com/p/22396872?refer=study-fe](https://zhuanlan.zhihu.com/p/22396872?refer=study-fe)\n- [https://zh.wikipedia.org/wiki/Cookie](https://zh.wikipedia.org/wiki/Cookie)\n","source":"_posts/Cookies.md","raw":"---\ntitle: Cookies\ndate: 2019-01-03 00:00:00\nupdated: 2019-01-03 00:00:00\ntags:\n  - Cookie\n---\n\n# Cookie 是什么？\n\n以下是 Web 开发里 Cookie 的含义。\n\n1. Cookie 是浏览器访问服务器后，服务器传给浏览器的**一段数据**。\n2. 浏览器需要保存这段数据，不得轻易删除。\n3. 此后每次浏览器访问该服务器，都必须带上这段数据。\n\n<!-- more -->\n\n# Cookie 的特点\n\n1. 服务器通过 Set-Cookie 响应头设置 Cookie\n2. 浏览器得到 Cookie 之后，每次请求都要带上 Cookie\n3. 客户端在一段时间内保存这个 Cookie，时长可通过代码修改\n4. 最大一般 4kb\n\n# Cookie 的用途\n\n1. 第一个作用是识别用户身份。\n\n   比如用户 A 用浏览器访问了 http://a.com，那么 http://a.com 的服务器就会立刻给 A 返回一段数据「uid=1」（这就是 Cookie）。当 A 再次访问 http://a.com 的其他页面时，就会附带上「uid=1」这段数据。\n\n   同理，用户 B 用浏览器访问 http://a.com 时，http://a.com 发现 B 没有附带 uid 数据，就给 B 分配了一个新的 uid，为 2，然后返回给 B 一段数据「uid=2」。B 之后访问 http://a.com 的时候，就会一直带上「uid=2」这段数据。\n\n   借此，http://a.com 的服务器就能区分 A 和 B 两个用户了。\n\n2. 第二个作用是记录历史。\n\n   假设 http://a.com 是一个购物网站，当 A 在上面将商品 A1 、A2 加入购物车时，JS 可以改写 Cookie，改为「uid=1; cart=A1,A2」，表示购物车里有 A1 和 A2 两样商品了。\n\n   这样一来，当用户关闭网页，过三天再打开网页的时候，依然可以看到 A1、A2 躺在购物车里，因为浏览器并不会无缘无故地删除这个 Cookie。\n\n   借此，就达到里记录用户操作历史的目的了。\n\n（上面的例子只是为了让大家了解 Cookie 的作用而构想出来的，实际的网站使用 Cookie 时会更谨慎一些。）\n\n> 引用\n\n- [https://zhuanlan.zhihu.com/p/22396872?refer=study-fe](https://zhuanlan.zhihu.com/p/22396872?refer=study-fe)\n- [https://zh.wikipedia.org/wiki/Cookie](https://zh.wikipedia.org/wiki/Cookie)\n","slug":"Cookies","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwi000ak4u9h9j0ap37","content":"<h1 id=\"Cookie-是什么？\"><a href=\"#Cookie-是什么？\" class=\"headerlink\" title=\"Cookie 是什么？\"></a>Cookie 是什么？</h1><p>以下是 Web 开发里 Cookie 的含义。</p>\n<ol>\n<li>Cookie 是浏览器访问服务器后，服务器传给浏览器的<strong>一段数据</strong>。</li>\n<li>浏览器需要保存这段数据，不得轻易删除。</li>\n<li>此后每次浏览器访问该服务器，都必须带上这段数据。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h1 id=\"Cookie-的特点\"><a href=\"#Cookie-的特点\" class=\"headerlink\" title=\"Cookie 的特点\"></a>Cookie 的特点</h1><ol>\n<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>\n<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>\n<li>客户端在一段时间内保存这个 Cookie，时长可通过代码修改</li>\n<li>最大一般 4kb</li>\n</ol>\n<h1 id=\"Cookie-的用途\"><a href=\"#Cookie-的用途\" class=\"headerlink\" title=\"Cookie 的用途\"></a>Cookie 的用途</h1><ol>\n<li><p>第一个作用是识别用户身份。</p>\n<p>比如用户 A 用浏览器访问了 <a href=\"http://a.com,那么/\">http://a.com，那么</a> <a href=\"http://a.com/\">http://a.com</a> 的服务器就会立刻给 A 返回一段数据「uid=1」（这就是 Cookie）。当 A 再次访问 <a href=\"http://a.com/\">http://a.com</a> 的其他页面时，就会附带上「uid=1」这段数据。</p>\n<p>同理，用户 B 用浏览器访问 <a href=\"http://a.com/\">http://a.com</a> 时，<a href=\"http://a.com/\">http://a.com</a> 发现 B 没有附带 uid 数据，就给 B 分配了一个新的 uid，为 2，然后返回给 B 一段数据「uid=2」。B 之后访问 <a href=\"http://a.com/\">http://a.com</a> 的时候，就会一直带上「uid=2」这段数据。</p>\n<p>借此，<a href=\"http://a.com/\">http://a.com</a> 的服务器就能区分 A 和 B 两个用户了。</p>\n</li>\n<li><p>第二个作用是记录历史。</p>\n<p>假设 <a href=\"http://a.com/\">http://a.com</a> 是一个购物网站，当 A 在上面将商品 A1 、A2 加入购物车时，JS 可以改写 Cookie，改为「uid=1; cart=A1,A2」，表示购物车里有 A1 和 A2 两样商品了。</p>\n<p>这样一来，当用户关闭网页，过三天再打开网页的时候，依然可以看到 A1、A2 躺在购物车里，因为浏览器并不会无缘无故地删除这个 Cookie。</p>\n<p>借此，就达到里记录用户操作历史的目的了。</p>\n</li>\n</ol>\n<p>（上面的例子只是为了让大家了解 Cookie 的作用而构想出来的，实际的网站使用 Cookie 时会更谨慎一些。）</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22396872?refer=study-fe\">https://zhuanlan.zhihu.com/p/22396872?refer=study-fe</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Cookie\">https://zh.wikipedia.org/wiki/Cookie</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Cookie-是什么？\"><a href=\"#Cookie-是什么？\" class=\"headerlink\" title=\"Cookie 是什么？\"></a>Cookie 是什么？</h1><p>以下是 Web 开发里 Cookie 的含义。</p>\n<ol>\n<li>Cookie 是浏览器访问服务器后，服务器传给浏览器的<strong>一段数据</strong>。</li>\n<li>浏览器需要保存这段数据，不得轻易删除。</li>\n<li>此后每次浏览器访问该服务器，都必须带上这段数据。</li>\n</ol>","more":"<h1 id=\"Cookie-的特点\"><a href=\"#Cookie-的特点\" class=\"headerlink\" title=\"Cookie 的特点\"></a>Cookie 的特点</h1><ol>\n<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>\n<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>\n<li>客户端在一段时间内保存这个 Cookie，时长可通过代码修改</li>\n<li>最大一般 4kb</li>\n</ol>\n<h1 id=\"Cookie-的用途\"><a href=\"#Cookie-的用途\" class=\"headerlink\" title=\"Cookie 的用途\"></a>Cookie 的用途</h1><ol>\n<li><p>第一个作用是识别用户身份。</p>\n<p>比如用户 A 用浏览器访问了 <a href=\"http://a.com,那么/\">http://a.com，那么</a> <a href=\"http://a.com/\">http://a.com</a> 的服务器就会立刻给 A 返回一段数据「uid=1」（这就是 Cookie）。当 A 再次访问 <a href=\"http://a.com/\">http://a.com</a> 的其他页面时，就会附带上「uid=1」这段数据。</p>\n<p>同理，用户 B 用浏览器访问 <a href=\"http://a.com/\">http://a.com</a> 时，<a href=\"http://a.com/\">http://a.com</a> 发现 B 没有附带 uid 数据，就给 B 分配了一个新的 uid，为 2，然后返回给 B 一段数据「uid=2」。B 之后访问 <a href=\"http://a.com/\">http://a.com</a> 的时候，就会一直带上「uid=2」这段数据。</p>\n<p>借此，<a href=\"http://a.com/\">http://a.com</a> 的服务器就能区分 A 和 B 两个用户了。</p>\n</li>\n<li><p>第二个作用是记录历史。</p>\n<p>假设 <a href=\"http://a.com/\">http://a.com</a> 是一个购物网站，当 A 在上面将商品 A1 、A2 加入购物车时，JS 可以改写 Cookie，改为「uid=1; cart=A1,A2」，表示购物车里有 A1 和 A2 两样商品了。</p>\n<p>这样一来，当用户关闭网页，过三天再打开网页的时候，依然可以看到 A1、A2 躺在购物车里，因为浏览器并不会无缘无故地删除这个 Cookie。</p>\n<p>借此，就达到里记录用户操作历史的目的了。</p>\n</li>\n</ol>\n<p>（上面的例子只是为了让大家了解 Cookie 的作用而构想出来的，实际的网站使用 Cookie 时会更谨慎一些。）</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22396872?refer=study-fe\">https://zhuanlan.zhihu.com/p/22396872?refer=study-fe</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Cookie\">https://zh.wikipedia.org/wiki/Cookie</a></li>\n</ul>"},{"title":"Docker 入门学习","date":"2021-09-21T16:00:00.000Z","updated":"2021-09-21T16:00:00.000Z","_content":"\n什么是 Docker ？更小更快速的虚拟机？\n\n<!-- more -->\n\n维基百科上这么解释：\n\n> Docker 容器与虚拟机类似，但二者在原理上不同。容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。容器更多的用于表示 软件的一个标准化单元。由于容器的标准化，因此它可以无视基础设施（Infrastructure）的差异，部署到任何一个地方。\n\n# Docker 三个基本概念\n\n1. 镜像（Images）是一个只读模板，用于指示创建容器。 镜像分层(layers)构建的，而定义这些层次的文件叫 Dockerfile，可以本地创建或者拉取别人创建好的镜像。\n2. 容器（Containers）是镜像的可运行的实例。容器可通过 API 或 CLI（命令行）进行操控，容器 = 镜像 + 读写层。\n3. 仓库（Repository）是集中存放镜像文件的场所。\n\n# 运行 Hello World\n\n```\ndocker pull library/hello-world\n```\n\n`docker pull images` 是抓取 image 文件，library/hello-world 是 image 文件在仓库里面的位置，其中 library 是 image 文件所在的组，hello-world 是 image 文件的名字。\n\n抓取成功后通过 `docker images` 就可以查看本机的拉取的 image 文件了。\n\n```\ndocker run hello-world\n```\n\n运行后 hello world 就会停止运行，容器自动终止。有些容器不会自动终止，因为提供的是服务，比如 MySQL 镜像等。\n\n# Docker 常用命令\n\n```docker\ndocker pull image_name  # 拉取Docker镜像\ndocker images # 查看主机下存在多少镜像\ndocker ps # 查看正在运行的容器\ndocker start container_id #启动\ndocker restart container_id #重启\ndocker stop container_id #停止\ndocker exec -it container_id bash #进入容器中\ndocker rm container_name/container_id #删除容器\ndocker rmi image_name #删除镜像\n```\n\n# 使用 Dockerfile 创建镜像命令\n\n```docker\nFROM # 用于指定基础的 images ，一般格式为 FROM <image> or FORM <image>:<tag>\nMAINTAINER #用于指定镜像创建者和联系方式，一般格式为 MAINTAINER <name>\nCOPY #用于复制本地主机的 <src> (为 Dockerfile 所在目录的相对路径)到容器中的 <dest> ,当使用本地目录为源目录时，推荐使用 COPY\nWORKDIR #用于配合 RUN，CMD，ENTRYPOINT 命令设置当前工作路径\nRUN #用于容器内部执行命令。每个 RUN 命令相当于在原有的镜像基础上添加了一个改动层，原有的镜像不会有变化\nEXPOSE #用来指定对外开放的端口\nCMD #指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行，可被替代。\n```\n\n例如在当前目录新建 Dockerfile 并写入\n\n```docker\nFROM nginx\nRUN echo '<h1>hello.xxx</h1>' > /usr/share/nginx/html/index.html\n```\n\n然后在当前目录运行 `docker build -t image_name .`\n\n- -t 是为新镜像设置仓库和名称\n- image_name 为镜像名称\n- . 为 Dockerfile 的相对路径\n\n运行成功 运行 `docker images` 就可以看见新建的镜像了\n\n然后运行:\n\n```docker\ndocker run --name [container_name] -d -d -p 7301:80 [image_name] #这条命令会用 Nginx 镜像启动一个容器，命名为 container_name ，并且映射了 7301 端口。\n```\n\n> 引用\n\n- [Docker](https://zh.wikipedia.org/wiki/Docker)\n- [这可能是最为详细的 Docker 入门总结](https://juejin.cn/post/6844903713115488269#heading-0)\n","source":"_posts/Docker 入门学习.md","raw":"---\ntitle: Docker 入门学习\ndate: 2021-09-22 00:00:00\nupdated: 2021-09-22 00:00:00\ntags:\n  - Docker\n---\n\n什么是 Docker ？更小更快速的虚拟机？\n\n<!-- more -->\n\n维基百科上这么解释：\n\n> Docker 容器与虚拟机类似，但二者在原理上不同。容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。容器更多的用于表示 软件的一个标准化单元。由于容器的标准化，因此它可以无视基础设施（Infrastructure）的差异，部署到任何一个地方。\n\n# Docker 三个基本概念\n\n1. 镜像（Images）是一个只读模板，用于指示创建容器。 镜像分层(layers)构建的，而定义这些层次的文件叫 Dockerfile，可以本地创建或者拉取别人创建好的镜像。\n2. 容器（Containers）是镜像的可运行的实例。容器可通过 API 或 CLI（命令行）进行操控，容器 = 镜像 + 读写层。\n3. 仓库（Repository）是集中存放镜像文件的场所。\n\n# 运行 Hello World\n\n```\ndocker pull library/hello-world\n```\n\n`docker pull images` 是抓取 image 文件，library/hello-world 是 image 文件在仓库里面的位置，其中 library 是 image 文件所在的组，hello-world 是 image 文件的名字。\n\n抓取成功后通过 `docker images` 就可以查看本机的拉取的 image 文件了。\n\n```\ndocker run hello-world\n```\n\n运行后 hello world 就会停止运行，容器自动终止。有些容器不会自动终止，因为提供的是服务，比如 MySQL 镜像等。\n\n# Docker 常用命令\n\n```docker\ndocker pull image_name  # 拉取Docker镜像\ndocker images # 查看主机下存在多少镜像\ndocker ps # 查看正在运行的容器\ndocker start container_id #启动\ndocker restart container_id #重启\ndocker stop container_id #停止\ndocker exec -it container_id bash #进入容器中\ndocker rm container_name/container_id #删除容器\ndocker rmi image_name #删除镜像\n```\n\n# 使用 Dockerfile 创建镜像命令\n\n```docker\nFROM # 用于指定基础的 images ，一般格式为 FROM <image> or FORM <image>:<tag>\nMAINTAINER #用于指定镜像创建者和联系方式，一般格式为 MAINTAINER <name>\nCOPY #用于复制本地主机的 <src> (为 Dockerfile 所在目录的相对路径)到容器中的 <dest> ,当使用本地目录为源目录时，推荐使用 COPY\nWORKDIR #用于配合 RUN，CMD，ENTRYPOINT 命令设置当前工作路径\nRUN #用于容器内部执行命令。每个 RUN 命令相当于在原有的镜像基础上添加了一个改动层，原有的镜像不会有变化\nEXPOSE #用来指定对外开放的端口\nCMD #指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行，可被替代。\n```\n\n例如在当前目录新建 Dockerfile 并写入\n\n```docker\nFROM nginx\nRUN echo '<h1>hello.xxx</h1>' > /usr/share/nginx/html/index.html\n```\n\n然后在当前目录运行 `docker build -t image_name .`\n\n- -t 是为新镜像设置仓库和名称\n- image_name 为镜像名称\n- . 为 Dockerfile 的相对路径\n\n运行成功 运行 `docker images` 就可以看见新建的镜像了\n\n然后运行:\n\n```docker\ndocker run --name [container_name] -d -d -p 7301:80 [image_name] #这条命令会用 Nginx 镜像启动一个容器，命名为 container_name ，并且映射了 7301 端口。\n```\n\n> 引用\n\n- [Docker](https://zh.wikipedia.org/wiki/Docker)\n- [这可能是最为详细的 Docker 入门总结](https://juejin.cn/post/6844903713115488269#heading-0)\n","slug":"Docker 入门学习","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwk000ck4u93ki720ls","content":"<p>什么是 Docker ？更小更快速的虚拟机？</p>\n<span id=\"more\"></span>\n\n<p>维基百科上这么解释：</p>\n<blockquote>\n<p>Docker 容器与虚拟机类似，但二者在原理上不同。容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。容器更多的用于表示 软件的一个标准化单元。由于容器的标准化，因此它可以无视基础设施（Infrastructure）的差异，部署到任何一个地方。</p>\n</blockquote>\n<h1 id=\"Docker-三个基本概念\"><a href=\"#Docker-三个基本概念\" class=\"headerlink\" title=\"Docker 三个基本概念\"></a>Docker 三个基本概念</h1><ol>\n<li>镜像（Images）是一个只读模板，用于指示创建容器。 镜像分层(layers)构建的，而定义这些层次的文件叫 Dockerfile，可以本地创建或者拉取别人创建好的镜像。</li>\n<li>容器（Containers）是镜像的可运行的实例。容器可通过 API 或 CLI（命令行）进行操控，容器 = 镜像 + 读写层。</li>\n<li>仓库（Repository）是集中存放镜像文件的场所。</li>\n</ol>\n<h1 id=\"运行-Hello-World\"><a href=\"#运行-Hello-World\" class=\"headerlink\" title=\"运行 Hello World\"></a>运行 Hello World</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull library/hello-world</span><br></pre></td></tr></table></figure>\n\n<p><code>docker pull images</code> 是抓取 image 文件，library/hello-world 是 image 文件在仓库里面的位置，其中 library 是 image 文件所在的组，hello-world 是 image 文件的名字。</p>\n<p>抓取成功后通过 <code>docker images</code> 就可以查看本机的拉取的 image 文件了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>运行后 hello world 就会停止运行，容器自动终止。有些容器不会自动终止，因为提供的是服务，比如 MySQL 镜像等。</p>\n<h1 id=\"Docker-常用命令\"><a href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"></a>Docker 常用命令</h1><figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull image_name  <span class=\"comment\"># 拉取Docker镜像</span></span><br><span class=\"line\">docker images <span class=\"comment\"># 查看主机下存在多少镜像</span></span><br><span class=\"line\">docker ps <span class=\"comment\"># 查看正在运行的容器</span></span><br><span class=\"line\">docker start container_id <span class=\"comment\">#启动</span></span><br><span class=\"line\">docker restart container_id <span class=\"comment\">#重启</span></span><br><span class=\"line\">docker stop container_id <span class=\"comment\">#停止</span></span><br><span class=\"line\">docker exec -it container_id bash <span class=\"comment\">#进入容器中</span></span><br><span class=\"line\">docker rm container_name/container_id <span class=\"comment\">#删除容器</span></span><br><span class=\"line\">docker rmi image_name <span class=\"comment\">#删除镜像</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用-Dockerfile-创建镜像命令\"><a href=\"#使用-Dockerfile-创建镜像命令\" class=\"headerlink\" title=\"使用 Dockerfile 创建镜像命令\"></a>使用 Dockerfile 创建镜像命令</h1><figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"comment\"># 用于指定基础的 images ，一般格式为 FROM &lt;image&gt; or FORM &lt;image&gt;:&lt;tag&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> <span class=\"comment\">#用于指定镜像创建者和联系方式，一般格式为 MAINTAINER &lt;name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> <span class=\"comment\">#用于复制本地主机的 &lt;src&gt; (为 Dockerfile 所在目录的相对路径)到容器中的 &lt;dest&gt; ,当使用本地目录为源目录时，推荐使用 COPY</span></span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> <span class=\"comment\">#用于配合 RUN，CMD，ENTRYPOINT 命令设置当前工作路径</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"comment\">#用于容器内部执行命令。每个 RUN 命令相当于在原有的镜像基础上添加了一个改动层，原有的镜像不会有变化</span></span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"comment\">#用来指定对外开放的端口</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> <span class=\"comment\">#指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行，可被替代。</span></span></span><br></pre></td></tr></table></figure>\n\n<p>例如在当前目录新建 Dockerfile 并写入</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;h1&gt;hello.xxx&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在当前目录运行 <code>docker build -t image_name .</code></p>\n<ul>\n<li>-t 是为新镜像设置仓库和名称</li>\n<li>image_name 为镜像名称</li>\n<li>. 为 Dockerfile 的相对路径</li>\n</ul>\n<p>运行成功 运行 <code>docker images</code> 就可以看见新建的镜像了</p>\n<p>然后运行:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"bash\"> --name [container_name] -d -d -p 7301:80 [image_name] <span class=\"comment\">#这条命令会用 Nginx 镜像启动一个容器，命名为 container_name ，并且映射了 7301 端口。</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Docker\">Docker</a></li>\n<li><a href=\"https://juejin.cn/post/6844903713115488269#heading-0\">这可能是最为详细的 Docker 入门总结</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>什么是 Docker ？更小更快速的虚拟机？</p>","more":"<p>维基百科上这么解释：</p>\n<blockquote>\n<p>Docker 容器与虚拟机类似，但二者在原理上不同。容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。容器更多的用于表示 软件的一个标准化单元。由于容器的标准化，因此它可以无视基础设施（Infrastructure）的差异，部署到任何一个地方。</p>\n</blockquote>\n<h1 id=\"Docker-三个基本概念\"><a href=\"#Docker-三个基本概念\" class=\"headerlink\" title=\"Docker 三个基本概念\"></a>Docker 三个基本概念</h1><ol>\n<li>镜像（Images）是一个只读模板，用于指示创建容器。 镜像分层(layers)构建的，而定义这些层次的文件叫 Dockerfile，可以本地创建或者拉取别人创建好的镜像。</li>\n<li>容器（Containers）是镜像的可运行的实例。容器可通过 API 或 CLI（命令行）进行操控，容器 = 镜像 + 读写层。</li>\n<li>仓库（Repository）是集中存放镜像文件的场所。</li>\n</ol>\n<h1 id=\"运行-Hello-World\"><a href=\"#运行-Hello-World\" class=\"headerlink\" title=\"运行 Hello World\"></a>运行 Hello World</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull library/hello-world</span><br></pre></td></tr></table></figure>\n\n<p><code>docker pull images</code> 是抓取 image 文件，library/hello-world 是 image 文件在仓库里面的位置，其中 library 是 image 文件所在的组，hello-world 是 image 文件的名字。</p>\n<p>抓取成功后通过 <code>docker images</code> 就可以查看本机的拉取的 image 文件了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>运行后 hello world 就会停止运行，容器自动终止。有些容器不会自动终止，因为提供的是服务，比如 MySQL 镜像等。</p>\n<h1 id=\"Docker-常用命令\"><a href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"></a>Docker 常用命令</h1><figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull image_name  <span class=\"comment\"># 拉取Docker镜像</span></span><br><span class=\"line\">docker images <span class=\"comment\"># 查看主机下存在多少镜像</span></span><br><span class=\"line\">docker ps <span class=\"comment\"># 查看正在运行的容器</span></span><br><span class=\"line\">docker start container_id <span class=\"comment\">#启动</span></span><br><span class=\"line\">docker restart container_id <span class=\"comment\">#重启</span></span><br><span class=\"line\">docker stop container_id <span class=\"comment\">#停止</span></span><br><span class=\"line\">docker exec -it container_id bash <span class=\"comment\">#进入容器中</span></span><br><span class=\"line\">docker rm container_name/container_id <span class=\"comment\">#删除容器</span></span><br><span class=\"line\">docker rmi image_name <span class=\"comment\">#删除镜像</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用-Dockerfile-创建镜像命令\"><a href=\"#使用-Dockerfile-创建镜像命令\" class=\"headerlink\" title=\"使用 Dockerfile 创建镜像命令\"></a>使用 Dockerfile 创建镜像命令</h1><figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"comment\"># 用于指定基础的 images ，一般格式为 FROM &lt;image&gt; or FORM &lt;image&gt;:&lt;tag&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> <span class=\"comment\">#用于指定镜像创建者和联系方式，一般格式为 MAINTAINER &lt;name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> <span class=\"comment\">#用于复制本地主机的 &lt;src&gt; (为 Dockerfile 所在目录的相对路径)到容器中的 &lt;dest&gt; ,当使用本地目录为源目录时，推荐使用 COPY</span></span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> <span class=\"comment\">#用于配合 RUN，CMD，ENTRYPOINT 命令设置当前工作路径</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"comment\">#用于容器内部执行命令。每个 RUN 命令相当于在原有的镜像基础上添加了一个改动层，原有的镜像不会有变化</span></span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"comment\">#用来指定对外开放的端口</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> <span class=\"comment\">#指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行，可被替代。</span></span></span><br></pre></td></tr></table></figure>\n\n<p>例如在当前目录新建 Dockerfile 并写入</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;h1&gt;hello.xxx&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在当前目录运行 <code>docker build -t image_name .</code></p>\n<ul>\n<li>-t 是为新镜像设置仓库和名称</li>\n<li>image_name 为镜像名称</li>\n<li>. 为 Dockerfile 的相对路径</li>\n</ul>\n<p>运行成功 运行 <code>docker images</code> 就可以看见新建的镜像了</p>\n<p>然后运行:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"bash\"> --name [container_name] -d -d -p 7301:80 [image_name] <span class=\"comment\">#这条命令会用 Nginx 镜像启动一个容器，命名为 container_name ，并且映射了 7301 端口。</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Docker\">Docker</a></li>\n<li><a href=\"https://juejin.cn/post/6844903713115488269#heading-0\">这可能是最为详细的 Docker 入门总结</a></li>\n</ul>"},{"title":"HTTP请求与响应","date":"2018-10-12T16:00:00.000Z","updated":"2018-10-12T16:00:00.000Z","_content":"\n### HTTP 请求\n\nHTTP（HyperText Transfer Protocol）请求信息至少由 3 部分组成\n\n- 请求方法（GET/POST）、URI、协议版本\n- 请求头（Request Header）\n- 空行（\\n）\n- 请求正文\n\n<!-- more -->\n\n或\n\n＜ request-line ＞\n\n＜ headers ＞\n\n＜ blank line ＞\n\n＜ request-body ＞\n\n1. 请求方法（GET/POST）、URI、协议版本\n\n   - 根据 HTTP 标准，HTTP 请求可以使用多种请求方法。例如：HTTP1.1 目前支持 7 种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE 和 TARCE。\n   - 在 Internet 应用中，最常用的方法是 GET 和 POST。\n\n   | 请求方法 | 描述                                                |\n   | -------- | --------------------------------------------------- |\n   | GET      | 请求获取由 Request-URI 所标识的资源                 |\n   | POST     | 在 Request-URI 所标识的资源后附加新的数据           |\n   | HEAD     | 请求获取由 Request-URI 所标识的资源的响应消息报头   |\n   | OPTIONS  | 请求查询服务器的性能，或查询与资源相关的选项和需求  |\n   | PUT      | 请求服务器存储一个资源，并用 Request-URI 作为其标识 |\n   | DELETE   | 请求服务器删除由 Request-URI 所标识的资源           |\n   | TRACE    | 请求服务器回送收到的请求信息，主要用语测试或诊断    |\n\n2. 请求头(Request Header)\n\n   - 请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。\n\n   | 请求头                             | 描述                                                                                                                                                                                                                                                                                                                                                                                   |\n   | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n   | Content-Type                       | 是返回消息中非常重要的内容，表示后面的文档属于什么 MIME 类型。Content-Type: [type]/[subtype]; parameter。例如最常见的就是 text/html，它的意思是说返回的内容是文本类型，这个文本又是 HTML 格式的。原则上浏览器会根据 Content-Type 来决定如何显示返回的消息体内容                                                                                                                        |\n   | Host                               | 指定请求资源的 Intenet 主机和端口号，必须表示请求 url 的原始服务器或网关的位置。HTTP/1.1 请求必须包含主机头域，否则系统会以 400 状态码返回                                                                                                                                                                                                                                             |\n   | Accept                             | 浏览器可接受的 MIME 类型                                                                                                                                                                                                                                                                                                                                                               |\n   | Accept-Charset                     | 浏览器可接受的字符集                                                                                                                                                                                                                                                                                                                                                                   |\n   | Accept-Encoding                    | 浏览器能够进行解码的数据编码方式，比如 gzip。Servlet 能够向支持 gzip 的浏览器返回经 gzip 编码的 HTML 页面。许多情形下这可以减少 5 到 10 倍的下载时间                                                                                                                                                                                                                                   |\n   | Accept-Language                    | 浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到                                                                                                                                                                                                                                                                                                                     |\n   | Authorization                      | 授权信息，通常出现在对服务器发送的 WWW-Authenticate 头的应答中                                                                                                                                                                                                                                                                                                                         |\n   | Connection                         | 表示是否需要持久连接。如果 Servlet 看到这里的值为“Keep- Alive”，或者看到请求使用的是 HTTP1.1（HTTP 1.1 默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如 Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet 需要在应答中发送一个 Content-Length 头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小 |\n   | Content-Length                     | 表示请求消息正文的长度                                                                                                                                                                                                                                                                                                                                                                 |\n   | Cookie                             | 这是最重要的请求头信息之一                                                                                                                                                                                                                                                                                                                                                             |\n   | From                               | 请求发送者的 email 地址，由一些特殊的 Web 客户程序使用，浏览器不会用到它                                                                                                                                                                                                                                                                                                               |\n   | Host                               | 初始 URL 中的主机和端口                                                                                                                                                                                                                                                                                                                                                                |\n   | If-Modified-Since                  | 只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回 304“Not Modified”应答                                                                                                                                                                                                                                                                                                   |\n   | Pragma                             | 指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝                                                                                                                                                                                                                                                                                       |\n   | Referer                            | 包含一个 URL，用户从该 URL 代表的页面出发访问当前请求的页面                                                                                                                                                                                                                                                                                                                            |\n   | User-Agent                         | 浏览器类型，如果 Servlet 返回的内容与浏览器类型有关则该值非常有用                                                                                                                                                                                                                                                                                                                      |\n   | UA-Pixels，UA-Color，UA-OS，UA-CPU | 由某些版本的 IE 浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和 CPU 类型                                                                                                                                                                                                                                                                                              |\n\n- 常见的 MIME 类型如下：\n\n  1. text/html ： HTML 格式\n  2. text/plain ：纯文本格式\n  3. text/xml ： XML 格式\n  4. image/gif ：gif 图片格式\n  5. image/jpeg ：jpg 图片格式\n  6. image/png：png 图片格式\n  7. application/xhtml+xml ：XHTML 格式\n  8. application/xml ： XML 数据格式\n  9. application/atom+xml ：Atom XML 聚合格式\n  10. application/json ： JSON 数据格式\n  11. application/pdf ：pdf 格式\n  12. application/msword ： Word 文档格式\n  13. application/octet-stream ： 二进制流数据（如常见的文件下载）\n  14. application/x-www-form-urlencoded ： `<form encType=””>`中默认的 encType，form 表单数据被编码为 key/value 格式发送到服务器（表单默认的提交数据的格式）\n  15. multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式\n\n3. 空行\n\n   - 表示请求头已经结束，接下来的是请求正文\n\n4. 请求正文\n\n   - 请求正文中可以包含客户提交的查询字符串信息，也可以为空\n\n### HTTP 响应\n\nHTTP 应答与 HTTP 请求相似，HTTP 响应也由 3 个部分构成，分别是：\n\n- 状态行\n- 响应头(Response Header)\n- 空行（\\n）\n- 响应正文\n\n1. 状态行\n\n   - 由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔，例如`HTTP/1.1 200 OK`\n   - 状态码有如下几种：\n     - 1xx:指示信息—表示请求已接收，继续处理。\n     - 2xx:成功—表示请求已经被成功接收、理解、接受。\n     - 3xx:重定向—要完成请求必须进行更进一步的操作。\n     - 4xx:客户端错误—请求有语法错误或请求无法实现。\n     - 5xx:服务器端错误—服务器未能实现合法的请求。\n       > wiki 百科 HTTP 状态码(需翻墙)：[https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81)\n\n2. 响应头\n\n   - 响应头可能包括：\n\n   Location：\n\n   Location 响应报头域用于重定向接受者到一个新的位置。例如：客户端所请求的页面已不存在原先的位置，为了让客户端重定向到这个页面新的位置，服务 器端可以发回 Location 响应报头后使用重定向语句，让客户端去访问新的域名所对应的服务器上的资源。当我们在 JSP 中使用重定向语句的时候，服务器 端向客户端发回的响应报头中，就会有 Location 响应报头域。\n\n   Server：\n\n   Server 响应报头域包含了服务器用来处理请求的软件信息。它和 User-Agent 请求报头域是相对应的，前者发送服务器端软件的信息，后者发送客户 端软件(浏览器)和操作系统的信息。下面是 Server 响应报头域的一个例子：Server: Apache-Coyote/1.1\n\n   WWW-Authenticate：\n\n   WWW-Authenticate 响应报头域必须被包含在 401(未授权的)响应消息中，这个报头域和前面讲到的 Authorization 请求报头域是 相关的，当客户端收到 401 响应消息，就要决定是否请求服务器对其进行验证。如果要求服务器对其进行验证，就可以发送一个包含了 Authorization 报头域的请求，下面是 WWW-Authenticate 响应报头域的一个例子：WWW-Authenticate: Basic realm=\"Basic Auth Test!\"\n\n   从这个响应报头域，可以知道服务器端对我们所请求的资源采用的是基本验证机制。\n\n   Content-Encoding：\n\n   Content-Encoding 实体报头域被使用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容编码，因而要获得 Content- Type 报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding 主要用语记录文档的压缩方法，下面是它的一个例子： Content-Encoding: gzip。如果一个实体正文采用了编码方式存储，在使用之前就必须进行解码。\n\n   Content-Language：\n\n   Content-Language 实体报头域描述了资源所用的自然语言。Content-Language 允许用户遵照自身的首选语言来识别和区分实体。 如果这个实体内容仅仅打算提供给丹麦的阅读者，那么可以按照如下的方式设置这个实体报头域：Content-Language: da。\n\n   Content-Length：\n\n   Content-Length 实体报头域用于指明正文的长度，以字节方式存储的十进制数字来表示，也就是一个数字字符占一个字节，用其对应的 ASCII 码存储传输。\n   注意的是：这个长度仅仅是表示实体正文的长度，没有包括实体报头的长度。\n\n   Content-Type\n\n   Content-Type 实体报头域用语指明发送给接收者的实体正文的媒体类型。\n\n   Last-Modified\n\n   Last-Modified 实体报头域用于指示资源最后的修改日期及时间。\n\n   Expires\n\n   Expires 实体报头域给出响应过期的日期和时间。通常，代理服务器或浏览器会缓存一些页面。当用户再次访问这些页面时，直接从缓存中加载并显示给用 户，这样缩短了响应的时间，减少服务器的负载。为了让代理服务器或浏览器在一段时间后更新页面，我们可以使用 Expires 实体报头域指定页面过期的时 间。当用户又一次访问页面时，如果 Expires 报头域给出的日期和时间比 Date 普通报头域给出的日期和时间要早(或相同)，那么代理服务器或浏览器就 不会再使用缓存的页面而是从服务器上请求更新的页面。不过要注意，即使页面过期了，也并不意味着服务器上的原始资源在此时间之前或之后发生了改变。\n\n3. 表示分隔\n\n4. 要下载的内容\n\n### 关于 HTTP 请求 GET 和 POST 的区别\n\n- 提交\n\n  - GET 提交，请求的数据会附在 URL 之后（就是把数据放置在 HTTP 协议头＜ request-line ＞中）， 以?分割 URL 和传输数据，多个参数用&连接;例如：`login.action?name=hyddd& password=idontknow&verify=%E4%BD%A0 %E5%A5%BD`。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用 BASE64 加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX 中的 XX 为该符号以 16 进制表示的 ASCII。\n\n  - POST 提交：把提交的数据放置在是 HTTP 包的包体＜ request-body ＞中。\n\n  因此，GET 提交的数据会在地址栏中显示出来，而 POST 提交，地址栏不会改变。\n\n- 传输数据的大小：\n\n  首先声明,HTTP 协议没有对传输的数据大小进行限制，HTTP 协议规范也没有对 URL 长度进行限制。 而在实际开发中存在的限制主要有：\n\n  - GET:特定浏览器和服务器对 URL 长度有限制，例如 IE 对 URL 长度的限制是 2083 字节(2K+35)。对于其他浏览器，如 Netscape、FireFox 等，理论上没有长度限制，其限制取决于操作系统的支持。\n\n  因此对于 GET 提交时，传输数据就会受到 URL 长度的限制。\n\n  - POST:由于不是通过 URL 传值，理论上数据不受限。但实际各个 WEB 服务器会规定对 post 提交数据大小进行限制，Apache、IIS6 都有各自的配置。\n\n- 安全性：\n\n  - POST 的安全性要比 GET 的安全性高。比如：通过 GET 提交数据，用户名和密码将明文出现在 URL 上，因为(1)登录页面有可能被浏览器缓存， (2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了。\n\n### 使用开发者工具查看 HTTP 请求内容和响应内容\n\n1. 请求\n\n- 打开 Network\n- 地址栏输入网址\n- 在 Network 点击，查看 request Headers，点击「view source」,可以看见第一部分和第二部分，第三部分空行看不见\n- 如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到\n\n2. 响应\n\n- 打开 Network\n- 地址栏输入网址\n- 选中第一个响应查看 Response Headers，点击「view source」，你会看到响应的前两部分\n- 查看 Response 或者 Preview，你会看到响应的第 4 部分\n\n### curl 命令的使用\n\n- curl 是一个利用 URL 规则在命令行下工作的文件传输工具，可以说是一款很强大的 http 命令行工具。它支持文件的上传和下载，是综合传输工具\n- 语法：`curl [option] [url]`\n- 常见参数\n\n```\n-A/--user-agent <string>              设置用户代理发送给服务器\n-b/--cookie <name=string/file>    cookie字符串或文件读取位置\n-c/--cookie-jar <file>                    操作结束后把cookie写入到这个文件中\n-C/--continue-at <offset>            断点续转\n-D/--dump-header <file>              把header信息写入到该文件中\n-e/--referer                                  来源网址\n-f/--fail                                          连接失败时不显示http错误\n-o/--output                                  把输出写到该文件中\n-O/--remote-name                      把输出写到该文件中，保留远程文件的文件名\n-r/--range <range>                      检索来自HTTP/1.1或FTP服务器字节范围\n-s/--silent                                    静音模式。不输出任何东西\n-T/--upload-file <file>                  上传文件\n-u/--user <user[:password]>      设置服务器的用户和密码\n-w/--write-out [format]                什么输出完成后\n-x/--proxy <host[:port]>              在给定的端口上使用HTTP代理\n-#/--progress-bar                        进度条显示当前的传送状态\n```\n\n- Linux curl 命令详解:[`click here`](https://www.cnblogs.com/duhuo/p/5695256.html)\n","source":"_posts/HTTP请求与响应.md","raw":"---\ntitle: HTTP请求与响应\ndate: 2018-10-13 00:00:00\nupdated: 2018-10-13 00:00:00\ntags:\n  - HTTP\n---\n\n### HTTP 请求\n\nHTTP（HyperText Transfer Protocol）请求信息至少由 3 部分组成\n\n- 请求方法（GET/POST）、URI、协议版本\n- 请求头（Request Header）\n- 空行（\\n）\n- 请求正文\n\n<!-- more -->\n\n或\n\n＜ request-line ＞\n\n＜ headers ＞\n\n＜ blank line ＞\n\n＜ request-body ＞\n\n1. 请求方法（GET/POST）、URI、协议版本\n\n   - 根据 HTTP 标准，HTTP 请求可以使用多种请求方法。例如：HTTP1.1 目前支持 7 种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE 和 TARCE。\n   - 在 Internet 应用中，最常用的方法是 GET 和 POST。\n\n   | 请求方法 | 描述                                                |\n   | -------- | --------------------------------------------------- |\n   | GET      | 请求获取由 Request-URI 所标识的资源                 |\n   | POST     | 在 Request-URI 所标识的资源后附加新的数据           |\n   | HEAD     | 请求获取由 Request-URI 所标识的资源的响应消息报头   |\n   | OPTIONS  | 请求查询服务器的性能，或查询与资源相关的选项和需求  |\n   | PUT      | 请求服务器存储一个资源，并用 Request-URI 作为其标识 |\n   | DELETE   | 请求服务器删除由 Request-URI 所标识的资源           |\n   | TRACE    | 请求服务器回送收到的请求信息，主要用语测试或诊断    |\n\n2. 请求头(Request Header)\n\n   - 请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。\n\n   | 请求头                             | 描述                                                                                                                                                                                                                                                                                                                                                                                   |\n   | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n   | Content-Type                       | 是返回消息中非常重要的内容，表示后面的文档属于什么 MIME 类型。Content-Type: [type]/[subtype]; parameter。例如最常见的就是 text/html，它的意思是说返回的内容是文本类型，这个文本又是 HTML 格式的。原则上浏览器会根据 Content-Type 来决定如何显示返回的消息体内容                                                                                                                        |\n   | Host                               | 指定请求资源的 Intenet 主机和端口号，必须表示请求 url 的原始服务器或网关的位置。HTTP/1.1 请求必须包含主机头域，否则系统会以 400 状态码返回                                                                                                                                                                                                                                             |\n   | Accept                             | 浏览器可接受的 MIME 类型                                                                                                                                                                                                                                                                                                                                                               |\n   | Accept-Charset                     | 浏览器可接受的字符集                                                                                                                                                                                                                                                                                                                                                                   |\n   | Accept-Encoding                    | 浏览器能够进行解码的数据编码方式，比如 gzip。Servlet 能够向支持 gzip 的浏览器返回经 gzip 编码的 HTML 页面。许多情形下这可以减少 5 到 10 倍的下载时间                                                                                                                                                                                                                                   |\n   | Accept-Language                    | 浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到                                                                                                                                                                                                                                                                                                                     |\n   | Authorization                      | 授权信息，通常出现在对服务器发送的 WWW-Authenticate 头的应答中                                                                                                                                                                                                                                                                                                                         |\n   | Connection                         | 表示是否需要持久连接。如果 Servlet 看到这里的值为“Keep- Alive”，或者看到请求使用的是 HTTP1.1（HTTP 1.1 默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如 Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet 需要在应答中发送一个 Content-Length 头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小 |\n   | Content-Length                     | 表示请求消息正文的长度                                                                                                                                                                                                                                                                                                                                                                 |\n   | Cookie                             | 这是最重要的请求头信息之一                                                                                                                                                                                                                                                                                                                                                             |\n   | From                               | 请求发送者的 email 地址，由一些特殊的 Web 客户程序使用，浏览器不会用到它                                                                                                                                                                                                                                                                                                               |\n   | Host                               | 初始 URL 中的主机和端口                                                                                                                                                                                                                                                                                                                                                                |\n   | If-Modified-Since                  | 只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回 304“Not Modified”应答                                                                                                                                                                                                                                                                                                   |\n   | Pragma                             | 指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝                                                                                                                                                                                                                                                                                       |\n   | Referer                            | 包含一个 URL，用户从该 URL 代表的页面出发访问当前请求的页面                                                                                                                                                                                                                                                                                                                            |\n   | User-Agent                         | 浏览器类型，如果 Servlet 返回的内容与浏览器类型有关则该值非常有用                                                                                                                                                                                                                                                                                                                      |\n   | UA-Pixels，UA-Color，UA-OS，UA-CPU | 由某些版本的 IE 浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和 CPU 类型                                                                                                                                                                                                                                                                                              |\n\n- 常见的 MIME 类型如下：\n\n  1. text/html ： HTML 格式\n  2. text/plain ：纯文本格式\n  3. text/xml ： XML 格式\n  4. image/gif ：gif 图片格式\n  5. image/jpeg ：jpg 图片格式\n  6. image/png：png 图片格式\n  7. application/xhtml+xml ：XHTML 格式\n  8. application/xml ： XML 数据格式\n  9. application/atom+xml ：Atom XML 聚合格式\n  10. application/json ： JSON 数据格式\n  11. application/pdf ：pdf 格式\n  12. application/msword ： Word 文档格式\n  13. application/octet-stream ： 二进制流数据（如常见的文件下载）\n  14. application/x-www-form-urlencoded ： `<form encType=””>`中默认的 encType，form 表单数据被编码为 key/value 格式发送到服务器（表单默认的提交数据的格式）\n  15. multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式\n\n3. 空行\n\n   - 表示请求头已经结束，接下来的是请求正文\n\n4. 请求正文\n\n   - 请求正文中可以包含客户提交的查询字符串信息，也可以为空\n\n### HTTP 响应\n\nHTTP 应答与 HTTP 请求相似，HTTP 响应也由 3 个部分构成，分别是：\n\n- 状态行\n- 响应头(Response Header)\n- 空行（\\n）\n- 响应正文\n\n1. 状态行\n\n   - 由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔，例如`HTTP/1.1 200 OK`\n   - 状态码有如下几种：\n     - 1xx:指示信息—表示请求已接收，继续处理。\n     - 2xx:成功—表示请求已经被成功接收、理解、接受。\n     - 3xx:重定向—要完成请求必须进行更进一步的操作。\n     - 4xx:客户端错误—请求有语法错误或请求无法实现。\n     - 5xx:服务器端错误—服务器未能实现合法的请求。\n       > wiki 百科 HTTP 状态码(需翻墙)：[https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81)\n\n2. 响应头\n\n   - 响应头可能包括：\n\n   Location：\n\n   Location 响应报头域用于重定向接受者到一个新的位置。例如：客户端所请求的页面已不存在原先的位置，为了让客户端重定向到这个页面新的位置，服务 器端可以发回 Location 响应报头后使用重定向语句，让客户端去访问新的域名所对应的服务器上的资源。当我们在 JSP 中使用重定向语句的时候，服务器 端向客户端发回的响应报头中，就会有 Location 响应报头域。\n\n   Server：\n\n   Server 响应报头域包含了服务器用来处理请求的软件信息。它和 User-Agent 请求报头域是相对应的，前者发送服务器端软件的信息，后者发送客户 端软件(浏览器)和操作系统的信息。下面是 Server 响应报头域的一个例子：Server: Apache-Coyote/1.1\n\n   WWW-Authenticate：\n\n   WWW-Authenticate 响应报头域必须被包含在 401(未授权的)响应消息中，这个报头域和前面讲到的 Authorization 请求报头域是 相关的，当客户端收到 401 响应消息，就要决定是否请求服务器对其进行验证。如果要求服务器对其进行验证，就可以发送一个包含了 Authorization 报头域的请求，下面是 WWW-Authenticate 响应报头域的一个例子：WWW-Authenticate: Basic realm=\"Basic Auth Test!\"\n\n   从这个响应报头域，可以知道服务器端对我们所请求的资源采用的是基本验证机制。\n\n   Content-Encoding：\n\n   Content-Encoding 实体报头域被使用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容编码，因而要获得 Content- Type 报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding 主要用语记录文档的压缩方法，下面是它的一个例子： Content-Encoding: gzip。如果一个实体正文采用了编码方式存储，在使用之前就必须进行解码。\n\n   Content-Language：\n\n   Content-Language 实体报头域描述了资源所用的自然语言。Content-Language 允许用户遵照自身的首选语言来识别和区分实体。 如果这个实体内容仅仅打算提供给丹麦的阅读者，那么可以按照如下的方式设置这个实体报头域：Content-Language: da。\n\n   Content-Length：\n\n   Content-Length 实体报头域用于指明正文的长度，以字节方式存储的十进制数字来表示，也就是一个数字字符占一个字节，用其对应的 ASCII 码存储传输。\n   注意的是：这个长度仅仅是表示实体正文的长度，没有包括实体报头的长度。\n\n   Content-Type\n\n   Content-Type 实体报头域用语指明发送给接收者的实体正文的媒体类型。\n\n   Last-Modified\n\n   Last-Modified 实体报头域用于指示资源最后的修改日期及时间。\n\n   Expires\n\n   Expires 实体报头域给出响应过期的日期和时间。通常，代理服务器或浏览器会缓存一些页面。当用户再次访问这些页面时，直接从缓存中加载并显示给用 户，这样缩短了响应的时间，减少服务器的负载。为了让代理服务器或浏览器在一段时间后更新页面，我们可以使用 Expires 实体报头域指定页面过期的时 间。当用户又一次访问页面时，如果 Expires 报头域给出的日期和时间比 Date 普通报头域给出的日期和时间要早(或相同)，那么代理服务器或浏览器就 不会再使用缓存的页面而是从服务器上请求更新的页面。不过要注意，即使页面过期了，也并不意味着服务器上的原始资源在此时间之前或之后发生了改变。\n\n3. 表示分隔\n\n4. 要下载的内容\n\n### 关于 HTTP 请求 GET 和 POST 的区别\n\n- 提交\n\n  - GET 提交，请求的数据会附在 URL 之后（就是把数据放置在 HTTP 协议头＜ request-line ＞中）， 以?分割 URL 和传输数据，多个参数用&连接;例如：`login.action?name=hyddd& password=idontknow&verify=%E4%BD%A0 %E5%A5%BD`。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用 BASE64 加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX 中的 XX 为该符号以 16 进制表示的 ASCII。\n\n  - POST 提交：把提交的数据放置在是 HTTP 包的包体＜ request-body ＞中。\n\n  因此，GET 提交的数据会在地址栏中显示出来，而 POST 提交，地址栏不会改变。\n\n- 传输数据的大小：\n\n  首先声明,HTTP 协议没有对传输的数据大小进行限制，HTTP 协议规范也没有对 URL 长度进行限制。 而在实际开发中存在的限制主要有：\n\n  - GET:特定浏览器和服务器对 URL 长度有限制，例如 IE 对 URL 长度的限制是 2083 字节(2K+35)。对于其他浏览器，如 Netscape、FireFox 等，理论上没有长度限制，其限制取决于操作系统的支持。\n\n  因此对于 GET 提交时，传输数据就会受到 URL 长度的限制。\n\n  - POST:由于不是通过 URL 传值，理论上数据不受限。但实际各个 WEB 服务器会规定对 post 提交数据大小进行限制，Apache、IIS6 都有各自的配置。\n\n- 安全性：\n\n  - POST 的安全性要比 GET 的安全性高。比如：通过 GET 提交数据，用户名和密码将明文出现在 URL 上，因为(1)登录页面有可能被浏览器缓存， (2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了。\n\n### 使用开发者工具查看 HTTP 请求内容和响应内容\n\n1. 请求\n\n- 打开 Network\n- 地址栏输入网址\n- 在 Network 点击，查看 request Headers，点击「view source」,可以看见第一部分和第二部分，第三部分空行看不见\n- 如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到\n\n2. 响应\n\n- 打开 Network\n- 地址栏输入网址\n- 选中第一个响应查看 Response Headers，点击「view source」，你会看到响应的前两部分\n- 查看 Response 或者 Preview，你会看到响应的第 4 部分\n\n### curl 命令的使用\n\n- curl 是一个利用 URL 规则在命令行下工作的文件传输工具，可以说是一款很强大的 http 命令行工具。它支持文件的上传和下载，是综合传输工具\n- 语法：`curl [option] [url]`\n- 常见参数\n\n```\n-A/--user-agent <string>              设置用户代理发送给服务器\n-b/--cookie <name=string/file>    cookie字符串或文件读取位置\n-c/--cookie-jar <file>                    操作结束后把cookie写入到这个文件中\n-C/--continue-at <offset>            断点续转\n-D/--dump-header <file>              把header信息写入到该文件中\n-e/--referer                                  来源网址\n-f/--fail                                          连接失败时不显示http错误\n-o/--output                                  把输出写到该文件中\n-O/--remote-name                      把输出写到该文件中，保留远程文件的文件名\n-r/--range <range>                      检索来自HTTP/1.1或FTP服务器字节范围\n-s/--silent                                    静音模式。不输出任何东西\n-T/--upload-file <file>                  上传文件\n-u/--user <user[:password]>      设置服务器的用户和密码\n-w/--write-out [format]                什么输出完成后\n-x/--proxy <host[:port]>              在给定的端口上使用HTTP代理\n-#/--progress-bar                        进度条显示当前的传送状态\n```\n\n- Linux curl 命令详解:[`click here`](https://www.cnblogs.com/duhuo/p/5695256.html)\n","slug":"HTTP请求与响应","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwm000dk4u91a2ogxnb","content":"<h3 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a>HTTP 请求</h3><p>HTTP（HyperText Transfer Protocol）请求信息至少由 3 部分组成</p>\n<ul>\n<li>请求方法（GET/POST）、URI、协议版本</li>\n<li>请求头（Request Header）</li>\n<li>空行（\\n）</li>\n<li>请求正文</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>或</p>\n<p>＜ request-line ＞</p>\n<p>＜ headers ＞</p>\n<p>＜ blank line ＞</p>\n<p>＜ request-body ＞</p>\n<ol>\n<li><p>请求方法（GET/POST）、URI、协议版本</p>\n<ul>\n<li>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。例如：HTTP1.1 目前支持 7 种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE 和 TARCE。</li>\n<li>在 Internet 应用中，最常用的方法是 GET 和 POST。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>请求获取由 Request-URI 所标识的资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>在 Request-URI 所标识的资源后附加新的数据</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>请求获取由 Request-URI 所标识的资源的响应消息报头</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>请求查询服务器的性能，或查询与资源相关的选项和需求</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>请求服务器存储一个资源，并用 Request-URI 作为其标识</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除由 Request-URI 所标识的资源</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>请求服务器回送收到的请求信息，主要用语测试或诊断</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>请求头(Request Header)</p>\n<ul>\n<li>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content-Type</td>\n<td>是返回消息中非常重要的内容，表示后面的文档属于什么 MIME 类型。Content-Type: [type]/[subtype]; parameter。例如最常见的就是 text/html，它的意思是说返回的内容是文本类型，这个文本又是 HTML 格式的。原则上浏览器会根据 Content-Type 来决定如何显示返回的消息体内容</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定请求资源的 Intenet 主机和端口号，必须表示请求 url 的原始服务器或网关的位置。HTTP/1.1 请求必须包含主机头域，否则系统会以 400 状态码返回</td>\n</tr>\n<tr>\n<td>Accept</td>\n<td>浏览器可接受的 MIME 类型</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>浏览器可接受的字符集</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>浏览器能够进行解码的数据编码方式，比如 gzip。Servlet 能够向支持 gzip 的浏览器返回经 gzip 编码的 HTML 页面。许多情形下这可以减少 5 到 10 倍的下载时间</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>授权信息，通常出现在对服务器发送的 WWW-Authenticate 头的应答中</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接。如果 Servlet 看到这里的值为“Keep- Alive”，或者看到请求使用的是 HTTP1.1（HTTP 1.1 默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如 Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet 需要在应答中发送一个 Content-Length 头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>表示请求消息正文的长度</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>这是最重要的请求头信息之一</td>\n</tr>\n<tr>\n<td>From</td>\n<td>请求发送者的 email 地址，由一些特殊的 Web 客户程序使用，浏览器不会用到它</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>初始 URL 中的主机和端口</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回 304“Not Modified”应答</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>包含一个 URL，用户从该 URL 代表的页面出发访问当前请求的页面</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>浏览器类型，如果 Servlet 返回的内容与浏览器类型有关则该值非常有用</td>\n</tr>\n<tr>\n<td>UA-Pixels，UA-Color，UA-OS，UA-CPU</td>\n<td>由某些版本的 IE 浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和 CPU 类型</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<ul>\n<li><p>常见的 MIME 类型如下：</p>\n<ol>\n<li>text/html ： HTML 格式</li>\n<li>text/plain ：纯文本格式</li>\n<li>text/xml ： XML 格式</li>\n<li>image/gif ：gif 图片格式</li>\n<li>image/jpeg ：jpg 图片格式</li>\n<li>image/png：png 图片格式</li>\n<li>application/xhtml+xml ：XHTML 格式</li>\n<li>application/xml ： XML 数据格式</li>\n<li>application/atom+xml ：Atom XML 聚合格式</li>\n<li>application/json ： JSON 数据格式</li>\n<li>application/pdf ：pdf 格式</li>\n<li>application/msword ： Word 文档格式</li>\n<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>\n<li>application/x-www-form-urlencoded ： <code>&lt;form encType=””&gt;</code>中默认的 encType，form 表单数据被编码为 key/value 格式发送到服务器（表单默认的提交数据的格式）</li>\n<li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li><p>空行</p>\n<ul>\n<li>表示请求头已经结束，接下来的是请求正文</li>\n</ul>\n</li>\n<li><p>请求正文</p>\n<ul>\n<li>请求正文中可以包含客户提交的查询字符串信息，也可以为空</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"HTTP-响应\"><a href=\"#HTTP-响应\" class=\"headerlink\" title=\"HTTP 响应\"></a>HTTP 响应</h3><p>HTTP 应答与 HTTP 请求相似，HTTP 响应也由 3 个部分构成，分别是：</p>\n<ul>\n<li>状态行</li>\n<li>响应头(Response Header)</li>\n<li>空行（\\n）</li>\n<li>响应正文</li>\n</ul>\n<ol>\n<li><p>状态行</p>\n<ul>\n<li>由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔，例如<code>HTTP/1.1 200 OK</code></li>\n<li>状态码有如下几种：<ul>\n<li>1xx:指示信息—表示请求已接收，继续处理。</li>\n<li>2xx:成功—表示请求已经被成功接收、理解、接受。</li>\n<li>3xx:重定向—要完成请求必须进行更进一步的操作。</li>\n<li>4xx:客户端错误—请求有语法错误或请求无法实现。</li>\n<li>5xx:服务器端错误—服务器未能实现合法的请求。<blockquote>\n<p>wiki 百科 HTTP 状态码(需翻墙)：<a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81\">https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>响应头</p>\n<ul>\n<li>响应头可能包括：</li>\n</ul>\n<p>Location：</p>\n<p>Location 响应报头域用于重定向接受者到一个新的位置。例如：客户端所请求的页面已不存在原先的位置，为了让客户端重定向到这个页面新的位置，服务 器端可以发回 Location 响应报头后使用重定向语句，让客户端去访问新的域名所对应的服务器上的资源。当我们在 JSP 中使用重定向语句的时候，服务器 端向客户端发回的响应报头中，就会有 Location 响应报头域。</p>\n<p>Server：</p>\n<p>Server 响应报头域包含了服务器用来处理请求的软件信息。它和 User-Agent 请求报头域是相对应的，前者发送服务器端软件的信息，后者发送客户 端软件(浏览器)和操作系统的信息。下面是 Server 响应报头域的一个例子：Server: Apache-Coyote/1.1</p>\n<p>WWW-Authenticate：</p>\n<p>WWW-Authenticate 响应报头域必须被包含在 401(未授权的)响应消息中，这个报头域和前面讲到的 Authorization 请求报头域是 相关的，当客户端收到 401 响应消息，就要决定是否请求服务器对其进行验证。如果要求服务器对其进行验证，就可以发送一个包含了 Authorization 报头域的请求，下面是 WWW-Authenticate 响应报头域的一个例子：WWW-Authenticate: Basic realm=”Basic Auth Test!”</p>\n<p>从这个响应报头域，可以知道服务器端对我们所请求的资源采用的是基本验证机制。</p>\n<p>Content-Encoding：</p>\n<p>Content-Encoding 实体报头域被使用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容编码，因而要获得 Content- Type 报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding 主要用语记录文档的压缩方法，下面是它的一个例子： Content-Encoding: gzip。如果一个实体正文采用了编码方式存储，在使用之前就必须进行解码。</p>\n<p>Content-Language：</p>\n<p>Content-Language 实体报头域描述了资源所用的自然语言。Content-Language 允许用户遵照自身的首选语言来识别和区分实体。 如果这个实体内容仅仅打算提供给丹麦的阅读者，那么可以按照如下的方式设置这个实体报头域：Content-Language: da。</p>\n<p>Content-Length：</p>\n<p>Content-Length 实体报头域用于指明正文的长度，以字节方式存储的十进制数字来表示，也就是一个数字字符占一个字节，用其对应的 ASCII 码存储传输。<br>注意的是：这个长度仅仅是表示实体正文的长度，没有包括实体报头的长度。</p>\n<p>Content-Type</p>\n<p>Content-Type 实体报头域用语指明发送给接收者的实体正文的媒体类型。</p>\n<p>Last-Modified</p>\n<p>Last-Modified 实体报头域用于指示资源最后的修改日期及时间。</p>\n<p>Expires</p>\n<p>Expires 实体报头域给出响应过期的日期和时间。通常，代理服务器或浏览器会缓存一些页面。当用户再次访问这些页面时，直接从缓存中加载并显示给用 户，这样缩短了响应的时间，减少服务器的负载。为了让代理服务器或浏览器在一段时间后更新页面，我们可以使用 Expires 实体报头域指定页面过期的时 间。当用户又一次访问页面时，如果 Expires 报头域给出的日期和时间比 Date 普通报头域给出的日期和时间要早(或相同)，那么代理服务器或浏览器就 不会再使用缓存的页面而是从服务器上请求更新的页面。不过要注意，即使页面过期了，也并不意味着服务器上的原始资源在此时间之前或之后发生了改变。</p>\n</li>\n<li><p>表示分隔</p>\n</li>\n<li><p>要下载的内容</p>\n</li>\n</ol>\n<h3 id=\"关于-HTTP-请求-GET-和-POST-的区别\"><a href=\"#关于-HTTP-请求-GET-和-POST-的区别\" class=\"headerlink\" title=\"关于 HTTP 请求 GET 和 POST 的区别\"></a>关于 HTTP 请求 GET 和 POST 的区别</h3><ul>\n<li><p>提交</p>\n<ul>\n<li><p>GET 提交，请求的数据会附在 URL 之后（就是把数据放置在 HTTP 协议头＜ request-line ＞中）， 以?分割 URL 和传输数据，多个参数用&amp;连接;例如：<code>login.action?name=hyddd&amp; password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD</code>。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用 BASE64 加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX 中的 XX 为该符号以 16 进制表示的 ASCII。</p>\n</li>\n<li><p>POST 提交：把提交的数据放置在是 HTTP 包的包体＜ request-body ＞中。</p>\n</li>\n</ul>\n<p>因此，GET 提交的数据会在地址栏中显示出来，而 POST 提交，地址栏不会改变。</p>\n</li>\n<li><p>传输数据的大小：</p>\n<p>首先声明,HTTP 协议没有对传输的数据大小进行限制，HTTP 协议规范也没有对 URL 长度进行限制。 而在实际开发中存在的限制主要有：</p>\n<ul>\n<li>GET:特定浏览器和服务器对 URL 长度有限制，例如 IE 对 URL 长度的限制是 2083 字节(2K+35)。对于其他浏览器，如 Netscape、FireFox 等，理论上没有长度限制，其限制取决于操作系统的支持。</li>\n</ul>\n<p>因此对于 GET 提交时，传输数据就会受到 URL 长度的限制。</p>\n<ul>\n<li>POST:由于不是通过 URL 传值，理论上数据不受限。但实际各个 WEB 服务器会规定对 post 提交数据大小进行限制，Apache、IIS6 都有各自的配置。</li>\n</ul>\n</li>\n<li><p>安全性：</p>\n<ul>\n<li>POST 的安全性要比 GET 的安全性高。比如：通过 GET 提交数据，用户名和密码将明文出现在 URL 上，因为(1)登录页面有可能被浏览器缓存， (2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用开发者工具查看-HTTP-请求内容和响应内容\"><a href=\"#使用开发者工具查看-HTTP-请求内容和响应内容\" class=\"headerlink\" title=\"使用开发者工具查看 HTTP 请求内容和响应内容\"></a>使用开发者工具查看 HTTP 请求内容和响应内容</h3><ol>\n<li>请求</li>\n</ol>\n<ul>\n<li>打开 Network</li>\n<li>地址栏输入网址</li>\n<li>在 Network 点击，查看 request Headers，点击「view source」,可以看见第一部分和第二部分，第三部分空行看不见</li>\n<li>如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</li>\n</ul>\n<ol start=\"2\">\n<li>响应</li>\n</ol>\n<ul>\n<li>打开 Network</li>\n<li>地址栏输入网址</li>\n<li>选中第一个响应查看 Response Headers，点击「view source」，你会看到响应的前两部分</li>\n<li>查看 Response 或者 Preview，你会看到响应的第 4 部分</li>\n</ul>\n<h3 id=\"curl-命令的使用\"><a href=\"#curl-命令的使用\" class=\"headerlink\" title=\"curl 命令的使用\"></a>curl 命令的使用</h3><ul>\n<li>curl 是一个利用 URL 规则在命令行下工作的文件传输工具，可以说是一款很强大的 http 命令行工具。它支持文件的上传和下载，是综合传输工具</li>\n<li>语法：<code>curl [option] [url]</code></li>\n<li>常见参数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A/--user-agent &lt;string&gt;              设置用户代理发送给服务器</span><br><span class=\"line\">-b/--cookie &lt;name=string/file&gt;    cookie字符串或文件读取位置</span><br><span class=\"line\">-c/--cookie-jar &lt;file&gt;                    操作结束后把cookie写入到这个文件中</span><br><span class=\"line\">-C/--continue-at &lt;offset&gt;            断点续转</span><br><span class=\"line\">-D/--dump-header &lt;file&gt;              把header信息写入到该文件中</span><br><span class=\"line\">-e/--referer                                  来源网址</span><br><span class=\"line\">-f/--fail                                          连接失败时不显示http错误</span><br><span class=\"line\">-o/--output                                  把输出写到该文件中</span><br><span class=\"line\">-O/--remote-name                      把输出写到该文件中，保留远程文件的文件名</span><br><span class=\"line\">-r/--range &lt;range&gt;                      检索来自HTTP/1.1或FTP服务器字节范围</span><br><span class=\"line\">-s/--silent                                    静音模式。不输出任何东西</span><br><span class=\"line\">-T/--upload-file &lt;file&gt;                  上传文件</span><br><span class=\"line\">-u/--user &lt;user[:password]&gt;      设置服务器的用户和密码</span><br><span class=\"line\">-w/--write-out [format]                什么输出完成后</span><br><span class=\"line\">-x/--proxy &lt;host[:port]&gt;              在给定的端口上使用HTTP代理</span><br><span class=\"line\">-#/--progress-bar                        进度条显示当前的传送状态</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Linux curl 命令详解:<a href=\"https://www.cnblogs.com/duhuo/p/5695256.html\"><code>click here</code></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a>HTTP 请求</h3><p>HTTP（HyperText Transfer Protocol）请求信息至少由 3 部分组成</p>\n<ul>\n<li>请求方法（GET/POST）、URI、协议版本</li>\n<li>请求头（Request Header）</li>\n<li>空行（\\n）</li>\n<li>请求正文</li>\n</ul>","more":"<p>或</p>\n<p>＜ request-line ＞</p>\n<p>＜ headers ＞</p>\n<p>＜ blank line ＞</p>\n<p>＜ request-body ＞</p>\n<ol>\n<li><p>请求方法（GET/POST）、URI、协议版本</p>\n<ul>\n<li>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。例如：HTTP1.1 目前支持 7 种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE 和 TARCE。</li>\n<li>在 Internet 应用中，最常用的方法是 GET 和 POST。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>请求获取由 Request-URI 所标识的资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>在 Request-URI 所标识的资源后附加新的数据</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>请求获取由 Request-URI 所标识的资源的响应消息报头</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>请求查询服务器的性能，或查询与资源相关的选项和需求</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>请求服务器存储一个资源，并用 Request-URI 作为其标识</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除由 Request-URI 所标识的资源</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>请求服务器回送收到的请求信息，主要用语测试或诊断</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>请求头(Request Header)</p>\n<ul>\n<li>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content-Type</td>\n<td>是返回消息中非常重要的内容，表示后面的文档属于什么 MIME 类型。Content-Type: [type]/[subtype]; parameter。例如最常见的就是 text/html，它的意思是说返回的内容是文本类型，这个文本又是 HTML 格式的。原则上浏览器会根据 Content-Type 来决定如何显示返回的消息体内容</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定请求资源的 Intenet 主机和端口号，必须表示请求 url 的原始服务器或网关的位置。HTTP/1.1 请求必须包含主机头域，否则系统会以 400 状态码返回</td>\n</tr>\n<tr>\n<td>Accept</td>\n<td>浏览器可接受的 MIME 类型</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>浏览器可接受的字符集</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>浏览器能够进行解码的数据编码方式，比如 gzip。Servlet 能够向支持 gzip 的浏览器返回经 gzip 编码的 HTML 页面。许多情形下这可以减少 5 到 10 倍的下载时间</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>授权信息，通常出现在对服务器发送的 WWW-Authenticate 头的应答中</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接。如果 Servlet 看到这里的值为“Keep- Alive”，或者看到请求使用的是 HTTP1.1（HTTP 1.1 默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如 Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet 需要在应答中发送一个 Content-Length 头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>表示请求消息正文的长度</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>这是最重要的请求头信息之一</td>\n</tr>\n<tr>\n<td>From</td>\n<td>请求发送者的 email 地址，由一些特殊的 Web 客户程序使用，浏览器不会用到它</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>初始 URL 中的主机和端口</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回 304“Not Modified”应答</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>包含一个 URL，用户从该 URL 代表的页面出发访问当前请求的页面</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>浏览器类型，如果 Servlet 返回的内容与浏览器类型有关则该值非常有用</td>\n</tr>\n<tr>\n<td>UA-Pixels，UA-Color，UA-OS，UA-CPU</td>\n<td>由某些版本的 IE 浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和 CPU 类型</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<ul>\n<li><p>常见的 MIME 类型如下：</p>\n<ol>\n<li>text/html ： HTML 格式</li>\n<li>text/plain ：纯文本格式</li>\n<li>text/xml ： XML 格式</li>\n<li>image/gif ：gif 图片格式</li>\n<li>image/jpeg ：jpg 图片格式</li>\n<li>image/png：png 图片格式</li>\n<li>application/xhtml+xml ：XHTML 格式</li>\n<li>application/xml ： XML 数据格式</li>\n<li>application/atom+xml ：Atom XML 聚合格式</li>\n<li>application/json ： JSON 数据格式</li>\n<li>application/pdf ：pdf 格式</li>\n<li>application/msword ： Word 文档格式</li>\n<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>\n<li>application/x-www-form-urlencoded ： <code>&lt;form encType=””&gt;</code>中默认的 encType，form 表单数据被编码为 key/value 格式发送到服务器（表单默认的提交数据的格式）</li>\n<li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li><p>空行</p>\n<ul>\n<li>表示请求头已经结束，接下来的是请求正文</li>\n</ul>\n</li>\n<li><p>请求正文</p>\n<ul>\n<li>请求正文中可以包含客户提交的查询字符串信息，也可以为空</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"HTTP-响应\"><a href=\"#HTTP-响应\" class=\"headerlink\" title=\"HTTP 响应\"></a>HTTP 响应</h3><p>HTTP 应答与 HTTP 请求相似，HTTP 响应也由 3 个部分构成，分别是：</p>\n<ul>\n<li>状态行</li>\n<li>响应头(Response Header)</li>\n<li>空行（\\n）</li>\n<li>响应正文</li>\n</ul>\n<ol>\n<li><p>状态行</p>\n<ul>\n<li>由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔，例如<code>HTTP/1.1 200 OK</code></li>\n<li>状态码有如下几种：<ul>\n<li>1xx:指示信息—表示请求已接收，继续处理。</li>\n<li>2xx:成功—表示请求已经被成功接收、理解、接受。</li>\n<li>3xx:重定向—要完成请求必须进行更进一步的操作。</li>\n<li>4xx:客户端错误—请求有语法错误或请求无法实现。</li>\n<li>5xx:服务器端错误—服务器未能实现合法的请求。<blockquote>\n<p>wiki 百科 HTTP 状态码(需翻墙)：<a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81\">https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>响应头</p>\n<ul>\n<li>响应头可能包括：</li>\n</ul>\n<p>Location：</p>\n<p>Location 响应报头域用于重定向接受者到一个新的位置。例如：客户端所请求的页面已不存在原先的位置，为了让客户端重定向到这个页面新的位置，服务 器端可以发回 Location 响应报头后使用重定向语句，让客户端去访问新的域名所对应的服务器上的资源。当我们在 JSP 中使用重定向语句的时候，服务器 端向客户端发回的响应报头中，就会有 Location 响应报头域。</p>\n<p>Server：</p>\n<p>Server 响应报头域包含了服务器用来处理请求的软件信息。它和 User-Agent 请求报头域是相对应的，前者发送服务器端软件的信息，后者发送客户 端软件(浏览器)和操作系统的信息。下面是 Server 响应报头域的一个例子：Server: Apache-Coyote/1.1</p>\n<p>WWW-Authenticate：</p>\n<p>WWW-Authenticate 响应报头域必须被包含在 401(未授权的)响应消息中，这个报头域和前面讲到的 Authorization 请求报头域是 相关的，当客户端收到 401 响应消息，就要决定是否请求服务器对其进行验证。如果要求服务器对其进行验证，就可以发送一个包含了 Authorization 报头域的请求，下面是 WWW-Authenticate 响应报头域的一个例子：WWW-Authenticate: Basic realm=”Basic Auth Test!”</p>\n<p>从这个响应报头域，可以知道服务器端对我们所请求的资源采用的是基本验证机制。</p>\n<p>Content-Encoding：</p>\n<p>Content-Encoding 实体报头域被使用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容编码，因而要获得 Content- Type 报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding 主要用语记录文档的压缩方法，下面是它的一个例子： Content-Encoding: gzip。如果一个实体正文采用了编码方式存储，在使用之前就必须进行解码。</p>\n<p>Content-Language：</p>\n<p>Content-Language 实体报头域描述了资源所用的自然语言。Content-Language 允许用户遵照自身的首选语言来识别和区分实体。 如果这个实体内容仅仅打算提供给丹麦的阅读者，那么可以按照如下的方式设置这个实体报头域：Content-Language: da。</p>\n<p>Content-Length：</p>\n<p>Content-Length 实体报头域用于指明正文的长度，以字节方式存储的十进制数字来表示，也就是一个数字字符占一个字节，用其对应的 ASCII 码存储传输。<br>注意的是：这个长度仅仅是表示实体正文的长度，没有包括实体报头的长度。</p>\n<p>Content-Type</p>\n<p>Content-Type 实体报头域用语指明发送给接收者的实体正文的媒体类型。</p>\n<p>Last-Modified</p>\n<p>Last-Modified 实体报头域用于指示资源最后的修改日期及时间。</p>\n<p>Expires</p>\n<p>Expires 实体报头域给出响应过期的日期和时间。通常，代理服务器或浏览器会缓存一些页面。当用户再次访问这些页面时，直接从缓存中加载并显示给用 户，这样缩短了响应的时间，减少服务器的负载。为了让代理服务器或浏览器在一段时间后更新页面，我们可以使用 Expires 实体报头域指定页面过期的时 间。当用户又一次访问页面时，如果 Expires 报头域给出的日期和时间比 Date 普通报头域给出的日期和时间要早(或相同)，那么代理服务器或浏览器就 不会再使用缓存的页面而是从服务器上请求更新的页面。不过要注意，即使页面过期了，也并不意味着服务器上的原始资源在此时间之前或之后发生了改变。</p>\n</li>\n<li><p>表示分隔</p>\n</li>\n<li><p>要下载的内容</p>\n</li>\n</ol>\n<h3 id=\"关于-HTTP-请求-GET-和-POST-的区别\"><a href=\"#关于-HTTP-请求-GET-和-POST-的区别\" class=\"headerlink\" title=\"关于 HTTP 请求 GET 和 POST 的区别\"></a>关于 HTTP 请求 GET 和 POST 的区别</h3><ul>\n<li><p>提交</p>\n<ul>\n<li><p>GET 提交，请求的数据会附在 URL 之后（就是把数据放置在 HTTP 协议头＜ request-line ＞中）， 以?分割 URL 和传输数据，多个参数用&amp;连接;例如：<code>login.action?name=hyddd&amp; password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD</code>。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用 BASE64 加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX 中的 XX 为该符号以 16 进制表示的 ASCII。</p>\n</li>\n<li><p>POST 提交：把提交的数据放置在是 HTTP 包的包体＜ request-body ＞中。</p>\n</li>\n</ul>\n<p>因此，GET 提交的数据会在地址栏中显示出来，而 POST 提交，地址栏不会改变。</p>\n</li>\n<li><p>传输数据的大小：</p>\n<p>首先声明,HTTP 协议没有对传输的数据大小进行限制，HTTP 协议规范也没有对 URL 长度进行限制。 而在实际开发中存在的限制主要有：</p>\n<ul>\n<li>GET:特定浏览器和服务器对 URL 长度有限制，例如 IE 对 URL 长度的限制是 2083 字节(2K+35)。对于其他浏览器，如 Netscape、FireFox 等，理论上没有长度限制，其限制取决于操作系统的支持。</li>\n</ul>\n<p>因此对于 GET 提交时，传输数据就会受到 URL 长度的限制。</p>\n<ul>\n<li>POST:由于不是通过 URL 传值，理论上数据不受限。但实际各个 WEB 服务器会规定对 post 提交数据大小进行限制，Apache、IIS6 都有各自的配置。</li>\n</ul>\n</li>\n<li><p>安全性：</p>\n<ul>\n<li>POST 的安全性要比 GET 的安全性高。比如：通过 GET 提交数据，用户名和密码将明文出现在 URL 上，因为(1)登录页面有可能被浏览器缓存， (2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用开发者工具查看-HTTP-请求内容和响应内容\"><a href=\"#使用开发者工具查看-HTTP-请求内容和响应内容\" class=\"headerlink\" title=\"使用开发者工具查看 HTTP 请求内容和响应内容\"></a>使用开发者工具查看 HTTP 请求内容和响应内容</h3><ol>\n<li>请求</li>\n</ol>\n<ul>\n<li>打开 Network</li>\n<li>地址栏输入网址</li>\n<li>在 Network 点击，查看 request Headers，点击「view source」,可以看见第一部分和第二部分，第三部分空行看不见</li>\n<li>如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</li>\n</ul>\n<ol start=\"2\">\n<li>响应</li>\n</ol>\n<ul>\n<li>打开 Network</li>\n<li>地址栏输入网址</li>\n<li>选中第一个响应查看 Response Headers，点击「view source」，你会看到响应的前两部分</li>\n<li>查看 Response 或者 Preview，你会看到响应的第 4 部分</li>\n</ul>\n<h3 id=\"curl-命令的使用\"><a href=\"#curl-命令的使用\" class=\"headerlink\" title=\"curl 命令的使用\"></a>curl 命令的使用</h3><ul>\n<li>curl 是一个利用 URL 规则在命令行下工作的文件传输工具，可以说是一款很强大的 http 命令行工具。它支持文件的上传和下载，是综合传输工具</li>\n<li>语法：<code>curl [option] [url]</code></li>\n<li>常见参数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A/--user-agent &lt;string&gt;              设置用户代理发送给服务器</span><br><span class=\"line\">-b/--cookie &lt;name=string/file&gt;    cookie字符串或文件读取位置</span><br><span class=\"line\">-c/--cookie-jar &lt;file&gt;                    操作结束后把cookie写入到这个文件中</span><br><span class=\"line\">-C/--continue-at &lt;offset&gt;            断点续转</span><br><span class=\"line\">-D/--dump-header &lt;file&gt;              把header信息写入到该文件中</span><br><span class=\"line\">-e/--referer                                  来源网址</span><br><span class=\"line\">-f/--fail                                          连接失败时不显示http错误</span><br><span class=\"line\">-o/--output                                  把输出写到该文件中</span><br><span class=\"line\">-O/--remote-name                      把输出写到该文件中，保留远程文件的文件名</span><br><span class=\"line\">-r/--range &lt;range&gt;                      检索来自HTTP/1.1或FTP服务器字节范围</span><br><span class=\"line\">-s/--silent                                    静音模式。不输出任何东西</span><br><span class=\"line\">-T/--upload-file &lt;file&gt;                  上传文件</span><br><span class=\"line\">-u/--user &lt;user[:password]&gt;      设置服务器的用户和密码</span><br><span class=\"line\">-w/--write-out [format]                什么输出完成后</span><br><span class=\"line\">-x/--proxy &lt;host[:port]&gt;              在给定的端口上使用HTTP代理</span><br><span class=\"line\">-#/--progress-bar                        进度条显示当前的传送状态</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Linux curl 命令详解:<a href=\"https://www.cnblogs.com/duhuo/p/5695256.html\"><code>click here</code></a></li>\n</ul>"},{"title":"Hexo 博客搭建","date":"2022-01-24T02:46:30.000Z","updated":"2022-01-24T05:54:40.000Z","_content":"\n使用 GitHub Pages + Hexo 实现自动部署的个人技术博客搭建。\n\n<!-- more -->\n\n### 安装 Hexo\n\n    npm install -g hexo-cli\n\nHexo 安装好了后，执行以下命令初始项目：\n\n```node\n$ hexo init 文件夹\n$ cd 文件夹\n$ npm install\n```\n\n运行 `hexo server` 启动服务，默认运行在 http://localhost:4000/。\n\n博客 `.md` 文件在项目的 `source/_posts` 文件夹中，现在就可以在该文件夹中增加。\n\n### 配置浏览器热更新\n\n有个问题，我们编辑在博客的时候，本地的浏览器不能动态更新，需要手动刷新浏览器，这很麻烦。\n\n安装 browsersync 浏览器热更新\n\n    npm i hexo-browsersync -D\n\n然后重启服务\n\n### 配置主题\n\n我使用的是 `Next` 主题，主题风格简约，适合我的口味。有多种下载方式，按需选择\n\n下载好之后，解压到 `/theme/next` 文件夹中，然后在项目的 `/_config.yml` 配置文件中设置 `theme: next` 即可，主注意空格和缩进。\n\n### 部署到 GitHub Pages\n\n1. 新建名称为 `GitHub名称.github.io` 的仓库，然后将本地未编译文件上传到仓库；\n2. 新建`gh-pages` 分支，Hexo 有 `hexo generate` 命令将我们的文件打包成 html 等静态文件，文件放在 `/public` 目录切换分支，编译好后上传；\n3. 在仓库 `Setting/GitHub Pages/Source` 将分支改成 `gh-pages` 就可以了，然后在 `GitHub名称.github.io` 访问自己的博客了。\n\n### 配置 Action 自动部署\n\n每次都要上传太麻烦了，能不能每次 push 后自动部署呢？答案是肯定的。\n\n1. 新建 `.github/workflows/pages.yml` 配置文件，并增加以下配置;\n\n```yml\nname: Pages\n\non:\n  push:\n    branches:\n      - master # default branch master | main\n\njobs:\n  pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Cache NPM dependencies\n        uses: actions/cache@v2\n        with:\n          path: node_modules\n          key: ${{ runner.OS }}-npm-cache\n          restore-keys: |\n            ${{ runner.OS }}-npm-cache\n      - name: Install Dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\n2. 一旦部署完毕，就能在 `gh-pages` 分支看到编译好的文件，由于之前我们文件分支也在 `gh-pages`，并且配置好了 `GitHub Pages`，因此提交好后就能自动部署了；\n\n### 碰到的一些问题\n\n1. 在 next 主题配置中，增加 tags 目录，访问会报 404\n\n解决方法 ：在 `/source` 文件夹中新建 `tags/index.md`文件，文件内容\n\n```md\n---\ntitle: tags\ntype: tags\nlayout: 'tags'\n---\n```\n\n2. 更新后 CNAME 丢失\n\n解决方法：CNAME 放到 `/source` 文件夹\n\n3. 自动部署后时间变为部署时间\n\n解决方法：增加 `date`、`updated` 手动维护时间\n\n> 引用\n\n- [Hexo Documentation](https://hexo.io/docs/#Install-Hexo)\n- [Hexo 使用 browsersync 浏览器热更新](http://www.leojuly.top/2018/11/26/Hexo-browsersync/)\n- [hexo-theme-next](https://github.com/iissnan/hexo-theme-next)\n- [GitHub Actions ](https://hexo.io/docs/github-pages)\n- [The update time of the article is incorrect ](https://github.com/theme-next/hexo-theme-next/issues/893)\n","source":"_posts/Hexo博客搭建.md","raw":"---\ntitle: Hexo 博客搭建\ndate: 2022-1-24 10:46:30\nupdated: 2022-1-24 13:54:40\ntags:\n  - Hexo\n---\n\n使用 GitHub Pages + Hexo 实现自动部署的个人技术博客搭建。\n\n<!-- more -->\n\n### 安装 Hexo\n\n    npm install -g hexo-cli\n\nHexo 安装好了后，执行以下命令初始项目：\n\n```node\n$ hexo init 文件夹\n$ cd 文件夹\n$ npm install\n```\n\n运行 `hexo server` 启动服务，默认运行在 http://localhost:4000/。\n\n博客 `.md` 文件在项目的 `source/_posts` 文件夹中，现在就可以在该文件夹中增加。\n\n### 配置浏览器热更新\n\n有个问题，我们编辑在博客的时候，本地的浏览器不能动态更新，需要手动刷新浏览器，这很麻烦。\n\n安装 browsersync 浏览器热更新\n\n    npm i hexo-browsersync -D\n\n然后重启服务\n\n### 配置主题\n\n我使用的是 `Next` 主题，主题风格简约，适合我的口味。有多种下载方式，按需选择\n\n下载好之后，解压到 `/theme/next` 文件夹中，然后在项目的 `/_config.yml` 配置文件中设置 `theme: next` 即可，主注意空格和缩进。\n\n### 部署到 GitHub Pages\n\n1. 新建名称为 `GitHub名称.github.io` 的仓库，然后将本地未编译文件上传到仓库；\n2. 新建`gh-pages` 分支，Hexo 有 `hexo generate` 命令将我们的文件打包成 html 等静态文件，文件放在 `/public` 目录切换分支，编译好后上传；\n3. 在仓库 `Setting/GitHub Pages/Source` 将分支改成 `gh-pages` 就可以了，然后在 `GitHub名称.github.io` 访问自己的博客了。\n\n### 配置 Action 自动部署\n\n每次都要上传太麻烦了，能不能每次 push 后自动部署呢？答案是肯定的。\n\n1. 新建 `.github/workflows/pages.yml` 配置文件，并增加以下配置;\n\n```yml\nname: Pages\n\non:\n  push:\n    branches:\n      - master # default branch master | main\n\njobs:\n  pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Cache NPM dependencies\n        uses: actions/cache@v2\n        with:\n          path: node_modules\n          key: ${{ runner.OS }}-npm-cache\n          restore-keys: |\n            ${{ runner.OS }}-npm-cache\n      - name: Install Dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\n2. 一旦部署完毕，就能在 `gh-pages` 分支看到编译好的文件，由于之前我们文件分支也在 `gh-pages`，并且配置好了 `GitHub Pages`，因此提交好后就能自动部署了；\n\n### 碰到的一些问题\n\n1. 在 next 主题配置中，增加 tags 目录，访问会报 404\n\n解决方法 ：在 `/source` 文件夹中新建 `tags/index.md`文件，文件内容\n\n```md\n---\ntitle: tags\ntype: tags\nlayout: 'tags'\n---\n```\n\n2. 更新后 CNAME 丢失\n\n解决方法：CNAME 放到 `/source` 文件夹\n\n3. 自动部署后时间变为部署时间\n\n解决方法：增加 `date`、`updated` 手动维护时间\n\n> 引用\n\n- [Hexo Documentation](https://hexo.io/docs/#Install-Hexo)\n- [Hexo 使用 browsersync 浏览器热更新](http://www.leojuly.top/2018/11/26/Hexo-browsersync/)\n- [hexo-theme-next](https://github.com/iissnan/hexo-theme-next)\n- [GitHub Actions ](https://hexo.io/docs/github-pages)\n- [The update time of the article is incorrect ](https://github.com/theme-next/hexo-theme-next/issues/893)\n","slug":"Hexo博客搭建","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwn000fk4u98gixe0ot","content":"<p>使用 GitHub Pages + Hexo 实现自动部署的个人技术博客搭建。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><pre><code>npm install -g hexo-cli\n</code></pre>\n<p>Hexo 安装好了后，执行以下命令初始项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init 文件夹</span><br><span class=\"line\">$ cd 文件夹</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>hexo server</code> 启动服务，默认运行在 <a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></p>\n<p>博客 <code>.md</code> 文件在项目的 <code>source/_posts</code> 文件夹中，现在就可以在该文件夹中增加。</p>\n<h3 id=\"配置浏览器热更新\"><a href=\"#配置浏览器热更新\" class=\"headerlink\" title=\"配置浏览器热更新\"></a>配置浏览器热更新</h3><p>有个问题，我们编辑在博客的时候，本地的浏览器不能动态更新，需要手动刷新浏览器，这很麻烦。</p>\n<p>安装 browsersync 浏览器热更新</p>\n<pre><code>npm i hexo-browsersync -D\n</code></pre>\n<p>然后重启服务</p>\n<h3 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h3><p>我使用的是 <code>Next</code> 主题，主题风格简约，适合我的口味。有多种下载方式，按需选择</p>\n<p>下载好之后，解压到 <code>/theme/next</code> 文件夹中，然后在项目的 <code>/_config.yml</code> 配置文件中设置 <code>theme: next</code> 即可，主注意空格和缩进。</p>\n<h3 id=\"部署到-GitHub-Pages\"><a href=\"#部署到-GitHub-Pages\" class=\"headerlink\" title=\"部署到 GitHub Pages\"></a>部署到 GitHub Pages</h3><ol>\n<li>新建名称为 <code>GitHub名称.github.io</code> 的仓库，然后将本地未编译文件上传到仓库；</li>\n<li>新建<code>gh-pages</code> 分支，Hexo 有 <code>hexo generate</code> 命令将我们的文件打包成 html 等静态文件，文件放在 <code>/public</code> 目录切换分支，编译好后上传；</li>\n<li>在仓库 <code>Setting/GitHub Pages/Source</code> 将分支改成 <code>gh-pages</code> 就可以了，然后在 <code>GitHub名称.github.io</code> 访问自己的博客了。</li>\n</ol>\n<h3 id=\"配置-Action-自动部署\"><a href=\"#配置-Action-自动部署\" class=\"headerlink\" title=\"配置 Action 自动部署\"></a>配置 Action 自动部署</h3><p>每次都要上传太麻烦了，能不能每次 push 后自动部署呢？答案是肯定的。</p>\n<ol>\n<li>新建 <code>.github/workflows/pages.yml</code> 配置文件，并增加以下配置;</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span> <span class=\"comment\"># default branch master | main</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pages:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"number\">16.</span><span class=\"string\">x</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&#x27;16&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.OS</span> <span class=\"string\">&#125;&#125;-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">peaceiris/actions-gh-pages@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">github_token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">publish_dir:</span> <span class=\"string\">./public</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>一旦部署完毕，就能在 <code>gh-pages</code> 分支看到编译好的文件，由于之前我们文件分支也在 <code>gh-pages</code>，并且配置好了 <code>GitHub Pages</code>，因此提交好后就能自动部署了；</li>\n</ol>\n<h3 id=\"碰到的一些问题\"><a href=\"#碰到的一些问题\" class=\"headerlink\" title=\"碰到的一些问题\"></a>碰到的一些问题</h3><ol>\n<li>在 next 主题配置中，增加 tags 目录，访问会报 404</li>\n</ol>\n<p>解决方法 ：在 <code>/source</code> 文件夹中新建 <code>tags/index.md</code>文件，文件内容</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">type: tags</span><br><span class=\"line\"><span class=\"section\">layout: &#x27;tags&#x27;</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>更新后 CNAME 丢失</li>\n</ol>\n<p>解决方法：CNAME 放到 <code>/source</code> 文件夹</p>\n<ol start=\"3\">\n<li>自动部署后时间变为部署时间</li>\n</ol>\n<p>解决方法：增加 <code>date</code>、<code>updated</code> 手动维护时间</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://hexo.io/docs/#Install-Hexo\">Hexo Documentation</a></li>\n<li><a href=\"http://www.leojuly.top/2018/11/26/Hexo-browsersync/\">Hexo 使用 browsersync 浏览器热更新</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a></li>\n<li><a href=\"https://hexo.io/docs/github-pages\">GitHub Actions </a></li>\n<li><a href=\"https://github.com/theme-next/hexo-theme-next/issues/893\">The update time of the article is incorrect </a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>使用 GitHub Pages + Hexo 实现自动部署的个人技术博客搭建。</p>","more":"<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><pre><code>npm install -g hexo-cli\n</code></pre>\n<p>Hexo 安装好了后，执行以下命令初始项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init 文件夹</span><br><span class=\"line\">$ cd 文件夹</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>hexo server</code> 启动服务，默认运行在 <a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></p>\n<p>博客 <code>.md</code> 文件在项目的 <code>source/_posts</code> 文件夹中，现在就可以在该文件夹中增加。</p>\n<h3 id=\"配置浏览器热更新\"><a href=\"#配置浏览器热更新\" class=\"headerlink\" title=\"配置浏览器热更新\"></a>配置浏览器热更新</h3><p>有个问题，我们编辑在博客的时候，本地的浏览器不能动态更新，需要手动刷新浏览器，这很麻烦。</p>\n<p>安装 browsersync 浏览器热更新</p>\n<pre><code>npm i hexo-browsersync -D\n</code></pre>\n<p>然后重启服务</p>\n<h3 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h3><p>我使用的是 <code>Next</code> 主题，主题风格简约，适合我的口味。有多种下载方式，按需选择</p>\n<p>下载好之后，解压到 <code>/theme/next</code> 文件夹中，然后在项目的 <code>/_config.yml</code> 配置文件中设置 <code>theme: next</code> 即可，主注意空格和缩进。</p>\n<h3 id=\"部署到-GitHub-Pages\"><a href=\"#部署到-GitHub-Pages\" class=\"headerlink\" title=\"部署到 GitHub Pages\"></a>部署到 GitHub Pages</h3><ol>\n<li>新建名称为 <code>GitHub名称.github.io</code> 的仓库，然后将本地未编译文件上传到仓库；</li>\n<li>新建<code>gh-pages</code> 分支，Hexo 有 <code>hexo generate</code> 命令将我们的文件打包成 html 等静态文件，文件放在 <code>/public</code> 目录切换分支，编译好后上传；</li>\n<li>在仓库 <code>Setting/GitHub Pages/Source</code> 将分支改成 <code>gh-pages</code> 就可以了，然后在 <code>GitHub名称.github.io</code> 访问自己的博客了。</li>\n</ol>\n<h3 id=\"配置-Action-自动部署\"><a href=\"#配置-Action-自动部署\" class=\"headerlink\" title=\"配置 Action 自动部署\"></a>配置 Action 自动部署</h3><p>每次都要上传太麻烦了，能不能每次 push 后自动部署呢？答案是肯定的。</p>\n<ol>\n<li>新建 <code>.github/workflows/pages.yml</code> 配置文件，并增加以下配置;</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span> <span class=\"comment\"># default branch master | main</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pages:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"number\">16.</span><span class=\"string\">x</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&#x27;16&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.OS</span> <span class=\"string\">&#125;&#125;-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">peaceiris/actions-gh-pages@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">github_token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">publish_dir:</span> <span class=\"string\">./public</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>一旦部署完毕，就能在 <code>gh-pages</code> 分支看到编译好的文件，由于之前我们文件分支也在 <code>gh-pages</code>，并且配置好了 <code>GitHub Pages</code>，因此提交好后就能自动部署了；</li>\n</ol>\n<h3 id=\"碰到的一些问题\"><a href=\"#碰到的一些问题\" class=\"headerlink\" title=\"碰到的一些问题\"></a>碰到的一些问题</h3><ol>\n<li>在 next 主题配置中，增加 tags 目录，访问会报 404</li>\n</ol>\n<p>解决方法 ：在 <code>/source</code> 文件夹中新建 <code>tags/index.md</code>文件，文件内容</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">type: tags</span><br><span class=\"line\"><span class=\"section\">layout: &#x27;tags&#x27;</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>更新后 CNAME 丢失</li>\n</ol>\n<p>解决方法：CNAME 放到 <code>/source</code> 文件夹</p>\n<ol start=\"3\">\n<li>自动部署后时间变为部署时间</li>\n</ol>\n<p>解决方法：增加 <code>date</code>、<code>updated</code> 手动维护时间</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://hexo.io/docs/#Install-Hexo\">Hexo Documentation</a></li>\n<li><a href=\"http://www.leojuly.top/2018/11/26/Hexo-browsersync/\">Hexo 使用 browsersync 浏览器热更新</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a></li>\n<li><a href=\"https://hexo.io/docs/github-pages\">GitHub Actions </a></li>\n<li><a href=\"https://github.com/theme-next/hexo-theme-next/issues/893\">The update time of the article is incorrect </a></li>\n</ul>"},{"title":"JS里的数据类型","date":"2018-11-24T16:00:00.000Z","updated":"2018-11-24T16:00:00.000Z","_content":"\nJavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值)，所以现在有七种，分别为：\n\n<!-- more -->\n\n- number\n- string\n- boolean\n- symbol\n- undefined\n- null\n- object 复杂类型，由以上 6 种简单类型数据组成\n\n# number\n\nJavaScript 内部，所有数字都是以 64 位浮点数形式存储的，即是整数也是。所以 1 与 1.0 是相同的（1===1.0 返回`true`），是同一个数。\n\n由于浮点数不是精确的值，所以涉及小数的比较和运算要小心\n\n## 范围及精度\n\nJavaScript 能够表示的数值范围为 2<sup>1024</sup>到 2<sup>-1023</sup>（开区间），超出这个范围的数无法表示，返回 Infinity 或者 0;\n\nJavascript 提供 Number 对象 MAX_VALUE 和 MIN_VALUE 属性，返回表示的最大值和最小值\n\nJavaScript 对-2<sup>53</sup>到 2<sup>53</sup>的数值，都可以精确表示，简单表示的话对 15 位的十进制数都可以精确处理\n\n## 进制\n\nJavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制\n\n- 十进制：没有前导 0 的数值。\n- 八进制：有前缀 0o 或 0O 的数值，或者有前导 0、且只用到 0-7 的八个阿拉伯数字的数值。\n- 十六进制：有前缀 0x 或 0X 的数值。\n- 二进制：有前缀 0b 或 0B 的数值。\n\n默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制\n\n如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错\n\n通常来说，有前导 0 的数值会被视为八进制，但是如果前导 0 后面有数字 8 和 9，则该数值被视为十进制\n\n## 特殊数值\n\nNaN 是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。NaN 不等于任何值，包括它本身。\n\nNaN 与任何数（包括它自己）的运算，得到的都是 NaN。\n\n## 与数值相关的全局方法\n\n### parseInt()\n\nparseInt 方法用于将字符串转为整数（返回值十进制，或者 NaN）。\n\n字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。\n\n如果 parseInt 的第一个参数**不是字符串**，会被先转为字符串**String(010)的结果是 9**，对于八进制的前缀 0，尤其需要注意。\n\n如果**字符串**以 0x 或 0X 开头，parseInt 会将其按照十六进制数解析。如果字符串以 0 开头，将其按照 10 进制解析。\n\nparseInt 方法还可以接受第二个参数（2 到 36 之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，parseInt 的第二个参数为 10，即默认是十进制转十进制。超出这个范围，则返回 NaN。\n\n如果第二个参数是 0、undefined 和 null，则直接忽略。\n\n如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。\n\n如果最高位无法转换，则直接返回 NaN。\n\n### parseFloat()\n\nparseFloat 方法用于将一个字符串转为浮点数。\n\n如果字符串符合科学计数法，则会进行相应的转换。\n\n如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回 NaN。\n\n### isNaN()\n\nisNaN 方法可以用来判断一个值是否为 NaN。\n\n判断 NaN 更可靠的方法是，利用 NaN 为唯一不等于自身的值的这个特点，进行判断。\n\n### isFinite()\n\nisFinite 方法返回一个布尔值，表示某个值是否为正常的数值。\n\n除了 Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false，isFinite 对于其他的数值都会返回 true。\n\n# string\n\n字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此。此外，因为字符串是不允许多行的，如果想多行显示，建议使用`+`连接。\n\n## 转义\n\n反斜杠（\\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。\n\n反斜杠还有三种特殊用法。\n\n- 反斜杠后面紧跟三个八进制数（000 到 377），代表一个字符。HHH 对应该字符的 Unicode 码点，比如\\251 表示版权符号。显然，这种方法只能输出 256 种字符。\n- \\x 后面紧跟两个十六进制数（00 到 FF），代表一个字符。HH 对应该字符的 Unicode 码点，比如\\xA9 表示版权符号。这种方法也只能输出 256 种字符。\n- \\u 后面紧跟四个十六进制数（0000 到 FFFF），代表一个字符。XXXX 对应该字符的 Unicode 码点，比如\\u00A9 表示版权符号。\n\n## 字符串与数组\n\n字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从 0 开始）。\n\n如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回 undefined。\n\n但是，字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。\n\nlength 属性返回字符串的长度，该属性也是无法改变的\n\n## 字符集\n\nJavaScript 使用 Unicode 字符集。JavaScript 引擎内部，所有字符都用 Unicode 表示。\n\nJavaScript 不仅以 Unicode 储存字符，还允许直接在程序中使用 Unicode 码点表示字符，即将字符写成\\uxxxx 的形式，其中 xxxx 代表该字符的 Unicode 码点。比如，\\u00A9 代表版权符号。\n\n我们还需要知道，每个字符在 JavaScript 内部都是以 16 位（即 2 个字节）的 UTF-16 格式储存。也就是说，JavaScript 的单位字符长度固定为 16 位长度，即 2 个字节。对于码点在 U+10000 到 U+10FFFF 之间的字符，长度为 32 位（即 4 个字节），而且前两个字节在 0xD800 到 0xDBFF 之间，后两个字节在 0xDC00 到 0xDFFF 之间。举例来说，码点 U+1D306 对应的字符为 𝌆，它写成 UTF-16 就是 0xD834 0xDF06。\n对于码点在 U+10000 到 U+10FFFF 之间的字符，JavaScript 总是认为它们是两个字符（length 属性为 2）。所以处理的时候，必须把这一点考虑在内，也就是说，JavaScript 返回的字符串长度可能是不正确的。\n\n## Base64 转码\n\nBase64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。\n\n全局函数 btoa() 能将字符串转为 Base64 编码。\n全局函数 atob() 能将 Base64 编码转为原来的编码。\n\n要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节\n\n```javascript\nfunction b64Encode(str) {\n  return btoa(encodeURIComponent(str))\n}\n\nfunction b64Decode(str) {\n  return decodeURIComponent(atob(str))\n}\n\nb64Encode('你好') // \"JUU0JUJEJUEwJUU1JUE1JUJE\"\nb64Decode('JUU0JUJEJUEwJUU1JUE1JUJE') // \"你好\"\n```\n\n# boolean\n\n注意，空数组（[]）和空对象（{}）对应的布尔值，都是 true。\n\n# Symbol\n\nES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。\n\nSymbol 值通过 Symbol 函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n\n注意，Symbol 函数前不能使用 new 命令，否则会报错。\n\nSymbol 值不能与其他类型的值进行运算，会报错。\n\n## Symbol.for()，Symbol.keyFor()\n\n有时，我们希望重新使用同一个 Symbol 值，Symbol.for 方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。\n\n```javascript\nlet s1 = Symbol.for('foo')\nlet s2 = Symbol.for('foo')\n\ns1 === s2 // true\n```\n\nSymbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。\n\n```javascript\nlet s1 = Symbol.for('foo')\nSymbol.keyFor(s1) // \"foo\"\n\nlet s2 = Symbol('foo')\nSymbol.keyFor(s2) // undefined\n```\n\n# undefined,null\n\n一般两者没区别，只是按照惯例**undefined**表示一个变量未赋值，**null**表示一个 object 未赋值。\n\n# object\n\n简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。\n\n```javascript\nvar o1 = {}\nvar o2 = new Object()\nvar o3 = Object.create(Object.prototype)\n```\n\n以上三种方法都能建一个对象。\n\n对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。\n\n如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。\n\n对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。\n\n```javascript\nvar obj = {\n  p: function (x) {\n    return 2 * x\n  }\n}\n\nobj.p(1) // 2\n```\n\n如果属性的值还是一个对象，就形成了链式引用。\n\n```javascript\nvar o1 = {}\nvar o2 = { bar: 'hello' }\n\no1.foo = o2\no1.foo.bar // \"hello\"\n```\n\n## 对象的引用\n\n如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。\n\n```javascript\nvar o1 = {}\nvar o2 = o1\n\no1.a = 1\no2.a // 1\n\no2.b = 2\no1.b // 2\n```\n\n但是，这种引用只局限于对象，如果两个变量指向同一个原始类型的值。那么，变量这时都是值的拷贝。\n\n## 表达式还是语句？\n\n对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？\n\nJavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含 foo 属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签 foo，指向表达式 123。\n\n为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。\n\n```javascript\neval('{foo: 123}') // 123\neval('({foo: 123})') // {foo: 123}\n```\n\n上面代码中，如果没有圆括号，eval 将其理解为一个代码块；加上圆括号以后，就理解成一个对象。\n\n## 属性的操作\n\n读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。\n\n```javascript\nvar foo = 'bar';\nvar obj = {\n  p: 'Hello World',\n  bar: 'whosyourdaddy'\n};\n\nobj.p // \"Hello World\"\nobj['p'] // \"Hello World\"\nobj.[foo] // \"whosyourdaddy\"\n```\n\n请注意，如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。\n\n查看一个对象本身的所有属性，可以使用 Object.keys 方法。\n\ndelete 命令用于删除对象的属性(键名和键值一并删除)，删除成功后返回 true。\n\n注意，删除一个不存在的属性，delete 不报错，而且返回 true。\n\n另外，需要注意的是，delete 命令只能删除对象本身的属性，无法删除继承的属性。\n\n```javascript\nvar obj = {}\ndelete obj.toString // true\nobj.toString // function toString() { [native code] }\n```\n\n## in 运算符\n\nin 运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回 true，否则返回 false。它的左边是一个字符串，表示属性名，右边是一个对象。\n\nin 运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象 obj 本身并没有 toString 属性，但是 in 运算符会返回 true，因为这个属性是继承的。\n\n这时，可以使用对象的 hasOwnProperty 方法判断一下，是否为对象自身的属性。\n\n```javascript\nvar obj = {}\nif ('toString' in obj) {\n  console.log(obj.hasOwnProperty('toString')) // false\n}\n```\n\n## 属性的遍历：for...in 循环\n\nfor...in 循环用来遍历一个对象的全部属性。\n\nfor...in 循环有两个使用注意点。\n\n- 它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。\n- 它不仅遍历对象自身的属性，还遍历继承的属性。\n\n如果继承的属性是可遍历的，那么就会被 for...in 循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用 for...in 的时候，应该结合使用 hasOwnProperty 方法，在循环内部判断一下，某个属性是否为对象自身的属性。\n\n## with 语句\n\nwith 语句的格式如下：\n\n```javascript\nwith (对象) {\n  语句\n}\n```\n\n它的作用是操作同一个对象的多个属性时，提供一些书写的方便。\n\n注意，如果 with 区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。\n\n单纯从上面的代码块，根本无法判断 x 到底是全局变量，还是对象 obj 的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用 with 语句，可以考虑用一个临时变量代替 with。\n\n```javascript\nwith (obj1.obj2.obj3) {\n  console.log(p1 + p2)\n}\n\n// 可以写成\nvar temp = obj1.obj2.obj3\nconsole.log(temp.p1 + temp.p2)\n```\n\n> 引用\n\n- https://github.com/ruanyf/es6tutorial/blob/3c44084f4b2e318fcbec77b7191b1f2412726c47/docs/symbol.md\n- https://wangdoc.com/javascript/types/index.html\n","source":"_posts/JS里的数据类型.md","raw":"---\ntitle: JS里的数据类型\ndate: 2018-11-25 00:00:00\nupdated: 2018-11-25 00:00:00\ntags:\n  - JavaScript\n  - 数据类型\n---\n\nJavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值)，所以现在有七种，分别为：\n\n<!-- more -->\n\n- number\n- string\n- boolean\n- symbol\n- undefined\n- null\n- object 复杂类型，由以上 6 种简单类型数据组成\n\n# number\n\nJavaScript 内部，所有数字都是以 64 位浮点数形式存储的，即是整数也是。所以 1 与 1.0 是相同的（1===1.0 返回`true`），是同一个数。\n\n由于浮点数不是精确的值，所以涉及小数的比较和运算要小心\n\n## 范围及精度\n\nJavaScript 能够表示的数值范围为 2<sup>1024</sup>到 2<sup>-1023</sup>（开区间），超出这个范围的数无法表示，返回 Infinity 或者 0;\n\nJavascript 提供 Number 对象 MAX_VALUE 和 MIN_VALUE 属性，返回表示的最大值和最小值\n\nJavaScript 对-2<sup>53</sup>到 2<sup>53</sup>的数值，都可以精确表示，简单表示的话对 15 位的十进制数都可以精确处理\n\n## 进制\n\nJavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制\n\n- 十进制：没有前导 0 的数值。\n- 八进制：有前缀 0o 或 0O 的数值，或者有前导 0、且只用到 0-7 的八个阿拉伯数字的数值。\n- 十六进制：有前缀 0x 或 0X 的数值。\n- 二进制：有前缀 0b 或 0B 的数值。\n\n默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制\n\n如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错\n\n通常来说，有前导 0 的数值会被视为八进制，但是如果前导 0 后面有数字 8 和 9，则该数值被视为十进制\n\n## 特殊数值\n\nNaN 是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。NaN 不等于任何值，包括它本身。\n\nNaN 与任何数（包括它自己）的运算，得到的都是 NaN。\n\n## 与数值相关的全局方法\n\n### parseInt()\n\nparseInt 方法用于将字符串转为整数（返回值十进制，或者 NaN）。\n\n字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。\n\n如果 parseInt 的第一个参数**不是字符串**，会被先转为字符串**String(010)的结果是 9**，对于八进制的前缀 0，尤其需要注意。\n\n如果**字符串**以 0x 或 0X 开头，parseInt 会将其按照十六进制数解析。如果字符串以 0 开头，将其按照 10 进制解析。\n\nparseInt 方法还可以接受第二个参数（2 到 36 之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，parseInt 的第二个参数为 10，即默认是十进制转十进制。超出这个范围，则返回 NaN。\n\n如果第二个参数是 0、undefined 和 null，则直接忽略。\n\n如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。\n\n如果最高位无法转换，则直接返回 NaN。\n\n### parseFloat()\n\nparseFloat 方法用于将一个字符串转为浮点数。\n\n如果字符串符合科学计数法，则会进行相应的转换。\n\n如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回 NaN。\n\n### isNaN()\n\nisNaN 方法可以用来判断一个值是否为 NaN。\n\n判断 NaN 更可靠的方法是，利用 NaN 为唯一不等于自身的值的这个特点，进行判断。\n\n### isFinite()\n\nisFinite 方法返回一个布尔值，表示某个值是否为正常的数值。\n\n除了 Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false，isFinite 对于其他的数值都会返回 true。\n\n# string\n\n字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此。此外，因为字符串是不允许多行的，如果想多行显示，建议使用`+`连接。\n\n## 转义\n\n反斜杠（\\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。\n\n反斜杠还有三种特殊用法。\n\n- 反斜杠后面紧跟三个八进制数（000 到 377），代表一个字符。HHH 对应该字符的 Unicode 码点，比如\\251 表示版权符号。显然，这种方法只能输出 256 种字符。\n- \\x 后面紧跟两个十六进制数（00 到 FF），代表一个字符。HH 对应该字符的 Unicode 码点，比如\\xA9 表示版权符号。这种方法也只能输出 256 种字符。\n- \\u 后面紧跟四个十六进制数（0000 到 FFFF），代表一个字符。XXXX 对应该字符的 Unicode 码点，比如\\u00A9 表示版权符号。\n\n## 字符串与数组\n\n字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从 0 开始）。\n\n如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回 undefined。\n\n但是，字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。\n\nlength 属性返回字符串的长度，该属性也是无法改变的\n\n## 字符集\n\nJavaScript 使用 Unicode 字符集。JavaScript 引擎内部，所有字符都用 Unicode 表示。\n\nJavaScript 不仅以 Unicode 储存字符，还允许直接在程序中使用 Unicode 码点表示字符，即将字符写成\\uxxxx 的形式，其中 xxxx 代表该字符的 Unicode 码点。比如，\\u00A9 代表版权符号。\n\n我们还需要知道，每个字符在 JavaScript 内部都是以 16 位（即 2 个字节）的 UTF-16 格式储存。也就是说，JavaScript 的单位字符长度固定为 16 位长度，即 2 个字节。对于码点在 U+10000 到 U+10FFFF 之间的字符，长度为 32 位（即 4 个字节），而且前两个字节在 0xD800 到 0xDBFF 之间，后两个字节在 0xDC00 到 0xDFFF 之间。举例来说，码点 U+1D306 对应的字符为 𝌆，它写成 UTF-16 就是 0xD834 0xDF06。\n对于码点在 U+10000 到 U+10FFFF 之间的字符，JavaScript 总是认为它们是两个字符（length 属性为 2）。所以处理的时候，必须把这一点考虑在内，也就是说，JavaScript 返回的字符串长度可能是不正确的。\n\n## Base64 转码\n\nBase64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。\n\n全局函数 btoa() 能将字符串转为 Base64 编码。\n全局函数 atob() 能将 Base64 编码转为原来的编码。\n\n要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节\n\n```javascript\nfunction b64Encode(str) {\n  return btoa(encodeURIComponent(str))\n}\n\nfunction b64Decode(str) {\n  return decodeURIComponent(atob(str))\n}\n\nb64Encode('你好') // \"JUU0JUJEJUEwJUU1JUE1JUJE\"\nb64Decode('JUU0JUJEJUEwJUU1JUE1JUJE') // \"你好\"\n```\n\n# boolean\n\n注意，空数组（[]）和空对象（{}）对应的布尔值，都是 true。\n\n# Symbol\n\nES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。\n\nSymbol 值通过 Symbol 函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n\n注意，Symbol 函数前不能使用 new 命令，否则会报错。\n\nSymbol 值不能与其他类型的值进行运算，会报错。\n\n## Symbol.for()，Symbol.keyFor()\n\n有时，我们希望重新使用同一个 Symbol 值，Symbol.for 方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。\n\n```javascript\nlet s1 = Symbol.for('foo')\nlet s2 = Symbol.for('foo')\n\ns1 === s2 // true\n```\n\nSymbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。\n\n```javascript\nlet s1 = Symbol.for('foo')\nSymbol.keyFor(s1) // \"foo\"\n\nlet s2 = Symbol('foo')\nSymbol.keyFor(s2) // undefined\n```\n\n# undefined,null\n\n一般两者没区别，只是按照惯例**undefined**表示一个变量未赋值，**null**表示一个 object 未赋值。\n\n# object\n\n简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。\n\n```javascript\nvar o1 = {}\nvar o2 = new Object()\nvar o3 = Object.create(Object.prototype)\n```\n\n以上三种方法都能建一个对象。\n\n对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。\n\n如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。\n\n对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。\n\n```javascript\nvar obj = {\n  p: function (x) {\n    return 2 * x\n  }\n}\n\nobj.p(1) // 2\n```\n\n如果属性的值还是一个对象，就形成了链式引用。\n\n```javascript\nvar o1 = {}\nvar o2 = { bar: 'hello' }\n\no1.foo = o2\no1.foo.bar // \"hello\"\n```\n\n## 对象的引用\n\n如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。\n\n```javascript\nvar o1 = {}\nvar o2 = o1\n\no1.a = 1\no2.a // 1\n\no2.b = 2\no1.b // 2\n```\n\n但是，这种引用只局限于对象，如果两个变量指向同一个原始类型的值。那么，变量这时都是值的拷贝。\n\n## 表达式还是语句？\n\n对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？\n\nJavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含 foo 属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签 foo，指向表达式 123。\n\n为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。\n\n```javascript\neval('{foo: 123}') // 123\neval('({foo: 123})') // {foo: 123}\n```\n\n上面代码中，如果没有圆括号，eval 将其理解为一个代码块；加上圆括号以后，就理解成一个对象。\n\n## 属性的操作\n\n读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。\n\n```javascript\nvar foo = 'bar';\nvar obj = {\n  p: 'Hello World',\n  bar: 'whosyourdaddy'\n};\n\nobj.p // \"Hello World\"\nobj['p'] // \"Hello World\"\nobj.[foo] // \"whosyourdaddy\"\n```\n\n请注意，如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。\n\n查看一个对象本身的所有属性，可以使用 Object.keys 方法。\n\ndelete 命令用于删除对象的属性(键名和键值一并删除)，删除成功后返回 true。\n\n注意，删除一个不存在的属性，delete 不报错，而且返回 true。\n\n另外，需要注意的是，delete 命令只能删除对象本身的属性，无法删除继承的属性。\n\n```javascript\nvar obj = {}\ndelete obj.toString // true\nobj.toString // function toString() { [native code] }\n```\n\n## in 运算符\n\nin 运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回 true，否则返回 false。它的左边是一个字符串，表示属性名，右边是一个对象。\n\nin 运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象 obj 本身并没有 toString 属性，但是 in 运算符会返回 true，因为这个属性是继承的。\n\n这时，可以使用对象的 hasOwnProperty 方法判断一下，是否为对象自身的属性。\n\n```javascript\nvar obj = {}\nif ('toString' in obj) {\n  console.log(obj.hasOwnProperty('toString')) // false\n}\n```\n\n## 属性的遍历：for...in 循环\n\nfor...in 循环用来遍历一个对象的全部属性。\n\nfor...in 循环有两个使用注意点。\n\n- 它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。\n- 它不仅遍历对象自身的属性，还遍历继承的属性。\n\n如果继承的属性是可遍历的，那么就会被 for...in 循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用 for...in 的时候，应该结合使用 hasOwnProperty 方法，在循环内部判断一下，某个属性是否为对象自身的属性。\n\n## with 语句\n\nwith 语句的格式如下：\n\n```javascript\nwith (对象) {\n  语句\n}\n```\n\n它的作用是操作同一个对象的多个属性时，提供一些书写的方便。\n\n注意，如果 with 区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。\n\n单纯从上面的代码块，根本无法判断 x 到底是全局变量，还是对象 obj 的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用 with 语句，可以考虑用一个临时变量代替 with。\n\n```javascript\nwith (obj1.obj2.obj3) {\n  console.log(p1 + p2)\n}\n\n// 可以写成\nvar temp = obj1.obj2.obj3\nconsole.log(temp.p1 + temp.p2)\n```\n\n> 引用\n\n- https://github.com/ruanyf/es6tutorial/blob/3c44084f4b2e318fcbec77b7191b1f2412726c47/docs/symbol.md\n- https://wangdoc.com/javascript/types/index.html\n","slug":"JS里的数据类型","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwo000gk4u97epl5epi","content":"<p>JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值)，所以现在有七种，分别为：</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>symbol</li>\n<li>undefined</li>\n<li>null</li>\n<li>object 复杂类型，由以上 6 种简单类型数据组成</li>\n</ul>\n<h1 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h1><p>JavaScript 内部，所有数字都是以 64 位浮点数形式存储的，即是整数也是。所以 1 与 1.0 是相同的（1===1.0 返回<code>true</code>），是同一个数。</p>\n<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要小心</p>\n<h2 id=\"范围及精度\"><a href=\"#范围及精度\" class=\"headerlink\" title=\"范围及精度\"></a>范围及精度</h2><p>JavaScript 能够表示的数值范围为 2<sup>1024</sup>到 2<sup>-1023</sup>（开区间），超出这个范围的数无法表示，返回 Infinity 或者 0;</p>\n<p>Javascript 提供 Number 对象 MAX_VALUE 和 MIN_VALUE 属性，返回表示的最大值和最小值</p>\n<p>JavaScript 对-2<sup>53</sup>到 2<sup>53</sup>的数值，都可以精确表示，简单表示的话对 15 位的十进制数都可以精确处理</p>\n<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><p>JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制</p>\n<ul>\n<li>十进制：没有前导 0 的数值。</li>\n<li>八进制：有前缀 0o 或 0O 的数值，或者有前导 0、且只用到 0-7 的八个阿拉伯数字的数值。</li>\n<li>十六进制：有前缀 0x 或 0X 的数值。</li>\n<li>二进制：有前缀 0b 或 0B 的数值。</li>\n</ul>\n<p>默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制</p>\n<p>如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错</p>\n<p>通常来说，有前导 0 的数值会被视为八进制，但是如果前导 0 后面有数字 8 和 9，则该数值被视为十进制</p>\n<h2 id=\"特殊数值\"><a href=\"#特殊数值\" class=\"headerlink\" title=\"特殊数值\"></a>特殊数值</h2><p>NaN 是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。NaN 不等于任何值，包括它本身。</p>\n<p>NaN 与任何数（包括它自己）的运算，得到的都是 NaN。</p>\n<h2 id=\"与数值相关的全局方法\"><a href=\"#与数值相关的全局方法\" class=\"headerlink\" title=\"与数值相关的全局方法\"></a>与数值相关的全局方法</h2><h3 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt()\"></a>parseInt()</h3><p>parseInt 方法用于将字符串转为整数（返回值十进制，或者 NaN）。</p>\n<p>字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</p>\n<p>如果 parseInt 的第一个参数<strong>不是字符串</strong>，会被先转为字符串<strong>String(010)的结果是 9</strong>，对于八进制的前缀 0，尤其需要注意。</p>\n<p>如果<strong>字符串</strong>以 0x 或 0X 开头，parseInt 会将其按照十六进制数解析。如果字符串以 0 开头，将其按照 10 进制解析。</p>\n<p>parseInt 方法还可以接受第二个参数（2 到 36 之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，parseInt 的第二个参数为 10，即默认是十进制转十进制。超出这个范围，则返回 NaN。</p>\n<p>如果第二个参数是 0、undefined 和 null，则直接忽略。</p>\n<p>如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。</p>\n<p>如果最高位无法转换，则直接返回 NaN。</p>\n<h3 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat()\"></a>parseFloat()</h3><p>parseFloat 方法用于将一个字符串转为浮点数。</p>\n<p>如果字符串符合科学计数法，则会进行相应的转换。</p>\n<p>如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回 NaN。</p>\n<h3 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN()\"></a>isNaN()</h3><p>isNaN 方法可以用来判断一个值是否为 NaN。</p>\n<p>判断 NaN 更可靠的方法是，利用 NaN 为唯一不等于自身的值的这个特点，进行判断。</p>\n<h3 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite()\"></a>isFinite()</h3><p>isFinite 方法返回一个布尔值，表示某个值是否为正常的数值。</p>\n<p>除了 Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false，isFinite 对于其他的数值都会返回 true。</p>\n<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><p>字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此。此外，因为字符串是不允许多行的，如果想多行显示，建议使用<code>+</code>连接。</p>\n<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2><p>反斜杠（\\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。</p>\n<p>反斜杠还有三种特殊用法。</p>\n<ul>\n<li>反斜杠后面紧跟三个八进制数（000 到 377），代表一个字符。HHH 对应该字符的 Unicode 码点，比如\\251 表示版权符号。显然，这种方法只能输出 256 种字符。</li>\n<li>\\x 后面紧跟两个十六进制数（00 到 FF），代表一个字符。HH 对应该字符的 Unicode 码点，比如\\xA9 表示版权符号。这种方法也只能输出 256 种字符。</li>\n<li>\\u 后面紧跟四个十六进制数（0000 到 FFFF），代表一个字符。XXXX 对应该字符的 Unicode 码点，比如\\u00A9 表示版权符号。</li>\n</ul>\n<h2 id=\"字符串与数组\"><a href=\"#字符串与数组\" class=\"headerlink\" title=\"字符串与数组\"></a>字符串与数组</h2><p>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从 0 开始）。</p>\n<p>如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回 undefined。</p>\n<p>但是，字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。</p>\n<p>length 属性返回字符串的长度，该属性也是无法改变的</p>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><p>JavaScript 使用 Unicode 字符集。JavaScript 引擎内部，所有字符都用 Unicode 表示。</p>\n<p>JavaScript 不仅以 Unicode 储存字符，还允许直接在程序中使用 Unicode 码点表示字符，即将字符写成\\uxxxx 的形式，其中 xxxx 代表该字符的 Unicode 码点。比如，\\u00A9 代表版权符号。</p>\n<p>我们还需要知道，每个字符在 JavaScript 内部都是以 16 位（即 2 个字节）的 UTF-16 格式储存。也就是说，JavaScript 的单位字符长度固定为 16 位长度，即 2 个字节。对于码点在 U+10000 到 U+10FFFF 之间的字符，长度为 32 位（即 4 个字节），而且前两个字节在 0xD800 到 0xDBFF 之间，后两个字节在 0xDC00 到 0xDFFF 之间。举例来说，码点 U+1D306 对应的字符为 𝌆，它写成 UTF-16 就是 0xD834 0xDF06。<br>对于码点在 U+10000 到 U+10FFFF 之间的字符，JavaScript 总是认为它们是两个字符（length 属性为 2）。所以处理的时候，必须把这一点考虑在内，也就是说，JavaScript 返回的字符串长度可能是不正确的。</p>\n<h2 id=\"Base64-转码\"><a href=\"#Base64-转码\" class=\"headerlink\" title=\"Base64 转码\"></a>Base64 转码</h2><p>Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。</p>\n<p>全局函数 btoa() 能将字符串转为 Base64 编码。<br>全局函数 atob() 能将 Base64 编码转为原来的编码。</p>\n<p>要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b64Encode</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> btoa(<span class=\"built_in\">encodeURIComponent</span>(str))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b64Decode</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(atob(str))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b64Encode(<span class=\"string\">&#x27;你好&#x27;</span>) <span class=\"comment\">// &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;</span></span><br><span class=\"line\">b64Decode(<span class=\"string\">&#x27;JUU0JUJEJUEwJUU1JUE1JUJE&#x27;</span>) <span class=\"comment\">// &quot;你好&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h1><p>注意，空数组（[]）和空对象（{}）对应的布尔值，都是 true。</p>\n<h1 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h1><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。</p>\n<p>Symbol 值通过 Symbol 函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p>\n<p>注意，Symbol 函数前不能使用 new 命令，否则会报错。</p>\n<p>Symbol 值不能与其他类型的值进行运算，会报错。</p>\n<h2 id=\"Symbol-for-，Symbol-keyFor\"><a href=\"#Symbol-for-，Symbol-keyFor\" class=\"headerlink\" title=\"Symbol.for()，Symbol.keyFor()\"></a>Symbol.for()，Symbol.keyFor()</h2><p>有时，我们希望重新使用同一个 Symbol 值，Symbol.for 方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s1) <span class=\"comment\">// &quot;foo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s2) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"undefined-null\"><a href=\"#undefined-null\" class=\"headerlink\" title=\"undefined,null\"></a>undefined,null</h1><p>一般两者没区别，只是按照惯例<strong>undefined</strong>表示一个变量未赋值，<strong>null</strong>表示一个 object 未赋值。</p>\n<h1 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h1><p>简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> o3 = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.prototype)</span><br></pre></td></tr></table></figure>\n\n<p>以上三种方法都能建一个对象。</p>\n<p>对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。</p>\n<p>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</p>\n<p>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">p</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * x</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.p(<span class=\"number\">1</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果属性的值还是一个对象，就形成了链式引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">o1.foo = o2</span><br><span class=\"line\">o1.foo.bar <span class=\"comment\">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象的引用\"><a href=\"#对象的引用\" class=\"headerlink\" title=\"对象的引用\"></a>对象的引用</h2><p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = o1</span><br><span class=\"line\"></span><br><span class=\"line\">o1.a = <span class=\"number\">1</span></span><br><span class=\"line\">o2.a <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">o2.b = <span class=\"number\">2</span></span><br><span class=\"line\">o1.b <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>但是，这种引用只局限于对象，如果两个变量指向同一个原始类型的值。那么，变量这时都是值的拷贝。</p>\n<h2 id=\"表达式还是语句？\"><a href=\"#表达式还是语句？\" class=\"headerlink\" title=\"表达式还是语句？\"></a>表达式还是语句？</h2><p>对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？</p>\n<p>JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含 foo 属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签 foo，指向表达式 123。</p>\n<p>为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;&#123;foo: 123&#125;&#x27;</span>) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;(&#123;foo: 123&#125;)&#x27;</span>) <span class=\"comment\">// &#123;foo: 123&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果没有圆括号，eval 将其理解为一个代码块；加上圆括号以后，就理解成一个对象。</p>\n<h2 id=\"属性的操作\"><a href=\"#属性的操作\" class=\"headerlink\" title=\"属性的操作\"></a>属性的操作</h2><p>读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">p</span>: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;whosyourdaddy&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.p <span class=\"comment\">// &quot;Hello World&quot;</span></span><br><span class=\"line\">obj[<span class=\"string\">&#x27;p&#x27;</span>] <span class=\"comment\">// &quot;Hello World&quot;</span></span><br><span class=\"line\">obj.[foo] <span class=\"comment\">// &quot;whosyourdaddy&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。</p>\n<p>查看一个对象本身的所有属性，可以使用 Object.keys 方法。</p>\n<p>delete 命令用于删除对象的属性(键名和键值一并删除)，删除成功后返回 true。</p>\n<p>注意，删除一个不存在的属性，delete 不报错，而且返回 true。</p>\n<p>另外，需要注意的是，delete 命令只能删除对象本身的属性，无法删除继承的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.toString <span class=\"comment\">// true</span></span><br><span class=\"line\">obj.toString <span class=\"comment\">// function toString() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"in-运算符\"><a href=\"#in-运算符\" class=\"headerlink\" title=\"in 运算符\"></a>in 运算符</h2><p>in 运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回 true，否则返回 false。它的左边是一个字符串，表示属性名，右边是一个对象。</p>\n<p>in 运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象 obj 本身并没有 toString 属性，但是 in 运算符会返回 true，因为这个属性是继承的。</p>\n<p>这时，可以使用对象的 hasOwnProperty 方法判断一下，是否为对象自身的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;toString&#x27;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">&#x27;toString&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性的遍历：for…in-循环\"><a href=\"#属性的遍历：for…in-循环\" class=\"headerlink\" title=\"属性的遍历：for…in 循环\"></a>属性的遍历：for…in 循环</h2><p>for…in 循环用来遍历一个对象的全部属性。</p>\n<p>for…in 循环有两个使用注意点。</p>\n<ul>\n<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>\n<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>\n</ul>\n<p>如果继承的属性是可遍历的，那么就会被 for…in 循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用 for…in 的时候，应该结合使用 hasOwnProperty 方法，在循环内部判断一下，某个属性是否为对象自身的属性。</p>\n<h2 id=\"with-语句\"><a href=\"#with-语句\" class=\"headerlink\" title=\"with 语句\"></a>with 语句</h2><p>with 语句的格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> (对象) &#123;</span><br><span class=\"line\">  语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</p>\n<p>注意，如果 with 区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p>\n<p>单纯从上面的代码块，根本无法判断 x 到底是全局变量，还是对象 obj 的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用 with 语句，可以考虑用一个临时变量代替 with。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> (obj1.obj2.obj3) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p1 + p2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以写成</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = obj1.obj2.obj3</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temp.p1 + temp.p2)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/ruanyf/es6tutorial/blob/3c44084f4b2e318fcbec77b7191b1f2412726c47/docs/symbol.md\">https://github.com/ruanyf/es6tutorial/blob/3c44084f4b2e318fcbec77b7191b1f2412726c47/docs/symbol.md</a></li>\n<li><a href=\"https://wangdoc.com/javascript/types/index.html\">https://wangdoc.com/javascript/types/index.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值)，所以现在有七种，分别为：</p>","more":"<ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>symbol</li>\n<li>undefined</li>\n<li>null</li>\n<li>object 复杂类型，由以上 6 种简单类型数据组成</li>\n</ul>\n<h1 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h1><p>JavaScript 内部，所有数字都是以 64 位浮点数形式存储的，即是整数也是。所以 1 与 1.0 是相同的（1===1.0 返回<code>true</code>），是同一个数。</p>\n<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要小心</p>\n<h2 id=\"范围及精度\"><a href=\"#范围及精度\" class=\"headerlink\" title=\"范围及精度\"></a>范围及精度</h2><p>JavaScript 能够表示的数值范围为 2<sup>1024</sup>到 2<sup>-1023</sup>（开区间），超出这个范围的数无法表示，返回 Infinity 或者 0;</p>\n<p>Javascript 提供 Number 对象 MAX_VALUE 和 MIN_VALUE 属性，返回表示的最大值和最小值</p>\n<p>JavaScript 对-2<sup>53</sup>到 2<sup>53</sup>的数值，都可以精确表示，简单表示的话对 15 位的十进制数都可以精确处理</p>\n<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><p>JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制</p>\n<ul>\n<li>十进制：没有前导 0 的数值。</li>\n<li>八进制：有前缀 0o 或 0O 的数值，或者有前导 0、且只用到 0-7 的八个阿拉伯数字的数值。</li>\n<li>十六进制：有前缀 0x 或 0X 的数值。</li>\n<li>二进制：有前缀 0b 或 0B 的数值。</li>\n</ul>\n<p>默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制</p>\n<p>如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错</p>\n<p>通常来说，有前导 0 的数值会被视为八进制，但是如果前导 0 后面有数字 8 和 9，则该数值被视为十进制</p>\n<h2 id=\"特殊数值\"><a href=\"#特殊数值\" class=\"headerlink\" title=\"特殊数值\"></a>特殊数值</h2><p>NaN 是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。NaN 不等于任何值，包括它本身。</p>\n<p>NaN 与任何数（包括它自己）的运算，得到的都是 NaN。</p>\n<h2 id=\"与数值相关的全局方法\"><a href=\"#与数值相关的全局方法\" class=\"headerlink\" title=\"与数值相关的全局方法\"></a>与数值相关的全局方法</h2><h3 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt()\"></a>parseInt()</h3><p>parseInt 方法用于将字符串转为整数（返回值十进制，或者 NaN）。</p>\n<p>字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</p>\n<p>如果 parseInt 的第一个参数<strong>不是字符串</strong>，会被先转为字符串<strong>String(010)的结果是 9</strong>，对于八进制的前缀 0，尤其需要注意。</p>\n<p>如果<strong>字符串</strong>以 0x 或 0X 开头，parseInt 会将其按照十六进制数解析。如果字符串以 0 开头，将其按照 10 进制解析。</p>\n<p>parseInt 方法还可以接受第二个参数（2 到 36 之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，parseInt 的第二个参数为 10，即默认是十进制转十进制。超出这个范围，则返回 NaN。</p>\n<p>如果第二个参数是 0、undefined 和 null，则直接忽略。</p>\n<p>如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。</p>\n<p>如果最高位无法转换，则直接返回 NaN。</p>\n<h3 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat()\"></a>parseFloat()</h3><p>parseFloat 方法用于将一个字符串转为浮点数。</p>\n<p>如果字符串符合科学计数法，则会进行相应的转换。</p>\n<p>如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回 NaN。</p>\n<h3 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN()\"></a>isNaN()</h3><p>isNaN 方法可以用来判断一个值是否为 NaN。</p>\n<p>判断 NaN 更可靠的方法是，利用 NaN 为唯一不等于自身的值的这个特点，进行判断。</p>\n<h3 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite()\"></a>isFinite()</h3><p>isFinite 方法返回一个布尔值，表示某个值是否为正常的数值。</p>\n<p>除了 Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false，isFinite 对于其他的数值都会返回 true。</p>\n<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><p>字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此。此外，因为字符串是不允许多行的，如果想多行显示，建议使用<code>+</code>连接。</p>\n<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2><p>反斜杠（\\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。</p>\n<p>反斜杠还有三种特殊用法。</p>\n<ul>\n<li>反斜杠后面紧跟三个八进制数（000 到 377），代表一个字符。HHH 对应该字符的 Unicode 码点，比如\\251 表示版权符号。显然，这种方法只能输出 256 种字符。</li>\n<li>\\x 后面紧跟两个十六进制数（00 到 FF），代表一个字符。HH 对应该字符的 Unicode 码点，比如\\xA9 表示版权符号。这种方法也只能输出 256 种字符。</li>\n<li>\\u 后面紧跟四个十六进制数（0000 到 FFFF），代表一个字符。XXXX 对应该字符的 Unicode 码点，比如\\u00A9 表示版权符号。</li>\n</ul>\n<h2 id=\"字符串与数组\"><a href=\"#字符串与数组\" class=\"headerlink\" title=\"字符串与数组\"></a>字符串与数组</h2><p>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从 0 开始）。</p>\n<p>如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回 undefined。</p>\n<p>但是，字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。</p>\n<p>length 属性返回字符串的长度，该属性也是无法改变的</p>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><p>JavaScript 使用 Unicode 字符集。JavaScript 引擎内部，所有字符都用 Unicode 表示。</p>\n<p>JavaScript 不仅以 Unicode 储存字符，还允许直接在程序中使用 Unicode 码点表示字符，即将字符写成\\uxxxx 的形式，其中 xxxx 代表该字符的 Unicode 码点。比如，\\u00A9 代表版权符号。</p>\n<p>我们还需要知道，每个字符在 JavaScript 内部都是以 16 位（即 2 个字节）的 UTF-16 格式储存。也就是说，JavaScript 的单位字符长度固定为 16 位长度，即 2 个字节。对于码点在 U+10000 到 U+10FFFF 之间的字符，长度为 32 位（即 4 个字节），而且前两个字节在 0xD800 到 0xDBFF 之间，后两个字节在 0xDC00 到 0xDFFF 之间。举例来说，码点 U+1D306 对应的字符为 𝌆，它写成 UTF-16 就是 0xD834 0xDF06。<br>对于码点在 U+10000 到 U+10FFFF 之间的字符，JavaScript 总是认为它们是两个字符（length 属性为 2）。所以处理的时候，必须把这一点考虑在内，也就是说，JavaScript 返回的字符串长度可能是不正确的。</p>\n<h2 id=\"Base64-转码\"><a href=\"#Base64-转码\" class=\"headerlink\" title=\"Base64 转码\"></a>Base64 转码</h2><p>Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。</p>\n<p>全局函数 btoa() 能将字符串转为 Base64 编码。<br>全局函数 atob() 能将 Base64 编码转为原来的编码。</p>\n<p>要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b64Encode</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> btoa(<span class=\"built_in\">encodeURIComponent</span>(str))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b64Decode</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(atob(str))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b64Encode(<span class=\"string\">&#x27;你好&#x27;</span>) <span class=\"comment\">// &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;</span></span><br><span class=\"line\">b64Decode(<span class=\"string\">&#x27;JUU0JUJEJUEwJUU1JUE1JUJE&#x27;</span>) <span class=\"comment\">// &quot;你好&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h1><p>注意，空数组（[]）和空对象（{}）对应的布尔值，都是 true。</p>\n<h1 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h1><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。</p>\n<p>Symbol 值通过 Symbol 函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p>\n<p>注意，Symbol 函数前不能使用 new 命令，否则会报错。</p>\n<p>Symbol 值不能与其他类型的值进行运算，会报错。</p>\n<h2 id=\"Symbol-for-，Symbol-keyFor\"><a href=\"#Symbol-for-，Symbol-keyFor\" class=\"headerlink\" title=\"Symbol.for()，Symbol.keyFor()\"></a>Symbol.for()，Symbol.keyFor()</h2><p>有时，我们希望重新使用同一个 Symbol 值，Symbol.for 方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s1) <span class=\"comment\">// &quot;foo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s2) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"undefined-null\"><a href=\"#undefined-null\" class=\"headerlink\" title=\"undefined,null\"></a>undefined,null</h1><p>一般两者没区别，只是按照惯例<strong>undefined</strong>表示一个变量未赋值，<strong>null</strong>表示一个 object 未赋值。</p>\n<h1 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h1><p>简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> o3 = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.prototype)</span><br></pre></td></tr></table></figure>\n\n<p>以上三种方法都能建一个对象。</p>\n<p>对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。</p>\n<p>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</p>\n<p>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">p</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * x</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.p(<span class=\"number\">1</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果属性的值还是一个对象，就形成了链式引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">o1.foo = o2</span><br><span class=\"line\">o1.foo.bar <span class=\"comment\">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象的引用\"><a href=\"#对象的引用\" class=\"headerlink\" title=\"对象的引用\"></a>对象的引用</h2><p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = o1</span><br><span class=\"line\"></span><br><span class=\"line\">o1.a = <span class=\"number\">1</span></span><br><span class=\"line\">o2.a <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">o2.b = <span class=\"number\">2</span></span><br><span class=\"line\">o1.b <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>但是，这种引用只局限于对象，如果两个变量指向同一个原始类型的值。那么，变量这时都是值的拷贝。</p>\n<h2 id=\"表达式还是语句？\"><a href=\"#表达式还是语句？\" class=\"headerlink\" title=\"表达式还是语句？\"></a>表达式还是语句？</h2><p>对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？</p>\n<p>JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含 foo 属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签 foo，指向表达式 123。</p>\n<p>为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;&#123;foo: 123&#125;&#x27;</span>) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;(&#123;foo: 123&#125;)&#x27;</span>) <span class=\"comment\">// &#123;foo: 123&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果没有圆括号，eval 将其理解为一个代码块；加上圆括号以后，就理解成一个对象。</p>\n<h2 id=\"属性的操作\"><a href=\"#属性的操作\" class=\"headerlink\" title=\"属性的操作\"></a>属性的操作</h2><p>读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">p</span>: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;whosyourdaddy&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.p <span class=\"comment\">// &quot;Hello World&quot;</span></span><br><span class=\"line\">obj[<span class=\"string\">&#x27;p&#x27;</span>] <span class=\"comment\">// &quot;Hello World&quot;</span></span><br><span class=\"line\">obj.[foo] <span class=\"comment\">// &quot;whosyourdaddy&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。</p>\n<p>查看一个对象本身的所有属性，可以使用 Object.keys 方法。</p>\n<p>delete 命令用于删除对象的属性(键名和键值一并删除)，删除成功后返回 true。</p>\n<p>注意，删除一个不存在的属性，delete 不报错，而且返回 true。</p>\n<p>另外，需要注意的是，delete 命令只能删除对象本身的属性，无法删除继承的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.toString <span class=\"comment\">// true</span></span><br><span class=\"line\">obj.toString <span class=\"comment\">// function toString() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"in-运算符\"><a href=\"#in-运算符\" class=\"headerlink\" title=\"in 运算符\"></a>in 运算符</h2><p>in 运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回 true，否则返回 false。它的左边是一个字符串，表示属性名，右边是一个对象。</p>\n<p>in 运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象 obj 本身并没有 toString 属性，但是 in 运算符会返回 true，因为这个属性是继承的。</p>\n<p>这时，可以使用对象的 hasOwnProperty 方法判断一下，是否为对象自身的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;toString&#x27;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">&#x27;toString&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性的遍历：for…in-循环\"><a href=\"#属性的遍历：for…in-循环\" class=\"headerlink\" title=\"属性的遍历：for…in 循环\"></a>属性的遍历：for…in 循环</h2><p>for…in 循环用来遍历一个对象的全部属性。</p>\n<p>for…in 循环有两个使用注意点。</p>\n<ul>\n<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>\n<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>\n</ul>\n<p>如果继承的属性是可遍历的，那么就会被 for…in 循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用 for…in 的时候，应该结合使用 hasOwnProperty 方法，在循环内部判断一下，某个属性是否为对象自身的属性。</p>\n<h2 id=\"with-语句\"><a href=\"#with-语句\" class=\"headerlink\" title=\"with 语句\"></a>with 语句</h2><p>with 语句的格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> (对象) &#123;</span><br><span class=\"line\">  语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</p>\n<p>注意，如果 with 区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p>\n<p>单纯从上面的代码块，根本无法判断 x 到底是全局变量，还是对象 obj 的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用 with 语句，可以考虑用一个临时变量代替 with。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> (obj1.obj2.obj3) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p1 + p2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以写成</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = obj1.obj2.obj3</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temp.p1 + temp.p2)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/ruanyf/es6tutorial/blob/3c44084f4b2e318fcbec77b7191b1f2412726c47/docs/symbol.md\">https://github.com/ruanyf/es6tutorial/blob/3c44084f4b2e318fcbec77b7191b1f2412726c47/docs/symbol.md</a></li>\n<li><a href=\"https://wangdoc.com/javascript/types/index.html\">https://wangdoc.com/javascript/types/index.html</a></li>\n</ul>"},{"title":"JS里的数据类型转换","date":"2018-11-26T16:00:00.000Z","updated":"2018-11-26T16:00:00.000Z","_content":"\nJS 里有许多方式可以实现数据类型的转换。以下主要讲的是`number`、`string`、`boolean`这三种类型的转换。\n\n<!-- more -->\n\n任意类型 x\n\n# x 转换成 number\n\n主要是 string 转换成 number\n\n- 通过`Number(x)`\n\n```javascript\nNumber('123') // 123\nNumber('') // 0\nNumber('0x11') // 17\nNumber('0b11') // 3\nNumber('0o11') // 9\nNumber('foo') // NaN\nNumber('100a') // NaN\n```\n\n- 通过`parseInt(x,10)` [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n- 通过`parseFloat(x)` [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)\n- 通过数值运算符`+`或者`x-0`\n\n# x 转换成 boolean\n\n- 通过 Boolean(x)\n- 通过`!!x`\n\n5 个 falsy 值：0,NaN,null,'',undefined，这五个值转换成布尔值都为 false，其余都是 true\n\n# x 转换成 string\n\n主要是 number 转换成 string，object 转换后的值是`[object Object]`\n\n- x.toString()\n- String(x)\n- x + ''\n\n# 关于对象和普通类型数据的区别\n\nobject 是复杂数据类型，普通类型的数据是简单数据类型，两者在内存中的存放位置是不一样的。\n\nJS 引擎将内存分为代码区和数据区。数据区可分为堆内存和栈内存。普通类型的数据是存储在 stack（栈内存）中的，而 object 的数据是存储在 heap（堆内存）中，其地址是存在栈内存中。\n\n我们通过以下例子，更深入理解两者区别：\n\n```javascript\nvar a = 1\nvar b = a //b=1\nb = 2 //不会影响 a\n//请问 a 显示是几？  2\n```\n\n```javascript\nvar a = { name: 'a' } //在栈内存有一个地址，引用堆内存中的数据{name: 'a'}\nvar b = a // 在栈内存有一个与a一样的地址，引用堆内存中的数据{name: 'a'}\nb = { name: 'b' } //在栈内存有一个与b一样的地址，引用堆内存中的数据{name: 'b'}\n//请问现在 a.name 是多少？  'a'\n```\n\n```javascript\nvar a = { name: 'a' }\nvar b = a\nb.name = 'b' //修改了其引用地址的数据的name属性\n//请问现在 a.name 是多少？ 'b'\n```\n\n```javascript\nvar a = { name: 'a' }\nvar b = a\nb = null //只是在栈内存中，b的地址的值变为null，堆内存中的数据没用改动\n//请问现在 a 是什么？ 'a'\n```\n\n上面的第一个例子，改变 b 不会影响 a，我们把它称为深拷贝，基本类型的赋值操作都是深拷贝。\n\n上面第二个例子，改变 b 影响 a，我们把它称为浅拷贝。对象操作也有深拷贝,就是对 Heap 内存也进行完全的拷贝。\n\n上面第四个例子，如果加上`a=null`，则堆内存中的数据没有被引用，其内存空间将会被回收，至于什么时候回收？不知道。在 IE 里有个内存泄漏的 Bug，当绑定事件在结束后没有加`xxx=null`,在页面关闭时，其所占内存不会被释放，除非关闭整个浏览器。\n","source":"_posts/JS里的数据类型转换.md","raw":"---\ntitle: JS里的数据类型转换\ndate: 2018-11-27 00:00:00\nupdated: 2018-11-27 00:00:00\ntags:\n  - JavaScript\n  - 内存\n---\n\nJS 里有许多方式可以实现数据类型的转换。以下主要讲的是`number`、`string`、`boolean`这三种类型的转换。\n\n<!-- more -->\n\n任意类型 x\n\n# x 转换成 number\n\n主要是 string 转换成 number\n\n- 通过`Number(x)`\n\n```javascript\nNumber('123') // 123\nNumber('') // 0\nNumber('0x11') // 17\nNumber('0b11') // 3\nNumber('0o11') // 9\nNumber('foo') // NaN\nNumber('100a') // NaN\n```\n\n- 通过`parseInt(x,10)` [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n- 通过`parseFloat(x)` [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)\n- 通过数值运算符`+`或者`x-0`\n\n# x 转换成 boolean\n\n- 通过 Boolean(x)\n- 通过`!!x`\n\n5 个 falsy 值：0,NaN,null,'',undefined，这五个值转换成布尔值都为 false，其余都是 true\n\n# x 转换成 string\n\n主要是 number 转换成 string，object 转换后的值是`[object Object]`\n\n- x.toString()\n- String(x)\n- x + ''\n\n# 关于对象和普通类型数据的区别\n\nobject 是复杂数据类型，普通类型的数据是简单数据类型，两者在内存中的存放位置是不一样的。\n\nJS 引擎将内存分为代码区和数据区。数据区可分为堆内存和栈内存。普通类型的数据是存储在 stack（栈内存）中的，而 object 的数据是存储在 heap（堆内存）中，其地址是存在栈内存中。\n\n我们通过以下例子，更深入理解两者区别：\n\n```javascript\nvar a = 1\nvar b = a //b=1\nb = 2 //不会影响 a\n//请问 a 显示是几？  2\n```\n\n```javascript\nvar a = { name: 'a' } //在栈内存有一个地址，引用堆内存中的数据{name: 'a'}\nvar b = a // 在栈内存有一个与a一样的地址，引用堆内存中的数据{name: 'a'}\nb = { name: 'b' } //在栈内存有一个与b一样的地址，引用堆内存中的数据{name: 'b'}\n//请问现在 a.name 是多少？  'a'\n```\n\n```javascript\nvar a = { name: 'a' }\nvar b = a\nb.name = 'b' //修改了其引用地址的数据的name属性\n//请问现在 a.name 是多少？ 'b'\n```\n\n```javascript\nvar a = { name: 'a' }\nvar b = a\nb = null //只是在栈内存中，b的地址的值变为null，堆内存中的数据没用改动\n//请问现在 a 是什么？ 'a'\n```\n\n上面的第一个例子，改变 b 不会影响 a，我们把它称为深拷贝，基本类型的赋值操作都是深拷贝。\n\n上面第二个例子，改变 b 影响 a，我们把它称为浅拷贝。对象操作也有深拷贝,就是对 Heap 内存也进行完全的拷贝。\n\n上面第四个例子，如果加上`a=null`，则堆内存中的数据没有被引用，其内存空间将会被回收，至于什么时候回收？不知道。在 IE 里有个内存泄漏的 Bug，当绑定事件在结束后没有加`xxx=null`,在页面关闭时，其所占内存不会被释放，除非关闭整个浏览器。\n","slug":"JS里的数据类型转换","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwp000ik4u97ry63pcl","content":"<p>JS 里有许多方式可以实现数据类型的转换。以下主要讲的是<code>number</code>、<code>string</code>、<code>boolean</code>这三种类型的转换。</p>\n<span id=\"more\"></span>\n\n<p>任意类型 x</p>\n<h1 id=\"x-转换成-number\"><a href=\"#x-转换成-number\" class=\"headerlink\" title=\"x 转换成 number\"></a>x 转换成 number</h1><p>主要是 string 转换成 number</p>\n<ul>\n<li>通过<code>Number(x)</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;123&#x27;</span>) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;0x11&#x27;</span>) <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;0b11&#x27;</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;0o11&#x27;</span>) <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;foo&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;100a&#x27;</span>) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过<code>parseInt(x,10)</code> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">MDN</a></li>\n<li>通过<code>parseFloat(x)</code> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">MDN</a></li>\n<li>通过数值运算符<code>+</code>或者<code>x-0</code></li>\n</ul>\n<h1 id=\"x-转换成-boolean\"><a href=\"#x-转换成-boolean\" class=\"headerlink\" title=\"x 转换成 boolean\"></a>x 转换成 boolean</h1><ul>\n<li>通过 Boolean(x)</li>\n<li>通过<code>!!x</code></li>\n</ul>\n<p>5 个 falsy 值：0,NaN,null,’’,undefined，这五个值转换成布尔值都为 false，其余都是 true</p>\n<h1 id=\"x-转换成-string\"><a href=\"#x-转换成-string\" class=\"headerlink\" title=\"x 转换成 string\"></a>x 转换成 string</h1><p>主要是 number 转换成 string，object 转换后的值是<code>[object Object]</code></p>\n<ul>\n<li>x.toString()</li>\n<li>String(x)</li>\n<li>x + ‘’</li>\n</ul>\n<h1 id=\"关于对象和普通类型数据的区别\"><a href=\"#关于对象和普通类型数据的区别\" class=\"headerlink\" title=\"关于对象和普通类型数据的区别\"></a>关于对象和普通类型数据的区别</h1><p>object 是复杂数据类型，普通类型的数据是简单数据类型，两者在内存中的存放位置是不一样的。</p>\n<p>JS 引擎将内存分为代码区和数据区。数据区可分为堆内存和栈内存。普通类型的数据是存储在 stack（栈内存）中的，而 object 的数据是存储在 heap（堆内存）中，其地址是存在栈内存中。</p>\n<p>我们通过以下例子，更深入理解两者区别：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a <span class=\"comment\">//b=1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span> <span class=\"comment\">//不会影响 a</span></span><br><span class=\"line\"><span class=\"comment\">//请问 a 显示是几？  2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125; <span class=\"comment\">//在栈内存有一个地址，引用堆内存中的数据&#123;name: &#x27;a&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a <span class=\"comment\">// 在栈内存有一个与a一样的地址，引用堆内存中的数据&#123;name: &#x27;a&#x27;&#125;</span></span><br><span class=\"line\">b = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;b&#x27;</span> &#125; <span class=\"comment\">//在栈内存有一个与b一样的地址，引用堆内存中的数据&#123;name: &#x27;b&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//请问现在 a.name 是多少？  &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">b.name = <span class=\"string\">&#x27;b&#x27;</span> <span class=\"comment\">//修改了其引用地址的数据的name属性</span></span><br><span class=\"line\"><span class=\"comment\">//请问现在 a.name 是多少？ &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">b = <span class=\"literal\">null</span> <span class=\"comment\">//只是在栈内存中，b的地址的值变为null，堆内存中的数据没用改动</span></span><br><span class=\"line\"><span class=\"comment\">//请问现在 a 是什么？ &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的第一个例子，改变 b 不会影响 a，我们把它称为深拷贝，基本类型的赋值操作都是深拷贝。</p>\n<p>上面第二个例子，改变 b 影响 a，我们把它称为浅拷贝。对象操作也有深拷贝,就是对 Heap 内存也进行完全的拷贝。</p>\n<p>上面第四个例子，如果加上<code>a=null</code>，则堆内存中的数据没有被引用，其内存空间将会被回收，至于什么时候回收？不知道。在 IE 里有个内存泄漏的 Bug，当绑定事件在结束后没有加<code>xxx=null</code>,在页面关闭时，其所占内存不会被释放，除非关闭整个浏览器。</p>\n","site":{"data":{}},"excerpt":"<p>JS 里有许多方式可以实现数据类型的转换。以下主要讲的是<code>number</code>、<code>string</code>、<code>boolean</code>这三种类型的转换。</p>","more":"<p>任意类型 x</p>\n<h1 id=\"x-转换成-number\"><a href=\"#x-转换成-number\" class=\"headerlink\" title=\"x 转换成 number\"></a>x 转换成 number</h1><p>主要是 string 转换成 number</p>\n<ul>\n<li>通过<code>Number(x)</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;123&#x27;</span>) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;0x11&#x27;</span>) <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;0b11&#x27;</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;0o11&#x27;</span>) <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;foo&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;100a&#x27;</span>) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过<code>parseInt(x,10)</code> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">MDN</a></li>\n<li>通过<code>parseFloat(x)</code> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">MDN</a></li>\n<li>通过数值运算符<code>+</code>或者<code>x-0</code></li>\n</ul>\n<h1 id=\"x-转换成-boolean\"><a href=\"#x-转换成-boolean\" class=\"headerlink\" title=\"x 转换成 boolean\"></a>x 转换成 boolean</h1><ul>\n<li>通过 Boolean(x)</li>\n<li>通过<code>!!x</code></li>\n</ul>\n<p>5 个 falsy 值：0,NaN,null,’’,undefined，这五个值转换成布尔值都为 false，其余都是 true</p>\n<h1 id=\"x-转换成-string\"><a href=\"#x-转换成-string\" class=\"headerlink\" title=\"x 转换成 string\"></a>x 转换成 string</h1><p>主要是 number 转换成 string，object 转换后的值是<code>[object Object]</code></p>\n<ul>\n<li>x.toString()</li>\n<li>String(x)</li>\n<li>x + ‘’</li>\n</ul>\n<h1 id=\"关于对象和普通类型数据的区别\"><a href=\"#关于对象和普通类型数据的区别\" class=\"headerlink\" title=\"关于对象和普通类型数据的区别\"></a>关于对象和普通类型数据的区别</h1><p>object 是复杂数据类型，普通类型的数据是简单数据类型，两者在内存中的存放位置是不一样的。</p>\n<p>JS 引擎将内存分为代码区和数据区。数据区可分为堆内存和栈内存。普通类型的数据是存储在 stack（栈内存）中的，而 object 的数据是存储在 heap（堆内存）中，其地址是存在栈内存中。</p>\n<p>我们通过以下例子，更深入理解两者区别：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a <span class=\"comment\">//b=1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span> <span class=\"comment\">//不会影响 a</span></span><br><span class=\"line\"><span class=\"comment\">//请问 a 显示是几？  2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125; <span class=\"comment\">//在栈内存有一个地址，引用堆内存中的数据&#123;name: &#x27;a&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a <span class=\"comment\">// 在栈内存有一个与a一样的地址，引用堆内存中的数据&#123;name: &#x27;a&#x27;&#125;</span></span><br><span class=\"line\">b = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;b&#x27;</span> &#125; <span class=\"comment\">//在栈内存有一个与b一样的地址，引用堆内存中的数据&#123;name: &#x27;b&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//请问现在 a.name 是多少？  &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">b.name = <span class=\"string\">&#x27;b&#x27;</span> <span class=\"comment\">//修改了其引用地址的数据的name属性</span></span><br><span class=\"line\"><span class=\"comment\">//请问现在 a.name 是多少？ &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">b = <span class=\"literal\">null</span> <span class=\"comment\">//只是在栈内存中，b的地址的值变为null，堆内存中的数据没用改动</span></span><br><span class=\"line\"><span class=\"comment\">//请问现在 a 是什么？ &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的第一个例子，改变 b 不会影响 a，我们把它称为深拷贝，基本类型的赋值操作都是深拷贝。</p>\n<p>上面第二个例子，改变 b 影响 a，我们把它称为浅拷贝。对象操作也有深拷贝,就是对 Heap 内存也进行完全的拷贝。</p>\n<p>上面第四个例子，如果加上<code>a=null</code>，则堆内存中的数据没有被引用，其内存空间将会被回收，至于什么时候回收？不知道。在 IE 里有个内存泄漏的 Bug，当绑定事件在结束后没有加<code>xxx=null</code>,在页面关闭时，其所占内存不会被释放，除非关闭整个浏览器。</p>"},{"title":"JavaScript 中的生成器","date":"2019-06-05T16:00:00.000Z","updated":"2019-06-05T16:00:00.000Z","_content":"\n在看公司之前项目的时候，发现代码中某些函数前有`*`符号，然后函数内部也有`yield`，心想这是什么写法，难道 JavaScript 又更新了吗，翻了一下资料，发现这写法早就有了，在 ES6 中叫生成器。\n\n<!-- more -->\n\nGenerator 函数有多种理解角度。\n\n从语法上，可以理解 Generator 函数是一个状态机，封装了多个内部状态。\n\n从形式上，Generator 函数是一个普通函数，但有个特征，一是 function 关键字与函数名之间有一个星号`function* foo(x, y) { ··· }`；二是函数内部使用`yield`表达式，定义不同的内部状态。\n\nGenerator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该**函数并不执行，返回的也不是函数运行结果**，而**是一个指向内部状态的指针对象**。 下一步，必须调用遍历器对象的 next 方法，使得指针移向下一个状态。也就是说，每次调用 next 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 yield 表达式（或 return 语句）为止。换言之，Generator 函数是分段执行的，yield 表达式是暂停执行的标记，而 next 方法可以恢复执行。\n\nyield 表达式后面的表达式，只有当调用 next 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。\n\nyield 表达式与 return 语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到 yield，函数暂停执行，下一次再从该位置继续向后执行，而 return 语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）return 语句，但是可以执行多次（或者说多个）yield 表达式。正常函数只能返回一个值，因为只能执行一次 return；Generator 函数可以返回一系列的值，因为可以有任意多个 yield。从另一个角度看，也可以说 Generator 生成了一系列的值。\n\n任意一个对象的 Symbol.iterator 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。\n\n```javascript\nvar myIterable = {}\nmyIterable[Symbol.iterator] = function* () {\n  yield 1\n  yield 2\n  yield 3\n}\n\nfor (let value of myIterable) {\n  console.log(value)\n}\n// 1\n// 2\n// 3\n\n//or\n\nconsole.log([...myIterable]) // [1, 2, 3]\n```\n\nyield 表达式本身没有返回值，或者说总是返回 undefined。next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n\n```javascript\nfunction* foo(x) {\n  var y = 2 * (yield x + 1)\n  var z = yield y / 3\n  return x + y + z\n}\n\nvar a = foo(5)\na.next() // Object{value:6, done:false}\na.next() // Object{value:NaN, done:false}\na.next() // Object{value:NaN, done:true}\nvar b = foo(5)\nb.next() // { value:6, done:false }\nb.next(12) // { value:8, done:false }  2*12/3\nb.next(13) // { value:42, done:true } 5 + 24 +13\n```\n\nfor...of 循环可以自动遍历 Generator 函数运行时生成的 Iterator 对象，且此时不再需要调用 next 方法。\n","source":"_posts/JavaScript 中的生成器.md","raw":"---\ntitle: JavaScript 中的生成器\ndate: 2019-06-06 00:00:00\nupdated: 2019-06-06 00:00:00\ntags:\n  - ES6\n  - JavaScript\n  - 生成器\n---\n\n在看公司之前项目的时候，发现代码中某些函数前有`*`符号，然后函数内部也有`yield`，心想这是什么写法，难道 JavaScript 又更新了吗，翻了一下资料，发现这写法早就有了，在 ES6 中叫生成器。\n\n<!-- more -->\n\nGenerator 函数有多种理解角度。\n\n从语法上，可以理解 Generator 函数是一个状态机，封装了多个内部状态。\n\n从形式上，Generator 函数是一个普通函数，但有个特征，一是 function 关键字与函数名之间有一个星号`function* foo(x, y) { ··· }`；二是函数内部使用`yield`表达式，定义不同的内部状态。\n\nGenerator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该**函数并不执行，返回的也不是函数运行结果**，而**是一个指向内部状态的指针对象**。 下一步，必须调用遍历器对象的 next 方法，使得指针移向下一个状态。也就是说，每次调用 next 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 yield 表达式（或 return 语句）为止。换言之，Generator 函数是分段执行的，yield 表达式是暂停执行的标记，而 next 方法可以恢复执行。\n\nyield 表达式后面的表达式，只有当调用 next 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。\n\nyield 表达式与 return 语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到 yield，函数暂停执行，下一次再从该位置继续向后执行，而 return 语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）return 语句，但是可以执行多次（或者说多个）yield 表达式。正常函数只能返回一个值，因为只能执行一次 return；Generator 函数可以返回一系列的值，因为可以有任意多个 yield。从另一个角度看，也可以说 Generator 生成了一系列的值。\n\n任意一个对象的 Symbol.iterator 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。\n\n```javascript\nvar myIterable = {}\nmyIterable[Symbol.iterator] = function* () {\n  yield 1\n  yield 2\n  yield 3\n}\n\nfor (let value of myIterable) {\n  console.log(value)\n}\n// 1\n// 2\n// 3\n\n//or\n\nconsole.log([...myIterable]) // [1, 2, 3]\n```\n\nyield 表达式本身没有返回值，或者说总是返回 undefined。next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n\n```javascript\nfunction* foo(x) {\n  var y = 2 * (yield x + 1)\n  var z = yield y / 3\n  return x + y + z\n}\n\nvar a = foo(5)\na.next() // Object{value:6, done:false}\na.next() // Object{value:NaN, done:false}\na.next() // Object{value:NaN, done:true}\nvar b = foo(5)\nb.next() // { value:6, done:false }\nb.next(12) // { value:8, done:false }  2*12/3\nb.next(13) // { value:42, done:true } 5 + 24 +13\n```\n\nfor...of 循环可以自动遍历 Generator 函数运行时生成的 Iterator 对象，且此时不再需要调用 next 方法。\n","slug":"JavaScript 中的生成器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwr000kk4u9bjhq5e77","content":"<p>在看公司之前项目的时候，发现代码中某些函数前有<code>*</code>符号，然后函数内部也有<code>yield</code>，心想这是什么写法，难道 JavaScript 又更新了吗，翻了一下资料，发现这写法早就有了，在 ES6 中叫生成器。</p>\n<span id=\"more\"></span>\n\n<p>Generator 函数有多种理解角度。</p>\n<p>从语法上，可以理解 Generator 函数是一个状态机，封装了多个内部状态。</p>\n<p>从形式上，Generator 函数是一个普通函数，但有个特征，一是 function 关键字与函数名之间有一个星号<code>function* foo(x, y) &#123; ··· &#125;</code>；二是函数内部使用<code>yield</code>表达式，定义不同的内部状态。</p>\n<p>Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该<strong>函数并不执行，返回的也不是函数运行结果</strong>，而<strong>是一个指向内部状态的指针对象</strong>。 下一步，必须调用遍历器对象的 next 方法，使得指针移向下一个状态。也就是说，每次调用 next 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 yield 表达式（或 return 语句）为止。换言之，Generator 函数是分段执行的，yield 表达式是暂停执行的标记，而 next 方法可以恢复执行。</p>\n<p>yield 表达式后面的表达式，只有当调用 next 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</p>\n<p>yield 表达式与 return 语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到 yield，函数暂停执行，下一次再从该位置继续向后执行，而 return 语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）return 语句，但是可以执行多次（或者说多个）yield 表达式。正常函数只能返回一个值，因为只能执行一次 return；Generator 函数可以返回一系列的值，因为可以有任意多个 yield。从另一个角度看，也可以说 Generator 生成了一系列的值。</p>\n<p>任意一个对象的 Symbol.iterator 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myIterable = &#123;&#125;</span><br><span class=\"line\">myIterable[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> myIterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...myIterable]) <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>yield 表达式本身没有返回值，或者说总是返回 undefined。next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> x + <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> z = <span class=\"keyword\">yield</span> y / <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y + z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo(<span class=\"number\">5</span>)</span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:6, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = foo(<span class=\"number\">5</span>)</span><br><span class=\"line\">b.next() <span class=\"comment\">// &#123; value:6, done:false &#125;</span></span><br><span class=\"line\">b.next(<span class=\"number\">12</span>) <span class=\"comment\">// &#123; value:8, done:false &#125;  2*12/3</span></span><br><span class=\"line\">b.next(<span class=\"number\">13</span>) <span class=\"comment\">// &#123; value:42, done:true &#125; 5 + 24 +13</span></span><br></pre></td></tr></table></figure>\n\n<p>for…of 循环可以自动遍历 Generator 函数运行时生成的 Iterator 对象，且此时不再需要调用 next 方法。</p>\n","site":{"data":{}},"excerpt":"<p>在看公司之前项目的时候，发现代码中某些函数前有<code>*</code>符号，然后函数内部也有<code>yield</code>，心想这是什么写法，难道 JavaScript 又更新了吗，翻了一下资料，发现这写法早就有了，在 ES6 中叫生成器。</p>","more":"<p>Generator 函数有多种理解角度。</p>\n<p>从语法上，可以理解 Generator 函数是一个状态机，封装了多个内部状态。</p>\n<p>从形式上，Generator 函数是一个普通函数，但有个特征，一是 function 关键字与函数名之间有一个星号<code>function* foo(x, y) &#123; ··· &#125;</code>；二是函数内部使用<code>yield</code>表达式，定义不同的内部状态。</p>\n<p>Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该<strong>函数并不执行，返回的也不是函数运行结果</strong>，而<strong>是一个指向内部状态的指针对象</strong>。 下一步，必须调用遍历器对象的 next 方法，使得指针移向下一个状态。也就是说，每次调用 next 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 yield 表达式（或 return 语句）为止。换言之，Generator 函数是分段执行的，yield 表达式是暂停执行的标记，而 next 方法可以恢复执行。</p>\n<p>yield 表达式后面的表达式，只有当调用 next 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</p>\n<p>yield 表达式与 return 语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到 yield，函数暂停执行，下一次再从该位置继续向后执行，而 return 语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）return 语句，但是可以执行多次（或者说多个）yield 表达式。正常函数只能返回一个值，因为只能执行一次 return；Generator 函数可以返回一系列的值，因为可以有任意多个 yield。从另一个角度看，也可以说 Generator 生成了一系列的值。</p>\n<p>任意一个对象的 Symbol.iterator 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myIterable = &#123;&#125;</span><br><span class=\"line\">myIterable[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> myIterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...myIterable]) <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>yield 表达式本身没有返回值，或者说总是返回 undefined。next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> x + <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> z = <span class=\"keyword\">yield</span> y / <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y + z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo(<span class=\"number\">5</span>)</span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:6, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = foo(<span class=\"number\">5</span>)</span><br><span class=\"line\">b.next() <span class=\"comment\">// &#123; value:6, done:false &#125;</span></span><br><span class=\"line\">b.next(<span class=\"number\">12</span>) <span class=\"comment\">// &#123; value:8, done:false &#125;  2*12/3</span></span><br><span class=\"line\">b.next(<span class=\"number\">13</span>) <span class=\"comment\">// &#123; value:42, done:true &#125; 5 + 24 +13</span></span><br></pre></td></tr></table></figure>\n\n<p>for…of 循环可以自动遍历 Generator 函数运行时生成的 Iterator 对象，且此时不再需要调用 next 方法。</p>"},{"title":"JavaScript 深拷贝","date":"2020-07-20T16:00:00.000Z","updated":"2020-07-20T16:00:00.000Z","_content":"\n对象的拷贝不像数值或字符串一样，可以用类似 `let newValue = value` 来进行拷贝，此时 `newValue` 的值只是 `value` 的引用，当我们修改 `newValue` 的值时，`value` 的值也会改变，这不是我们所想要的结果。\n\n<!-- more -->\n\n### 使用 JSON.parse()\n\n当我们确定所拷贝的对象不是很复杂的时候，可以使用 `JSON.parse(JSON.stringify(object))` 来拷贝对象，但是：\n\n1. 当被拷贝的对象中有 undefined，function，symbol 等类型时，由于 JSON 不支持，会导致拷贝的对象不完整，比如：\n\n   ```\n    let a = {}\n    a.a = 1\n    a.b = undefined\n    a.c = ()=>{}\n\n    JSON.parse(JSON.stringify(a)) // 得到的对象{a:1}\n   ```\n\n### deepCopy 函数\n\n大体思路是递归调用\"浅拷贝\"。\n\n```\n　function deepCopy(p, c) {\n\n　　　　var c = c || {};\n\n　　　　for (var i in p) {\n\n　　　　　　if (typeof p[i] === 'object') {\n\n　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n\n　　　　　　　　deepCopy(p[i], c[i]);\n\n　　　　　　} else {\n\n　　　　　　　　　c[i] = p[i];\n\n　　　　　　}\n　　　　}\n\n　　　　return c;\n　}\n```\n\n上面的函数一般场景也能用，但是复杂的场景如：`File()、Set()、Map()` 等可能就有问题了，我们可以使用现成的工具函数，如[lodash 克隆](https://github.com/lodash/lodash/blob/master/.internal/baseClone.js)\n\n> 引用\n\n- [ES6 时代，你真的会克隆对象吗(二)](https://segmentfault.com/a/1190000013131068)\n- [Javascript 面向对象编程（三）：非构造函数的继承](https://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html)\n","source":"_posts/JavaScript 深拷贝.md","raw":"---\ntitle: JavaScript 深拷贝\ndate: 2020-07-21 00:00:00\nupdated: 2020-07-21 00:00:00\ntags:\n  - JavaScript\n  - 深拷贝\n---\n\n对象的拷贝不像数值或字符串一样，可以用类似 `let newValue = value` 来进行拷贝，此时 `newValue` 的值只是 `value` 的引用，当我们修改 `newValue` 的值时，`value` 的值也会改变，这不是我们所想要的结果。\n\n<!-- more -->\n\n### 使用 JSON.parse()\n\n当我们确定所拷贝的对象不是很复杂的时候，可以使用 `JSON.parse(JSON.stringify(object))` 来拷贝对象，但是：\n\n1. 当被拷贝的对象中有 undefined，function，symbol 等类型时，由于 JSON 不支持，会导致拷贝的对象不完整，比如：\n\n   ```\n    let a = {}\n    a.a = 1\n    a.b = undefined\n    a.c = ()=>{}\n\n    JSON.parse(JSON.stringify(a)) // 得到的对象{a:1}\n   ```\n\n### deepCopy 函数\n\n大体思路是递归调用\"浅拷贝\"。\n\n```\n　function deepCopy(p, c) {\n\n　　　　var c = c || {};\n\n　　　　for (var i in p) {\n\n　　　　　　if (typeof p[i] === 'object') {\n\n　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n\n　　　　　　　　deepCopy(p[i], c[i]);\n\n　　　　　　} else {\n\n　　　　　　　　　c[i] = p[i];\n\n　　　　　　}\n　　　　}\n\n　　　　return c;\n　}\n```\n\n上面的函数一般场景也能用，但是复杂的场景如：`File()、Set()、Map()` 等可能就有问题了，我们可以使用现成的工具函数，如[lodash 克隆](https://github.com/lodash/lodash/blob/master/.internal/baseClone.js)\n\n> 引用\n\n- [ES6 时代，你真的会克隆对象吗(二)](https://segmentfault.com/a/1190000013131068)\n- [Javascript 面向对象编程（三）：非构造函数的继承](https://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html)\n","slug":"JavaScript 深拷贝","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpws000nk4u90dld4a61","content":"<p>对象的拷贝不像数值或字符串一样，可以用类似 <code>let newValue = value</code> 来进行拷贝，此时 <code>newValue</code> 的值只是 <code>value</code> 的引用，当我们修改 <code>newValue</code> 的值时，<code>value</code> 的值也会改变，这不是我们所想要的结果。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"使用-JSON-parse\"><a href=\"#使用-JSON-parse\" class=\"headerlink\" title=\"使用 JSON.parse()\"></a>使用 JSON.parse()</h3><p>当我们确定所拷贝的对象不是很复杂的时候，可以使用 <code>JSON.parse(JSON.stringify(object))</code> 来拷贝对象，但是：</p>\n<ol>\n<li><p>当被拷贝的对象中有 undefined，function，symbol 等类型时，由于 JSON 不支持，会导致拷贝的对象不完整，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = &#123;&#125;</span><br><span class=\"line\">a.a = 1</span><br><span class=\"line\">a.b = undefined</span><br><span class=\"line\">a.c = ()=&gt;&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(a)) // 得到的对象&#123;a:1&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"deepCopy-函数\"><a href=\"#deepCopy-函数\" class=\"headerlink\" title=\"deepCopy 函数\"></a>deepCopy 函数</h3><p>大体思路是递归调用”浅拷贝”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　function deepCopy(p, c) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　var c = c || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　for (var i in p) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　if (typeof p[i] === &#x27;object&#x27;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　　　deepCopy(p[i], c[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　&#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　　　　c[i] = p[i];</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　&#125;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　return c;</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的函数一般场景也能用，但是复杂的场景如：<code>File()、Set()、Map()</code> 等可能就有问题了，我们可以使用现成的工具函数，如<a href=\"https://github.com/lodash/lodash/blob/master/.internal/baseClone.js\">lodash 克隆</a></p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000013131068\">ES6 时代，你真的会克隆对象吗(二)</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html\">Javascript 面向对象编程（三）：非构造函数的继承</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>对象的拷贝不像数值或字符串一样，可以用类似 <code>let newValue = value</code> 来进行拷贝，此时 <code>newValue</code> 的值只是 <code>value</code> 的引用，当我们修改 <code>newValue</code> 的值时，<code>value</code> 的值也会改变，这不是我们所想要的结果。</p>","more":"<h3 id=\"使用-JSON-parse\"><a href=\"#使用-JSON-parse\" class=\"headerlink\" title=\"使用 JSON.parse()\"></a>使用 JSON.parse()</h3><p>当我们确定所拷贝的对象不是很复杂的时候，可以使用 <code>JSON.parse(JSON.stringify(object))</code> 来拷贝对象，但是：</p>\n<ol>\n<li><p>当被拷贝的对象中有 undefined，function，symbol 等类型时，由于 JSON 不支持，会导致拷贝的对象不完整，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = &#123;&#125;</span><br><span class=\"line\">a.a = 1</span><br><span class=\"line\">a.b = undefined</span><br><span class=\"line\">a.c = ()=&gt;&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(a)) // 得到的对象&#123;a:1&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"deepCopy-函数\"><a href=\"#deepCopy-函数\" class=\"headerlink\" title=\"deepCopy 函数\"></a>deepCopy 函数</h3><p>大体思路是递归调用”浅拷贝”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　function deepCopy(p, c) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　var c = c || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　for (var i in p) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　if (typeof p[i] === &#x27;object&#x27;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　　　deepCopy(p[i], c[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　&#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　　　　c[i] = p[i];</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　&#125;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　return c;</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的函数一般场景也能用，但是复杂的场景如：<code>File()、Set()、Map()</code> 等可能就有问题了，我们可以使用现成的工具函数，如<a href=\"https://github.com/lodash/lodash/blob/master/.internal/baseClone.js\">lodash 克隆</a></p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000013131068\">ES6 时代，你真的会克隆对象吗(二)</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html\">Javascript 面向对象编程（三）：非构造函数的继承</a></li>\n</ul>"},{"title":"Promise","date":"2019-03-13T16:00:00.000Z","updated":"2019-03-13T16:00:00.000Z","_content":"\n之前在写 ajax 方面的博客的时候，简单的介绍了一下 Promise 在 ajax 里的应用，这次详细的梳理一下 Promise 功能以及原理。\n\n<!-- more -->\n\n# 含义\n\n首先，Promise 是一个对象，也是一个构造函数。Promise 的设计思想是所有异步任务都返回一个 Promise 实例。Promise 实例有一个 then 方法，用来指定下一步的回调函数。这样可以让异步操作写起来就像在写同步操作的流程，而不必一层层地嵌套回调函数。\n\n```javascrpt\n\n// 传统写法\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // ...\n      });\n    });\n  });\n});\n\n\n// Promise 的写法\nvar doSomething = new Promise()\ndoSomething.then('第一件事').then('第二件事')\n```\n\n上面的例子如果是用回调函数实现会非常麻烦。\n\nPromise 对象的状态不受外界影响。对象有三个状态，`pending`、`fulfilled`、`rejected`。一旦状态发生改变（pending -> fulfilled,fulfilled-> reject），就不会在变。\n\nPromise 也有缺点，首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\n\n# 基本用法\n\n下面代码创造了一个 Promise 实例。\n\n```javascript\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value)\n  } else {\n    reject(error)\n  }\n})\n```\n\n实例生成后，可以用 then 方法指定 resolve 和 reject 的回调函数，then 的第一个参数是成功的回调函数，第二个是失败的回调函数。\n\nPromise 新建后就会立即执行。\n\n```javascript\nlet promise = new Promise(function (resolve, reject) {\n  console.log('Promise')\n  resolve()\n})\n\npromise.then(function () {\n  console.log('resolved.')\n})\n\nconsole.log('Hi!')\n\n// Promise\n// Hi!\n// resolved\n```\n\n下面是异步加载图片的例子。\n\n```javascript\nfunction loadImageAsync(url) {\n  return new Promise(function (resolve, reject) {\n    const image = new Image()\n\n    image.onload = function () {\n      resolve(image)\n    }\n\n    image.onerror = function () {\n      reject(new Error('Could not load image at ' + url))\n    }\n\n    image.src = url\n  })\n}\n```\n\n上面代码中，使用 Promise 包装了一个图片加载的异步操作。如果加载成功，就调用 resolve 方法，否则就调用 reject 方法。\n\n上面代码中，Promise 新建后立即执行，所以首先输出的是 Promise。然后，then 方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以 resolved 最后输出。\n\n调用 resolve 或 reject 并不会终结 Promise 的参数函数的执行\n\n```javascript\nnew Promise((resolve, reject) => {\n  resolve(1)\n  console.log(2)\n}).then(r => {\n  console.log(r)\n})\n// 2\n// 1\n```\n\n上面代码中，调用 resolve(1)以后，后面的 console.log(2)还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务.\n\n# Promise.prototype.then()\n\nPromise 实例具有 then 方法，也就是说，then 方法是定义在原型对象。then 方法返回的是一个新的 Promise 实例（注意，不是原来那个 Promise 实例）。因而可以采用链式写法，即 then 方法后面再调用另一个 then 方法。\n\n# Promise.prototype.catch()\n\nPromise.prototype.catch 方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。\n\nPromise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。\n\n一般来说，不要在 then 方法里面定义 Reject 状态的回调函数（即 then 的第二个参数），总是使用 catch 方法。\n\n如果 Promise 状态已经变成 resolved，再抛出错误是无效的。因为 Promise 的状态一旦发生改变，就不会再变。\n\n# Promise.prototype.finally()\n\nfinally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\n\nfinally 本质上是 then 方法的特例。\n\nfinally 的实现：\n\n```javascript\npromise.finally(() => {\n  // 语句\n})\n\n// 等同于\npromise.then(\n  result => {\n    // 语句\n    return result\n  },\n  error => {\n    // 语句\n    throw error\n  }\n)\n\nPromise.prototype.finally = function (callback) {\n  let P = this.constructor\n  return this.then(\n    value => P.resolve(callback()).then(() => value),\n    reason =>\n      P.resolve(callback()).then(() => {\n        throw reason\n      })\n  )\n}\n```\n\n# Promise.all()\n\nPromise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```javascript\nconst p = Promise.all([p1, p2, p3])\n```\n\n上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 实例，如果不是，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。（Promise.all 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。）\n\np 的状态由 p1、p2、p3 决定，分成两种情况。\n\n（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。\n\n（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。\n\n注意，如果作为参数的 Promise 实例，自己定义了 catch 方法，那么它一旦被 rejected，并不会触发 Promise.all()的 catch 方法。 因为改函数执行完自己的 catch(也会变成 resolve。\n\n# Promise.race()\n\nPromise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。和 all()不同的是，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。\n\n# Promise.resolve()\n\nPromise.resolve 方法可以将现有对象转换成 Promise 对象。\n\nPromise.resolve 方法的参数分成四种情况。\n\n1. 参数是一个 Promise 实例：Promise.resolve 将不做任何修改、原封不动地返回这个实例。\n2. 参数是一个带 then 方法的对象：Promise.resolve 方法会将这个对象转为 Promise 对象，然后就立即执行该对象的 then 方法。\n3. 参数不是具有 then 方法的对象，或根本就不是对象：如果参数是一个原始值，或者是一个不具有 then 方法的对象，则 Promise.resolve 方法返回一个新的 Promise 对象，状态为 resolved。\n4. 不带有任何参数：Promise.resolve 方法允许调用时不带参数，直接返回一个 resolved 状态的 Promise 对象。所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用 Promise.resolve 方法。\n\n# Promise.reject()\n\nPromise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。\n\n注意，Promise.reject()方法的参数，会原封不动地作为 reject 的理由，变成后续方法的参数。这一点与 Promise.resolve 方法不一致。\n\n```javascript\nconst thenable = {\n  then(resolve, reject) {\n    reject('出错了')\n  }\n}\n\nPromise.reject(thenable).catch(e => {\n  console.log(e === thenable)\n})\n\n// true\n```\n\n> 引用\n\n- [Promise 对象](https://wangdoc.com/javascript/async/promise.html)\n- [阮一峰 Promise 对象](http://es6.ruanyifeng.com/#docs/promise)\n","source":"_posts/Promise.md","raw":"---\ntitle: Promise\ndate: 2019-03-14 00:00:00\nupdated: 2019-03-14 00:00:00\ntags:\n  - Promise\n---\n\n之前在写 ajax 方面的博客的时候，简单的介绍了一下 Promise 在 ajax 里的应用，这次详细的梳理一下 Promise 功能以及原理。\n\n<!-- more -->\n\n# 含义\n\n首先，Promise 是一个对象，也是一个构造函数。Promise 的设计思想是所有异步任务都返回一个 Promise 实例。Promise 实例有一个 then 方法，用来指定下一步的回调函数。这样可以让异步操作写起来就像在写同步操作的流程，而不必一层层地嵌套回调函数。\n\n```javascrpt\n\n// 传统写法\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // ...\n      });\n    });\n  });\n});\n\n\n// Promise 的写法\nvar doSomething = new Promise()\ndoSomething.then('第一件事').then('第二件事')\n```\n\n上面的例子如果是用回调函数实现会非常麻烦。\n\nPromise 对象的状态不受外界影响。对象有三个状态，`pending`、`fulfilled`、`rejected`。一旦状态发生改变（pending -> fulfilled,fulfilled-> reject），就不会在变。\n\nPromise 也有缺点，首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\n\n# 基本用法\n\n下面代码创造了一个 Promise 实例。\n\n```javascript\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value)\n  } else {\n    reject(error)\n  }\n})\n```\n\n实例生成后，可以用 then 方法指定 resolve 和 reject 的回调函数，then 的第一个参数是成功的回调函数，第二个是失败的回调函数。\n\nPromise 新建后就会立即执行。\n\n```javascript\nlet promise = new Promise(function (resolve, reject) {\n  console.log('Promise')\n  resolve()\n})\n\npromise.then(function () {\n  console.log('resolved.')\n})\n\nconsole.log('Hi!')\n\n// Promise\n// Hi!\n// resolved\n```\n\n下面是异步加载图片的例子。\n\n```javascript\nfunction loadImageAsync(url) {\n  return new Promise(function (resolve, reject) {\n    const image = new Image()\n\n    image.onload = function () {\n      resolve(image)\n    }\n\n    image.onerror = function () {\n      reject(new Error('Could not load image at ' + url))\n    }\n\n    image.src = url\n  })\n}\n```\n\n上面代码中，使用 Promise 包装了一个图片加载的异步操作。如果加载成功，就调用 resolve 方法，否则就调用 reject 方法。\n\n上面代码中，Promise 新建后立即执行，所以首先输出的是 Promise。然后，then 方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以 resolved 最后输出。\n\n调用 resolve 或 reject 并不会终结 Promise 的参数函数的执行\n\n```javascript\nnew Promise((resolve, reject) => {\n  resolve(1)\n  console.log(2)\n}).then(r => {\n  console.log(r)\n})\n// 2\n// 1\n```\n\n上面代码中，调用 resolve(1)以后，后面的 console.log(2)还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务.\n\n# Promise.prototype.then()\n\nPromise 实例具有 then 方法，也就是说，then 方法是定义在原型对象。then 方法返回的是一个新的 Promise 实例（注意，不是原来那个 Promise 实例）。因而可以采用链式写法，即 then 方法后面再调用另一个 then 方法。\n\n# Promise.prototype.catch()\n\nPromise.prototype.catch 方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。\n\nPromise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。\n\n一般来说，不要在 then 方法里面定义 Reject 状态的回调函数（即 then 的第二个参数），总是使用 catch 方法。\n\n如果 Promise 状态已经变成 resolved，再抛出错误是无效的。因为 Promise 的状态一旦发生改变，就不会再变。\n\n# Promise.prototype.finally()\n\nfinally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\n\nfinally 本质上是 then 方法的特例。\n\nfinally 的实现：\n\n```javascript\npromise.finally(() => {\n  // 语句\n})\n\n// 等同于\npromise.then(\n  result => {\n    // 语句\n    return result\n  },\n  error => {\n    // 语句\n    throw error\n  }\n)\n\nPromise.prototype.finally = function (callback) {\n  let P = this.constructor\n  return this.then(\n    value => P.resolve(callback()).then(() => value),\n    reason =>\n      P.resolve(callback()).then(() => {\n        throw reason\n      })\n  )\n}\n```\n\n# Promise.all()\n\nPromise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```javascript\nconst p = Promise.all([p1, p2, p3])\n```\n\n上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 实例，如果不是，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。（Promise.all 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。）\n\np 的状态由 p1、p2、p3 决定，分成两种情况。\n\n（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。\n\n（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。\n\n注意，如果作为参数的 Promise 实例，自己定义了 catch 方法，那么它一旦被 rejected，并不会触发 Promise.all()的 catch 方法。 因为改函数执行完自己的 catch(也会变成 resolve。\n\n# Promise.race()\n\nPromise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。和 all()不同的是，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。\n\n# Promise.resolve()\n\nPromise.resolve 方法可以将现有对象转换成 Promise 对象。\n\nPromise.resolve 方法的参数分成四种情况。\n\n1. 参数是一个 Promise 实例：Promise.resolve 将不做任何修改、原封不动地返回这个实例。\n2. 参数是一个带 then 方法的对象：Promise.resolve 方法会将这个对象转为 Promise 对象，然后就立即执行该对象的 then 方法。\n3. 参数不是具有 then 方法的对象，或根本就不是对象：如果参数是一个原始值，或者是一个不具有 then 方法的对象，则 Promise.resolve 方法返回一个新的 Promise 对象，状态为 resolved。\n4. 不带有任何参数：Promise.resolve 方法允许调用时不带参数，直接返回一个 resolved 状态的 Promise 对象。所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用 Promise.resolve 方法。\n\n# Promise.reject()\n\nPromise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。\n\n注意，Promise.reject()方法的参数，会原封不动地作为 reject 的理由，变成后续方法的参数。这一点与 Promise.resolve 方法不一致。\n\n```javascript\nconst thenable = {\n  then(resolve, reject) {\n    reject('出错了')\n  }\n}\n\nPromise.reject(thenable).catch(e => {\n  console.log(e === thenable)\n})\n\n// true\n```\n\n> 引用\n\n- [Promise 对象](https://wangdoc.com/javascript/async/promise.html)\n- [阮一峰 Promise 对象](http://es6.ruanyifeng.com/#docs/promise)\n","slug":"Promise","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwt000pk4u96cnw0qaz","content":"<p>之前在写 ajax 方面的博客的时候，简单的介绍了一下 Promise 在 ajax 里的应用，这次详细的梳理一下 Promise 功能以及原理。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h1><p>首先，Promise 是一个对象，也是一个构造函数。Promise 的设计思想是所有异步任务都返回一个 Promise 实例。Promise 实例有一个 then 方法，用来指定下一步的回调函数。这样可以让异步操作写起来就像在写同步操作的流程，而不必一层层地嵌套回调函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 传统写法</span><br><span class=\"line\">step1(function (value1) &#123;</span><br><span class=\"line\">  step2(value1, function(value2) &#123;</span><br><span class=\"line\">    step3(value2, function(value3) &#123;</span><br><span class=\"line\">      step4(value3, function(value4) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Promise 的写法</span><br><span class=\"line\">var doSomething = new Promise()</span><br><span class=\"line\">doSomething.then(&#x27;第一件事&#x27;).then(&#x27;第二件事&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子如果是用回调函数实现会非常麻烦。</p>\n<p>Promise 对象的状态不受外界影响。对象有三个状态，<code>pending</code>、<code>fulfilled</code>、<code>rejected</code>。一旦状态发生改变（pending -&gt; fulfilled,fulfilled-&gt; reject），就不会在变。</p>\n<p>Promise 也有缺点，首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p>下面代码创造了一个 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>实例生成后，可以用 then 方法指定 resolve 和 reject 的回调函数，then 的第一个参数是成功的回调函数，第二个是失败的回调函数。</p>\n<p>Promise 新建后就会立即执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;resolved.&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hi!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise</span></span><br><span class=\"line\"><span class=\"comment\">// Hi!</span></span><br><span class=\"line\"><span class=\"comment\">// resolved</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是异步加载图片的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImageAsync</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\"></span><br><span class=\"line\">    image.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(image)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Could not load image at &#x27;</span> + url))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.src = url</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，使用 Promise 包装了一个图片加载的异步操作。如果加载成功，就调用 resolve 方法，否则就调用 reject 方法。</p>\n<p>上面代码中，Promise 新建后立即执行，所以首先输出的是 Promise。然后，then 方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以 resolved 最后输出。</p>\n<p>调用 resolve 或 reject 并不会终结 Promise 的参数函数的执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(r)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，调用 resolve(1)以后，后面的 console.log(2)还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务.</p>\n<h1 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h1><p>Promise 实例具有 then 方法，也就是说，then 方法是定义在原型对象。then 方法返回的是一个新的 Promise 实例（注意，不是原来那个 Promise 实例）。因而可以采用链式写法，即 then 方法后面再调用另一个 then 方法。</p>\n<h1 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h1><p>Promise.prototype.catch 方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。</p>\n<p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。</p>\n<p>一般来说，不要在 then 方法里面定义 Reject 状态的回调函数（即 then 的第二个参数），总是使用 catch 方法。</p>\n<p>如果 Promise 状态已经变成 resolved，再抛出错误是无效的。因为 Promise 的状态一旦发生改变，就不会再变。</p>\n<h1 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h1><p>finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>\n<p>finally 本质上是 then 方法的特例。</p>\n<p>finally 的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 语句</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">promise.then(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> error</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> P = <span class=\"built_in\">this</span>.constructor</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> P.resolve(callback()).then(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span></span><br><span class=\"line\">      P.resolve(callback()).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> reason</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h1><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3])</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 实例，如果不是，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。（Promise.all 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。）</p>\n<p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p>\n<p>（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</p>\n<p>（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</p>\n<p>注意，如果作为参数的 Promise 实例，自己定义了 catch 方法，那么它一旦被 rejected，并不会触发 Promise.all()的 catch 方法。 因为改函数执行完自己的 catch(也会变成 resolve。</p>\n<h1 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h1><p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。和 all()不同的是，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。</p>\n<h1 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h1><p>Promise.resolve 方法可以将现有对象转换成 Promise 对象。</p>\n<p>Promise.resolve 方法的参数分成四种情况。</p>\n<ol>\n<li>参数是一个 Promise 实例：Promise.resolve 将不做任何修改、原封不动地返回这个实例。</li>\n<li>参数是一个带 then 方法的对象：Promise.resolve 方法会将这个对象转为 Promise 对象，然后就立即执行该对象的 then 方法。</li>\n<li>参数不是具有 then 方法的对象，或根本就不是对象：如果参数是一个原始值，或者是一个不具有 then 方法的对象，则 Promise.resolve 方法返回一个新的 Promise 对象，状态为 resolved。</li>\n<li>不带有任何参数：Promise.resolve 方法允许调用时不带参数，直接返回一个 resolved 状态的 Promise 对象。所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用 Promise.resolve 方法。</li>\n</ol>\n<h1 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h1><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。</p>\n<p>注意，Promise.reject()方法的参数，会原封不动地作为 reject 的理由，变成后续方法的参数。这一点与 Promise.resolve 方法不一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thenable = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">resolve, reject</span>)</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&#x27;出错了&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(thenable).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e === thenable)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wangdoc.com/javascript/async/promise.html\">Promise 对象</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/promise\">阮一峰 Promise 对象</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>之前在写 ajax 方面的博客的时候，简单的介绍了一下 Promise 在 ajax 里的应用，这次详细的梳理一下 Promise 功能以及原理。</p>","more":"<h1 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h1><p>首先，Promise 是一个对象，也是一个构造函数。Promise 的设计思想是所有异步任务都返回一个 Promise 实例。Promise 实例有一个 then 方法，用来指定下一步的回调函数。这样可以让异步操作写起来就像在写同步操作的流程，而不必一层层地嵌套回调函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 传统写法</span><br><span class=\"line\">step1(function (value1) &#123;</span><br><span class=\"line\">  step2(value1, function(value2) &#123;</span><br><span class=\"line\">    step3(value2, function(value3) &#123;</span><br><span class=\"line\">      step4(value3, function(value4) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Promise 的写法</span><br><span class=\"line\">var doSomething = new Promise()</span><br><span class=\"line\">doSomething.then(&#x27;第一件事&#x27;).then(&#x27;第二件事&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子如果是用回调函数实现会非常麻烦。</p>\n<p>Promise 对象的状态不受外界影响。对象有三个状态，<code>pending</code>、<code>fulfilled</code>、<code>rejected</code>。一旦状态发生改变（pending -&gt; fulfilled,fulfilled-&gt; reject），就不会在变。</p>\n<p>Promise 也有缺点，首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p>下面代码创造了一个 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>实例生成后，可以用 then 方法指定 resolve 和 reject 的回调函数，then 的第一个参数是成功的回调函数，第二个是失败的回调函数。</p>\n<p>Promise 新建后就会立即执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;resolved.&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hi!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise</span></span><br><span class=\"line\"><span class=\"comment\">// Hi!</span></span><br><span class=\"line\"><span class=\"comment\">// resolved</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是异步加载图片的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImageAsync</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\"></span><br><span class=\"line\">    image.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(image)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Could not load image at &#x27;</span> + url))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.src = url</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，使用 Promise 包装了一个图片加载的异步操作。如果加载成功，就调用 resolve 方法，否则就调用 reject 方法。</p>\n<p>上面代码中，Promise 新建后立即执行，所以首先输出的是 Promise。然后，then 方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以 resolved 最后输出。</p>\n<p>调用 resolve 或 reject 并不会终结 Promise 的参数函数的执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(r)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，调用 resolve(1)以后，后面的 console.log(2)还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务.</p>\n<h1 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h1><p>Promise 实例具有 then 方法，也就是说，then 方法是定义在原型对象。then 方法返回的是一个新的 Promise 实例（注意，不是原来那个 Promise 实例）。因而可以采用链式写法，即 then 方法后面再调用另一个 then 方法。</p>\n<h1 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h1><p>Promise.prototype.catch 方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。</p>\n<p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。</p>\n<p>一般来说，不要在 then 方法里面定义 Reject 状态的回调函数（即 then 的第二个参数），总是使用 catch 方法。</p>\n<p>如果 Promise 状态已经变成 resolved，再抛出错误是无效的。因为 Promise 的状态一旦发生改变，就不会再变。</p>\n<h1 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h1><p>finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>\n<p>finally 本质上是 then 方法的特例。</p>\n<p>finally 的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 语句</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">promise.then(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> error</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> P = <span class=\"built_in\">this</span>.constructor</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> P.resolve(callback()).then(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span></span><br><span class=\"line\">      P.resolve(callback()).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> reason</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h1><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3])</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 实例，如果不是，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。（Promise.all 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。）</p>\n<p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p>\n<p>（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</p>\n<p>（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</p>\n<p>注意，如果作为参数的 Promise 实例，自己定义了 catch 方法，那么它一旦被 rejected，并不会触发 Promise.all()的 catch 方法。 因为改函数执行完自己的 catch(也会变成 resolve。</p>\n<h1 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h1><p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。和 all()不同的是，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。</p>\n<h1 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h1><p>Promise.resolve 方法可以将现有对象转换成 Promise 对象。</p>\n<p>Promise.resolve 方法的参数分成四种情况。</p>\n<ol>\n<li>参数是一个 Promise 实例：Promise.resolve 将不做任何修改、原封不动地返回这个实例。</li>\n<li>参数是一个带 then 方法的对象：Promise.resolve 方法会将这个对象转为 Promise 对象，然后就立即执行该对象的 then 方法。</li>\n<li>参数不是具有 then 方法的对象，或根本就不是对象：如果参数是一个原始值，或者是一个不具有 then 方法的对象，则 Promise.resolve 方法返回一个新的 Promise 对象，状态为 resolved。</li>\n<li>不带有任何参数：Promise.resolve 方法允许调用时不带参数，直接返回一个 resolved 状态的 Promise 对象。所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用 Promise.resolve 方法。</li>\n</ol>\n<h1 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h1><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。</p>\n<p>注意，Promise.reject()方法的参数，会原封不动地作为 reject 的理由，变成后续方法的参数。这一点与 Promise.resolve 方法不一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thenable = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">resolve, reject</span>)</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&#x27;出错了&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(thenable).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e === thenable)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wangdoc.com/javascript/async/promise.html\">Promise 对象</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/promise\">阮一峰 Promise 对象</a></li>\n</ul>"},{"title":"React Hooks 获取“过去”和“未来”的值","date":"2020-07-30T16:00:00.000Z","updated":"2020-07-30T16:00:00.000Z","_content":"\n这个标题看起来有点唬啊，其实主要是讲在使用 `useState` 时，因为使用异步函数而出现的一些问题。\n\n<!-- more -->\n\n先讲一下 `useState`\n\n```\nconst [state, setState] = useState(initialState);\n```\n\n当组件被创建而不是重用时，该状态将被赋予初始值 initialState，而之后的重用过程中，不会被重复赋予初始值。\n\n在实例中，可以通过 useState 等方式拥有局部状态。在重用的过程中，这些状态会得到保留。而如果无法重用，状态会被销毁。\n\n需要明确的是，`state` 作为函数中的一个常量，就是普通的数据，并不存在诸如数据绑定这样的操作来驱使 DOM 发生更新。在调用 `setState` 后，React 将重新执行 `render` 函数。\n\n举两个例子，例子中会使用 `useRef`，useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。\n\n### 使用“未来”的值\n\n```\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  const currentCount = useRef(count);\n\n  currentCount.current = count;\n\n  const handleClick = () => {\n    setTimeout(() => {\n      setCount(currentCount.current + 1);\n     // setCount(count + 1);\n    }, 3000);\n  };\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>setCount</button>\n      <button onClick={handleClick}>Delay setCount</button>\n    </div>\n  );\n}\n```\n\n上面这个例子，如果我们在 `handleClick` 中使用 `count`而不是 `currentCount.current`，当我们点击\n`Delay setCount` 按钮，然后三秒内点两次 `setCount` 按钮，页面展示的值，先回变成 1、2，然后又会变成 1。\n\n`count`，`handleClick` 都是 Example 函数作用域中的常量。定时器设置 3000ms 到期后的执行函数为第一次点击 `Delay setCount` 按钮时的函数，此时 `count` 的值是 0，和我们点击 `setCount` 两次时的 `count` 的值无关。\n\n我们使用 useRef ，设置它的值不会重新触发 render 函数。此时 `currentCount.current` 的值是最新的 `count` 的值，因此页面展示的值分别是 1，2，3。\n\n### 使用“过去”的值\n\n```\n\n理解上面的例子后，我们再理解下面的例子就方便多了。\n\nfunction Example() {\n    const [count, setCount] = useState(1);\n\n    const prevCountRef = useRef(1);\n    const prevCount = prevCountRef.current;\n    prevCountRef.current = count;\n\n    const handleClick = () => {\n        setCount(prevCount + count);\n    };\n\n    return (\n        <div>\n            <p>{count}</p>\n            <button onClick={handleClick}>SetCount</button>\n        </div>\n    );\n}\n```\n\n页面首次渲染时，`count` 的值是初始值 1，`prevCountRef.current`的值是初始值 1\n\n第一次点击 `SetCount` 按钮，重新执行函数，此时 `count` 的值是 2，`prevCount` 的值是上次存的值 1，然后`prevCountRef.current`更新成了 2。\n\n页面展示的值 1，2，3，5……\n\n### 总结\n\n理解上面的例子，主要是理解每次 `SetCount` 后，页面都会重新渲染，每次渲染后的 count、handleClick 的值都是不相关的。\n\n> 引用\n\n- [React Hooks 最佳实践](https://juejin.im/post/5ec7372cf265da76de5cd0c9)\n- [useRef](https://zh-hans.reactjs.org/docs/hooks-reference.html#useref)\n","source":"_posts/React Hooks 获取“过去”和“未来”的值.md","raw":"---\ntitle: React Hooks 获取“过去”和“未来”的值\ndate: 2020-07-31 00:00:00\nupdated: 2020-07-31 00:00:00\ntags:\n  - React\n  - Hooks\n---\n\n这个标题看起来有点唬啊，其实主要是讲在使用 `useState` 时，因为使用异步函数而出现的一些问题。\n\n<!-- more -->\n\n先讲一下 `useState`\n\n```\nconst [state, setState] = useState(initialState);\n```\n\n当组件被创建而不是重用时，该状态将被赋予初始值 initialState，而之后的重用过程中，不会被重复赋予初始值。\n\n在实例中，可以通过 useState 等方式拥有局部状态。在重用的过程中，这些状态会得到保留。而如果无法重用，状态会被销毁。\n\n需要明确的是，`state` 作为函数中的一个常量，就是普通的数据，并不存在诸如数据绑定这样的操作来驱使 DOM 发生更新。在调用 `setState` 后，React 将重新执行 `render` 函数。\n\n举两个例子，例子中会使用 `useRef`，useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。\n\n### 使用“未来”的值\n\n```\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  const currentCount = useRef(count);\n\n  currentCount.current = count;\n\n  const handleClick = () => {\n    setTimeout(() => {\n      setCount(currentCount.current + 1);\n     // setCount(count + 1);\n    }, 3000);\n  };\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>setCount</button>\n      <button onClick={handleClick}>Delay setCount</button>\n    </div>\n  );\n}\n```\n\n上面这个例子，如果我们在 `handleClick` 中使用 `count`而不是 `currentCount.current`，当我们点击\n`Delay setCount` 按钮，然后三秒内点两次 `setCount` 按钮，页面展示的值，先回变成 1、2，然后又会变成 1。\n\n`count`，`handleClick` 都是 Example 函数作用域中的常量。定时器设置 3000ms 到期后的执行函数为第一次点击 `Delay setCount` 按钮时的函数，此时 `count` 的值是 0，和我们点击 `setCount` 两次时的 `count` 的值无关。\n\n我们使用 useRef ，设置它的值不会重新触发 render 函数。此时 `currentCount.current` 的值是最新的 `count` 的值，因此页面展示的值分别是 1，2，3。\n\n### 使用“过去”的值\n\n```\n\n理解上面的例子后，我们再理解下面的例子就方便多了。\n\nfunction Example() {\n    const [count, setCount] = useState(1);\n\n    const prevCountRef = useRef(1);\n    const prevCount = prevCountRef.current;\n    prevCountRef.current = count;\n\n    const handleClick = () => {\n        setCount(prevCount + count);\n    };\n\n    return (\n        <div>\n            <p>{count}</p>\n            <button onClick={handleClick}>SetCount</button>\n        </div>\n    );\n}\n```\n\n页面首次渲染时，`count` 的值是初始值 1，`prevCountRef.current`的值是初始值 1\n\n第一次点击 `SetCount` 按钮，重新执行函数，此时 `count` 的值是 2，`prevCount` 的值是上次存的值 1，然后`prevCountRef.current`更新成了 2。\n\n页面展示的值 1，2，3，5……\n\n### 总结\n\n理解上面的例子，主要是理解每次 `SetCount` 后，页面都会重新渲染，每次渲染后的 count、handleClick 的值都是不相关的。\n\n> 引用\n\n- [React Hooks 最佳实践](https://juejin.im/post/5ec7372cf265da76de5cd0c9)\n- [useRef](https://zh-hans.reactjs.org/docs/hooks-reference.html#useref)\n","slug":"React Hooks 获取“过去”和“未来”的值","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwv000sk4u9ha78az6a","content":"<p>这个标题看起来有点唬啊，其实主要是讲在使用 <code>useState</code> 时，因为使用异步函数而出现的一些问题。</p>\n<span id=\"more\"></span>\n\n<p>先讲一下 <code>useState</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [state, setState] = useState(initialState);</span><br></pre></td></tr></table></figure>\n\n<p>当组件被创建而不是重用时，该状态将被赋予初始值 initialState，而之后的重用过程中，不会被重复赋予初始值。</p>\n<p>在实例中，可以通过 useState 等方式拥有局部状态。在重用的过程中，这些状态会得到保留。而如果无法重用，状态会被销毁。</p>\n<p>需要明确的是，<code>state</code> 作为函数中的一个常量，就是普通的数据，并不存在诸如数据绑定这样的操作来驱使 DOM 发生更新。在调用 <code>setState</code> 后，React 将重新执行 <code>render</code> 函数。</p>\n<p>举两个例子，例子中会使用 <code>useRef</code>，useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。</p>\n<h3 id=\"使用“未来”的值\"><a href=\"#使用“未来”的值\" class=\"headerlink\" title=\"使用“未来”的值\"></a>使用“未来”的值</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  const currentCount = useRef(count);</span><br><span class=\"line\"></span><br><span class=\"line\">  currentCount.current = count;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleClick = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      setCount(currentCount.current + 1);</span><br><span class=\"line\">     // setCount(count + 1);</span><br><span class=\"line\">    &#125;, 3000);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;setCount&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleClick&#125;&gt;Delay setCount&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个例子，如果我们在 <code>handleClick</code> 中使用 <code>count</code>而不是 <code>currentCount.current</code>，当我们点击<br><code>Delay setCount</code> 按钮，然后三秒内点两次 <code>setCount</code> 按钮，页面展示的值，先回变成 1、2，然后又会变成 1。</p>\n<p><code>count</code>，<code>handleClick</code> 都是 Example 函数作用域中的常量。定时器设置 3000ms 到期后的执行函数为第一次点击 <code>Delay setCount</code> 按钮时的函数，此时 <code>count</code> 的值是 0，和我们点击 <code>setCount</code> 两次时的 <code>count</code> 的值无关。</p>\n<p>我们使用 useRef ，设置它的值不会重新触发 render 函数。此时 <code>currentCount.current</code> 的值是最新的 <code>count</code> 的值，因此页面展示的值分别是 1，2，3。</p>\n<h3 id=\"使用“过去”的值\"><a href=\"#使用“过去”的值\" class=\"headerlink\" title=\"使用“过去”的值\"></a>使用“过去”的值</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">理解上面的例子后，我们再理解下面的例子就方便多了。</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">    const [count, setCount] = useState(1);</span><br><span class=\"line\"></span><br><span class=\"line\">    const prevCountRef = useRef(1);</span><br><span class=\"line\">    const prevCount = prevCountRef.current;</span><br><span class=\"line\">    prevCountRef.current = count;</span><br><span class=\"line\"></span><br><span class=\"line\">    const handleClick = () =&gt; &#123;</span><br><span class=\"line\">        setCount(prevCount + count);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;handleClick&#125;&gt;SetCount&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面首次渲染时，<code>count</code> 的值是初始值 1，<code>prevCountRef.current</code>的值是初始值 1</p>\n<p>第一次点击 <code>SetCount</code> 按钮，重新执行函数，此时 <code>count</code> 的值是 2，<code>prevCount</code> 的值是上次存的值 1，然后<code>prevCountRef.current</code>更新成了 2。</p>\n<p>页面展示的值 1，2，3，5……</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>理解上面的例子，主要是理解每次 <code>SetCount</code> 后，页面都会重新渲染，每次渲染后的 count、handleClick 的值都是不相关的。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/5ec7372cf265da76de5cd0c9\">React Hooks 最佳实践</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#useref\">useRef</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这个标题看起来有点唬啊，其实主要是讲在使用 <code>useState</code> 时，因为使用异步函数而出现的一些问题。</p>","more":"<p>先讲一下 <code>useState</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [state, setState] = useState(initialState);</span><br></pre></td></tr></table></figure>\n\n<p>当组件被创建而不是重用时，该状态将被赋予初始值 initialState，而之后的重用过程中，不会被重复赋予初始值。</p>\n<p>在实例中，可以通过 useState 等方式拥有局部状态。在重用的过程中，这些状态会得到保留。而如果无法重用，状态会被销毁。</p>\n<p>需要明确的是，<code>state</code> 作为函数中的一个常量，就是普通的数据，并不存在诸如数据绑定这样的操作来驱使 DOM 发生更新。在调用 <code>setState</code> 后，React 将重新执行 <code>render</code> 函数。</p>\n<p>举两个例子，例子中会使用 <code>useRef</code>，useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。</p>\n<h3 id=\"使用“未来”的值\"><a href=\"#使用“未来”的值\" class=\"headerlink\" title=\"使用“未来”的值\"></a>使用“未来”的值</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  const currentCount = useRef(count);</span><br><span class=\"line\"></span><br><span class=\"line\">  currentCount.current = count;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleClick = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      setCount(currentCount.current + 1);</span><br><span class=\"line\">     // setCount(count + 1);</span><br><span class=\"line\">    &#125;, 3000);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;setCount&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleClick&#125;&gt;Delay setCount&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个例子，如果我们在 <code>handleClick</code> 中使用 <code>count</code>而不是 <code>currentCount.current</code>，当我们点击<br><code>Delay setCount</code> 按钮，然后三秒内点两次 <code>setCount</code> 按钮，页面展示的值，先回变成 1、2，然后又会变成 1。</p>\n<p><code>count</code>，<code>handleClick</code> 都是 Example 函数作用域中的常量。定时器设置 3000ms 到期后的执行函数为第一次点击 <code>Delay setCount</code> 按钮时的函数，此时 <code>count</code> 的值是 0，和我们点击 <code>setCount</code> 两次时的 <code>count</code> 的值无关。</p>\n<p>我们使用 useRef ，设置它的值不会重新触发 render 函数。此时 <code>currentCount.current</code> 的值是最新的 <code>count</code> 的值，因此页面展示的值分别是 1，2，3。</p>\n<h3 id=\"使用“过去”的值\"><a href=\"#使用“过去”的值\" class=\"headerlink\" title=\"使用“过去”的值\"></a>使用“过去”的值</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">理解上面的例子后，我们再理解下面的例子就方便多了。</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">    const [count, setCount] = useState(1);</span><br><span class=\"line\"></span><br><span class=\"line\">    const prevCountRef = useRef(1);</span><br><span class=\"line\">    const prevCount = prevCountRef.current;</span><br><span class=\"line\">    prevCountRef.current = count;</span><br><span class=\"line\"></span><br><span class=\"line\">    const handleClick = () =&gt; &#123;</span><br><span class=\"line\">        setCount(prevCount + count);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;handleClick&#125;&gt;SetCount&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面首次渲染时，<code>count</code> 的值是初始值 1，<code>prevCountRef.current</code>的值是初始值 1</p>\n<p>第一次点击 <code>SetCount</code> 按钮，重新执行函数，此时 <code>count</code> 的值是 2，<code>prevCount</code> 的值是上次存的值 1，然后<code>prevCountRef.current</code>更新成了 2。</p>\n<p>页面展示的值 1，2，3，5……</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>理解上面的例子，主要是理解每次 <code>SetCount</code> 后，页面都会重新渲染，每次渲染后的 count、handleClick 的值都是不相关的。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/5ec7372cf265da76de5cd0c9\">React Hooks 最佳实践</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#useref\">useRef</a></li>\n</ul>"},{"title":"Session、LocalStorage、HTTP缓存","date":"2019-01-07T16:00:00.000Z","updated":"2019-01-07T16:00:00.000Z","_content":"\n# Session\n\n1. 将 SessionID（随机数）通过 Cookie 发给客户端(Session 可以用 LocalStorage + 查询参数实现)\n2. 客户端访问服务器时，服务器读取 SessionID\n3. 服务器有一块内存（哈希表）保存了所有 session\n4. 通过 SessionID 我们可以得到对应用户的隐私信息，如 id、email\n5. 这块内存（哈希表）就是服务器上的所有 session\n6. 页面关闭的时候，会清空 SessionStorage\n7. Session 在服务器的默认有效时间是 30 分钟,可以通过代码控制失效时间\n\n<!-- more -->\n\n# LocalStorage\n\n1. LocalStorage 跟 HTTP 无关\n2. HTTP 不会带上 LocalStorage 的值\n3. 只有相同域名的页面才能互相读取 LocalStorage（没有同源那么严格）\n4. 每个域名 localStorage 最大存储量为 5Mb 左右（每个浏览器不一样）\n5. LocalStorage 永久有效，除非用户清理缓存\n6. 常用场景：记录有没有提示过用户（没有用的信息，不能记录密码）\n\n# SessionStorage\n\n1. 同上\n2. 同上\n3. 同上\n4. 同上\n5. SessionStorage 在用户关闭页面（会话结束）后就失效\n\n# HTTP 缓存\n\n## Cache-Control\n\n1. `Cache-Control: max-age=300`，当用户 300s 内提交请求时，不会像服务器重新请求\n2. 首页不要用缓存\n\n## Expire\n\n1. 和 Cache-Control 类似，优先使用 Cache-Control\n2. `Expires: Wed, 21 Oct 2015 07:28:00 GMT`，在某时刻之前的，都不会像服务器重新请求，但是这个‘时刻’是参照本地时间的，会有风险\n\n## ETag\n\n1. 服务器响应头有 Etag，其值为响应内容的 MD5\n2. 客户端再次访问给定的 URL，会返回 If-None-Match 请求头，值还是 Etag 的值\n3. 如果服务器响应内容没更新， 则 If-None-Match 的值和 Etag 的值一致，服务器返回 304；如果值不一致，则表示服务器内容有更新，需要重新下载。\n\n## Last-Modified\n\n1. The Last-Modified 是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致。\n\n2. If-Modified-Since 是由客户端往服务器发送的请求头，服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 。如果请求的资源从那时起未经修改，那么返回一个不带有消息主体的 304 响应，而在 Last-Modified 首部中会带有上次修改时间。\n","source":"_posts/Session、LocalStorage、HTTP缓存.md","raw":"---\ntitle: Session、LocalStorage、HTTP缓存\ndate: 2019-01-08 00:00:00\nupdated: 2019-01-08 00:00:00\ntags:\n  - Session\n  - LocalStorage\n  - Cache-Control\n  - HTTP缓存\n---\n\n# Session\n\n1. 将 SessionID（随机数）通过 Cookie 发给客户端(Session 可以用 LocalStorage + 查询参数实现)\n2. 客户端访问服务器时，服务器读取 SessionID\n3. 服务器有一块内存（哈希表）保存了所有 session\n4. 通过 SessionID 我们可以得到对应用户的隐私信息，如 id、email\n5. 这块内存（哈希表）就是服务器上的所有 session\n6. 页面关闭的时候，会清空 SessionStorage\n7. Session 在服务器的默认有效时间是 30 分钟,可以通过代码控制失效时间\n\n<!-- more -->\n\n# LocalStorage\n\n1. LocalStorage 跟 HTTP 无关\n2. HTTP 不会带上 LocalStorage 的值\n3. 只有相同域名的页面才能互相读取 LocalStorage（没有同源那么严格）\n4. 每个域名 localStorage 最大存储量为 5Mb 左右（每个浏览器不一样）\n5. LocalStorage 永久有效，除非用户清理缓存\n6. 常用场景：记录有没有提示过用户（没有用的信息，不能记录密码）\n\n# SessionStorage\n\n1. 同上\n2. 同上\n3. 同上\n4. 同上\n5. SessionStorage 在用户关闭页面（会话结束）后就失效\n\n# HTTP 缓存\n\n## Cache-Control\n\n1. `Cache-Control: max-age=300`，当用户 300s 内提交请求时，不会像服务器重新请求\n2. 首页不要用缓存\n\n## Expire\n\n1. 和 Cache-Control 类似，优先使用 Cache-Control\n2. `Expires: Wed, 21 Oct 2015 07:28:00 GMT`，在某时刻之前的，都不会像服务器重新请求，但是这个‘时刻’是参照本地时间的，会有风险\n\n## ETag\n\n1. 服务器响应头有 Etag，其值为响应内容的 MD5\n2. 客户端再次访问给定的 URL，会返回 If-None-Match 请求头，值还是 Etag 的值\n3. 如果服务器响应内容没更新， 则 If-None-Match 的值和 Etag 的值一致，服务器返回 304；如果值不一致，则表示服务器内容有更新，需要重新下载。\n\n## Last-Modified\n\n1. The Last-Modified 是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致。\n\n2. If-Modified-Since 是由客户端往服务器发送的请求头，服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 。如果请求的资源从那时起未经修改，那么返回一个不带有消息主体的 304 响应，而在 Last-Modified 首部中会带有上次修改时间。\n","slug":"Session、LocalStorage、HTTP缓存","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpww000tk4u97eyxbn0a","content":"<h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h1><ol>\n<li>将 SessionID（随机数）通过 Cookie 发给客户端(Session 可以用 LocalStorage + 查询参数实现)</li>\n<li>客户端访问服务器时，服务器读取 SessionID</li>\n<li>服务器有一块内存（哈希表）保存了所有 session</li>\n<li>通过 SessionID 我们可以得到对应用户的隐私信息，如 id、email</li>\n<li>这块内存（哈希表）就是服务器上的所有 session</li>\n<li>页面关闭的时候，会清空 SessionStorage</li>\n<li>Session 在服务器的默认有效时间是 30 分钟,可以通过代码控制失效时间</li>\n</ol>\n<span id=\"more\"></span>\n\n<h1 id=\"LocalStorage\"><a href=\"#LocalStorage\" class=\"headerlink\" title=\"LocalStorage\"></a>LocalStorage</h1><ol>\n<li>LocalStorage 跟 HTTP 无关</li>\n<li>HTTP 不会带上 LocalStorage 的值</li>\n<li>只有相同域名的页面才能互相读取 LocalStorage（没有同源那么严格）</li>\n<li>每个域名 localStorage 最大存储量为 5Mb 左右（每个浏览器不一样）</li>\n<li>LocalStorage 永久有效，除非用户清理缓存</li>\n<li>常用场景：记录有没有提示过用户（没有用的信息，不能记录密码）</li>\n</ol>\n<h1 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h1><ol>\n<li>同上</li>\n<li>同上</li>\n<li>同上</li>\n<li>同上</li>\n<li>SessionStorage 在用户关闭页面（会话结束）后就失效</li>\n</ol>\n<h1 id=\"HTTP-缓存\"><a href=\"#HTTP-缓存\" class=\"headerlink\" title=\"HTTP 缓存\"></a>HTTP 缓存</h1><h2 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h2><ol>\n<li><code>Cache-Control: max-age=300</code>，当用户 300s 内提交请求时，不会像服务器重新请求</li>\n<li>首页不要用缓存</li>\n</ol>\n<h2 id=\"Expire\"><a href=\"#Expire\" class=\"headerlink\" title=\"Expire\"></a>Expire</h2><ol>\n<li>和 Cache-Control 类似，优先使用 Cache-Control</li>\n<li><code>Expires: Wed, 21 Oct 2015 07:28:00 GMT</code>，在某时刻之前的，都不会像服务器重新请求，但是这个‘时刻’是参照本地时间的，会有风险</li>\n</ol>\n<h2 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h2><ol>\n<li>服务器响应头有 Etag，其值为响应内容的 MD5</li>\n<li>客户端再次访问给定的 URL，会返回 If-None-Match 请求头，值还是 Etag 的值</li>\n<li>如果服务器响应内容没更新， 则 If-None-Match 的值和 Etag 的值一致，服务器返回 304；如果值不一致，则表示服务器内容有更新，需要重新下载。</li>\n</ol>\n<h2 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h2><ol>\n<li><p>The Last-Modified 是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致。</p>\n</li>\n<li><p>If-Modified-Since 是由客户端往服务器发送的请求头，服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 。如果请求的资源从那时起未经修改，那么返回一个不带有消息主体的 304 响应，而在 Last-Modified 首部中会带有上次修改时间。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h1><ol>\n<li>将 SessionID（随机数）通过 Cookie 发给客户端(Session 可以用 LocalStorage + 查询参数实现)</li>\n<li>客户端访问服务器时，服务器读取 SessionID</li>\n<li>服务器有一块内存（哈希表）保存了所有 session</li>\n<li>通过 SessionID 我们可以得到对应用户的隐私信息，如 id、email</li>\n<li>这块内存（哈希表）就是服务器上的所有 session</li>\n<li>页面关闭的时候，会清空 SessionStorage</li>\n<li>Session 在服务器的默认有效时间是 30 分钟,可以通过代码控制失效时间</li>\n</ol>","more":"<h1 id=\"LocalStorage\"><a href=\"#LocalStorage\" class=\"headerlink\" title=\"LocalStorage\"></a>LocalStorage</h1><ol>\n<li>LocalStorage 跟 HTTP 无关</li>\n<li>HTTP 不会带上 LocalStorage 的值</li>\n<li>只有相同域名的页面才能互相读取 LocalStorage（没有同源那么严格）</li>\n<li>每个域名 localStorage 最大存储量为 5Mb 左右（每个浏览器不一样）</li>\n<li>LocalStorage 永久有效，除非用户清理缓存</li>\n<li>常用场景：记录有没有提示过用户（没有用的信息，不能记录密码）</li>\n</ol>\n<h1 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h1><ol>\n<li>同上</li>\n<li>同上</li>\n<li>同上</li>\n<li>同上</li>\n<li>SessionStorage 在用户关闭页面（会话结束）后就失效</li>\n</ol>\n<h1 id=\"HTTP-缓存\"><a href=\"#HTTP-缓存\" class=\"headerlink\" title=\"HTTP 缓存\"></a>HTTP 缓存</h1><h2 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h2><ol>\n<li><code>Cache-Control: max-age=300</code>，当用户 300s 内提交请求时，不会像服务器重新请求</li>\n<li>首页不要用缓存</li>\n</ol>\n<h2 id=\"Expire\"><a href=\"#Expire\" class=\"headerlink\" title=\"Expire\"></a>Expire</h2><ol>\n<li>和 Cache-Control 类似，优先使用 Cache-Control</li>\n<li><code>Expires: Wed, 21 Oct 2015 07:28:00 GMT</code>，在某时刻之前的，都不会像服务器重新请求，但是这个‘时刻’是参照本地时间的，会有风险</li>\n</ol>\n<h2 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h2><ol>\n<li>服务器响应头有 Etag，其值为响应内容的 MD5</li>\n<li>客户端再次访问给定的 URL，会返回 If-None-Match 请求头，值还是 Etag 的值</li>\n<li>如果服务器响应内容没更新， 则 If-None-Match 的值和 Etag 的值一致，服务器返回 304；如果值不一致，则表示服务器内容有更新，需要重新下载。</li>\n</ol>\n<h2 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h2><ol>\n<li><p>The Last-Modified 是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致。</p>\n</li>\n<li><p>If-Modified-Since 是由客户端往服务器发送的请求头，服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 。如果请求的资源从那时起未经修改，那么返回一个不带有消息主体的 304 响应，而在 Last-Modified 首部中会带有上次修改时间。</p>\n</li>\n</ol>"},{"title":"VSCode 配置跳转定义","date":"2021-03-17T16:00:00.000Z","updated":"2021-03-17T16:00:00.000Z","_content":"\n使用 VSCode 的时候，有时想 F12 查看引用组件的内容，不会自动跳转，很不爽。今天鼓捣了一下，总算是可以跳转引用了。\n\n<!-- more -->\n\n在项目根目录增加该文件，并且在使用'@'别名的路径时，也会自动提示。\n\n```\n{\n  \"compilerOptions\": {\n      \"target\": \"ES6\",\n      \"module\": \"commonjs\",\n      \"allowSyntheticDefaultImports\": true,\n      \"baseUrl\": \"./\",\n      \"paths\": {\n        \"@/*\": [\"src/*\"]\n      }\n  },\n  \"exclude\": [\n      \"node_modules\"\n  ]\n}\n```\n\n> [vs code 中路径别名（@）提示和转定义等问题 ](https://www.jianshu.com/p/1798d57ecdab)\n","source":"_posts/VSCode 配置跳转定义.md","raw":"---\ntitle: VSCode 配置跳转定义\ndate: 2021-03-18 00:00:00\nupdated: 2021-03-18 00:00:00\ntags:\n  - VSCode\n---\n\n使用 VSCode 的时候，有时想 F12 查看引用组件的内容，不会自动跳转，很不爽。今天鼓捣了一下，总算是可以跳转引用了。\n\n<!-- more -->\n\n在项目根目录增加该文件，并且在使用'@'别名的路径时，也会自动提示。\n\n```\n{\n  \"compilerOptions\": {\n      \"target\": \"ES6\",\n      \"module\": \"commonjs\",\n      \"allowSyntheticDefaultImports\": true,\n      \"baseUrl\": \"./\",\n      \"paths\": {\n        \"@/*\": [\"src/*\"]\n      }\n  },\n  \"exclude\": [\n      \"node_modules\"\n  ]\n}\n```\n\n> [vs code 中路径别名（@）提示和转定义等问题 ](https://www.jianshu.com/p/1798d57ecdab)\n","slug":"VSCode 配置跳转定义","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwx000uk4u95801et3b","content":"<p>使用 VSCode 的时候，有时想 F12 查看引用组件的内容，不会自动跳转，很不爽。今天鼓捣了一下，总算是可以跳转引用了。</p>\n<span id=\"more\"></span>\n\n<p>在项目根目录增加该文件，并且在使用‘@’别名的路径时，也会自动提示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">      &quot;target&quot;: &quot;ES6&quot;,</span><br><span class=\"line\">      &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">      &quot;allowSyntheticDefaultImports&quot;: true,</span><br><span class=\"line\">      &quot;baseUrl&quot;: &quot;./&quot;,</span><br><span class=\"line\">      &quot;paths&quot;: &#123;</span><br><span class=\"line\">        &quot;@/*&quot;: [&quot;src/*&quot;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;exclude&quot;: [</span><br><span class=\"line\">      &quot;node_modules&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/1798d57ecdab\">vs code 中路径别名（@）提示和转定义等问题 </a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>使用 VSCode 的时候，有时想 F12 查看引用组件的内容，不会自动跳转，很不爽。今天鼓捣了一下，总算是可以跳转引用了。</p>","more":"<p>在项目根目录增加该文件，并且在使用‘@’别名的路径时，也会自动提示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">      &quot;target&quot;: &quot;ES6&quot;,</span><br><span class=\"line\">      &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">      &quot;allowSyntheticDefaultImports&quot;: true,</span><br><span class=\"line\">      &quot;baseUrl&quot;: &quot;./&quot;,</span><br><span class=\"line\">      &quot;paths&quot;: &#123;</span><br><span class=\"line\">        &quot;@/*&quot;: [&quot;src/*&quot;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;exclude&quot;: [</span><br><span class=\"line\">      &quot;node_modules&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/1798d57ecdab\">vs code 中路径别名（@）提示和转定义等问题 </a></p>\n</blockquote>"},{"title":"Vue Router的基本使用","date":"2019-04-16T16:00:00.000Z","updated":"2019-04-16T16:00:00.000Z","_content":"\nVue Router 是 Vue.js 官方的路由管理器。现总结一下之前的使用方式。\n\n<!-- more -->\n\n# 使用 Vue Router\n\n在安装 Vue 的时候，会有选项是否安装 Vue Router ，选择 `Y` 即可，如果当时选择了否，则：\n\n```\nnpm i  vue-router\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n```\n\n# 动态路由\n\n```javascript\nconst router = new Router({\n  routes: [\n    {\n      name: 'topic',\n      path: '/topic/:id&:loginname',\n      components: {\n        main: Article\n      }\n    }\n  ]\n})\n```\n\n形如上述形式的路径即为动态路由，冒号后是参数，可以跟多段参数，每个参数都被设置到 this.$route.params 中。\n\n在 Vue Router 的官方文档中有说明：当参数变化时，组件会被复用，因此组件生命周期钩子不会被再次调用，即当路由一致，参数不一致时，页面不会跳转。\n\n复用组建时，可以通过 watch 监听$route 对象的变化来监测路由是否变化。路由钩子 beforeRouterUpdate 也可以行。\n\n# 命名视图\n\n有时候想同时（同级）展示多个视图，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。\n\n```html\n<router-view name=\"main\"></router-view> <router-view name=\"slidebar\"></router-view>\n```\n\n```javascript\nconst router = new Router({\n  routes: [\n    {\n      name: 'topic',\n      path: '/topic/:id&:loginname',\n      components: {\n        main: Article,\n        slidebar: Slidebar\n      }\n    }\n  ]\n})\n```\n\n# 路由元信息\n\n```javascript\nconst router = new Router({\n  routes: [\n    {\n      path: '/Create',\n      component: () => import('@/pages/Create/template.vue'), //懒加载\n      meta: { requiresAuth: true }\n    }\n  ]\n})\n\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    // if not, redirect to login page.\n    store.dispatch('checkLogin').then(isLogin => {\n      if (!isLogin) {\n        next({\n          path: '/login',\n          query: { redirect: to.fullPath }\n        })\n      } else {\n        next()\n      }\n    })\n  } else {\n    next() // 确保一定要调用 next()\n  }\n})\n```\n\n上面的例子 `/Create` 路由设置了 `meta: {requiresAuth: true}`，访问该页面需要认证。如未认证，则会跳转到登录页面。\n\n# 编程式导航\n\n除了使用 <router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。\n\n```\nrouter.push(location)\n```\n\n想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。\n\n当你点击 <router-link> 时，这个方法会在内部调用，所以说，点击 <router-link :to=\"...\"> 等同于调用 router.push(...)。\n\n# History 模式\n\nvue-router 默认 hash 模式(url 有个符号#) —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。\n\n如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问就会返回 404，这就不好看了。\n\n> 引用\n\n- [vue-router 使用总结](https://juejin.im/entry/597ab13d5188253e0a62efcb)\n- [router 安装及使用](https://www.jianshu.com/p/ac873b45da36)\n- [Vue Router](https://router.vuejs.org/zh/)\n","source":"_posts/Vue Router的基本使用.md","raw":"---\ntitle: Vue Router的基本使用\ndate: 2019-04-17 00:00:00\nupdated: 2019-04-17 00:00:00\ntags:\n  - Vue\n  - Vue Router\n---\n\nVue Router 是 Vue.js 官方的路由管理器。现总结一下之前的使用方式。\n\n<!-- more -->\n\n# 使用 Vue Router\n\n在安装 Vue 的时候，会有选项是否安装 Vue Router ，选择 `Y` 即可，如果当时选择了否，则：\n\n```\nnpm i  vue-router\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n```\n\n# 动态路由\n\n```javascript\nconst router = new Router({\n  routes: [\n    {\n      name: 'topic',\n      path: '/topic/:id&:loginname',\n      components: {\n        main: Article\n      }\n    }\n  ]\n})\n```\n\n形如上述形式的路径即为动态路由，冒号后是参数，可以跟多段参数，每个参数都被设置到 this.$route.params 中。\n\n在 Vue Router 的官方文档中有说明：当参数变化时，组件会被复用，因此组件生命周期钩子不会被再次调用，即当路由一致，参数不一致时，页面不会跳转。\n\n复用组建时，可以通过 watch 监听$route 对象的变化来监测路由是否变化。路由钩子 beforeRouterUpdate 也可以行。\n\n# 命名视图\n\n有时候想同时（同级）展示多个视图，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。\n\n```html\n<router-view name=\"main\"></router-view> <router-view name=\"slidebar\"></router-view>\n```\n\n```javascript\nconst router = new Router({\n  routes: [\n    {\n      name: 'topic',\n      path: '/topic/:id&:loginname',\n      components: {\n        main: Article,\n        slidebar: Slidebar\n      }\n    }\n  ]\n})\n```\n\n# 路由元信息\n\n```javascript\nconst router = new Router({\n  routes: [\n    {\n      path: '/Create',\n      component: () => import('@/pages/Create/template.vue'), //懒加载\n      meta: { requiresAuth: true }\n    }\n  ]\n})\n\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    // if not, redirect to login page.\n    store.dispatch('checkLogin').then(isLogin => {\n      if (!isLogin) {\n        next({\n          path: '/login',\n          query: { redirect: to.fullPath }\n        })\n      } else {\n        next()\n      }\n    })\n  } else {\n    next() // 确保一定要调用 next()\n  }\n})\n```\n\n上面的例子 `/Create` 路由设置了 `meta: {requiresAuth: true}`，访问该页面需要认证。如未认证，则会跳转到登录页面。\n\n# 编程式导航\n\n除了使用 <router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。\n\n```\nrouter.push(location)\n```\n\n想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。\n\n当你点击 <router-link> 时，这个方法会在内部调用，所以说，点击 <router-link :to=\"...\"> 等同于调用 router.push(...)。\n\n# History 模式\n\nvue-router 默认 hash 模式(url 有个符号#) —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。\n\n如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问就会返回 404，这就不好看了。\n\n> 引用\n\n- [vue-router 使用总结](https://juejin.im/entry/597ab13d5188253e0a62efcb)\n- [router 安装及使用](https://www.jianshu.com/p/ac873b45da36)\n- [Vue Router](https://router.vuejs.org/zh/)\n","slug":"Vue Router的基本使用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwy000xk4u9goh6hg7p","content":"<p>Vue Router 是 Vue.js 官方的路由管理器。现总结一下之前的使用方式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"使用-Vue-Router\"><a href=\"#使用-Vue-Router\" class=\"headerlink\" title=\"使用 Vue Router\"></a>使用 Vue Router</h1><p>在安装 Vue 的时候，会有选项是否安装 Vue Router ，选择 <code>Y</code> 即可，如果当时选择了否，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i  vue-router</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import VueRouter from &#x27;vue-router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;topic&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/topic/:id&amp;:loginname&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: Article</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>形如上述形式的路径即为动态路由，冒号后是参数，可以跟多段参数，每个参数都被设置到 this.$route.params 中。</p>\n<p>在 Vue Router 的官方文档中有说明：当参数变化时，组件会被复用，因此组件生命周期钩子不会被再次调用，即当路由一致，参数不一致时，页面不会跳转。</p>\n<p>复用组建时，可以通过 watch 监听$route 对象的变化来监测路由是否变化。路由钩子 beforeRouterUpdate 也可以行。</p>\n<h1 id=\"命名视图\"><a href=\"#命名视图\" class=\"headerlink\" title=\"命名视图\"></a>命名视图</h1><p>有时候想同时（同级）展示多个视图，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;slidebar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;topic&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/topic/:id&amp;:loginname&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: Article,</span><br><span class=\"line\">        <span class=\"attr\">slidebar</span>: Slidebar</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路由元信息\"><a href=\"#路由元信息\" class=\"headerlink\" title=\"路由元信息\"></a>路由元信息</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/Create&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/pages/Create/template.vue&#x27;</span>), <span class=\"comment\">//懒加载</span></span><br><span class=\"line\">      <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.matched.some(<span class=\"function\"><span class=\"params\">record</span> =&gt;</span> record.meta.requiresAuth)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this route requires auth, check if logged in</span></span><br><span class=\"line\">    <span class=\"comment\">// if not, redirect to login page.</span></span><br><span class=\"line\">    store.dispatch(<span class=\"string\">&#x27;checkLogin&#x27;</span>).then(<span class=\"function\"><span class=\"params\">isLogin</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isLogin) &#123;</span><br><span class=\"line\">        next(&#123;</span><br><span class=\"line\">          <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/login&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">query</span>: &#123; <span class=\"attr\">redirect</span>: to.fullPath &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        next()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next() <span class=\"comment\">// 确保一定要调用 next()</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子 <code>/Create</code> 路由设置了 <code>meta: &#123;requiresAuth: true&#125;</code>，访问该页面需要认证。如未认证，则会跳转到登录页面。</p>\n<h1 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h1><p>除了使用 <router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.push(location)</span><br></pre></td></tr></table></figure>\n\n<p>想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p>\n<p>当你点击 <router-link> 时，这个方法会在内部调用，所以说，点击 <router-link :to=\"...\"> 等同于调用 router.push(…)。</p>\n<h1 id=\"History-模式\"><a href=\"#History-模式\" class=\"headerlink\" title=\"History 模式\"></a>History 模式</h1><p>vue-router 默认 hash 模式(url 有个符号#) —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p>\n<p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问就会返回 404，这就不好看了。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://juejin.im/entry/597ab13d5188253e0a62efcb\">vue-router 使用总结</a></li>\n<li><a href=\"https://www.jianshu.com/p/ac873b45da36\">router 安装及使用</a></li>\n<li><a href=\"https://router.vuejs.org/zh/\">Vue Router</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Vue Router 是 Vue.js 官方的路由管理器。现总结一下之前的使用方式。</p>","more":"<h1 id=\"使用-Vue-Router\"><a href=\"#使用-Vue-Router\" class=\"headerlink\" title=\"使用 Vue Router\"></a>使用 Vue Router</h1><p>在安装 Vue 的时候，会有选项是否安装 Vue Router ，选择 <code>Y</code> 即可，如果当时选择了否，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i  vue-router</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import VueRouter from &#x27;vue-router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;topic&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/topic/:id&amp;:loginname&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: Article</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>形如上述形式的路径即为动态路由，冒号后是参数，可以跟多段参数，每个参数都被设置到 this.$route.params 中。</p>\n<p>在 Vue Router 的官方文档中有说明：当参数变化时，组件会被复用，因此组件生命周期钩子不会被再次调用，即当路由一致，参数不一致时，页面不会跳转。</p>\n<p>复用组建时，可以通过 watch 监听$route 对象的变化来监测路由是否变化。路由钩子 beforeRouterUpdate 也可以行。</p>\n<h1 id=\"命名视图\"><a href=\"#命名视图\" class=\"headerlink\" title=\"命名视图\"></a>命名视图</h1><p>有时候想同时（同级）展示多个视图，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;slidebar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;topic&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/topic/:id&amp;:loginname&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: Article,</span><br><span class=\"line\">        <span class=\"attr\">slidebar</span>: Slidebar</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路由元信息\"><a href=\"#路由元信息\" class=\"headerlink\" title=\"路由元信息\"></a>路由元信息</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/Create&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/pages/Create/template.vue&#x27;</span>), <span class=\"comment\">//懒加载</span></span><br><span class=\"line\">      <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.matched.some(<span class=\"function\"><span class=\"params\">record</span> =&gt;</span> record.meta.requiresAuth)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this route requires auth, check if logged in</span></span><br><span class=\"line\">    <span class=\"comment\">// if not, redirect to login page.</span></span><br><span class=\"line\">    store.dispatch(<span class=\"string\">&#x27;checkLogin&#x27;</span>).then(<span class=\"function\"><span class=\"params\">isLogin</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isLogin) &#123;</span><br><span class=\"line\">        next(&#123;</span><br><span class=\"line\">          <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/login&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">query</span>: &#123; <span class=\"attr\">redirect</span>: to.fullPath &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        next()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next() <span class=\"comment\">// 确保一定要调用 next()</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子 <code>/Create</code> 路由设置了 <code>meta: &#123;requiresAuth: true&#125;</code>，访问该页面需要认证。如未认证，则会跳转到登录页面。</p>\n<h1 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h1><p>除了使用 <router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.push(location)</span><br></pre></td></tr></table></figure>\n\n<p>想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p>\n<p>当你点击 <router-link> 时，这个方法会在内部调用，所以说，点击 <router-link :to=\"...\"> 等同于调用 router.push(…)。</p>\n<h1 id=\"History-模式\"><a href=\"#History-模式\" class=\"headerlink\" title=\"History 模式\"></a>History 模式</h1><p>vue-router 默认 hash 模式(url 有个符号#) —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p>\n<p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问就会返回 404，这就不好看了。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://juejin.im/entry/597ab13d5188253e0a62efcb\">vue-router 使用总结</a></li>\n<li><a href=\"https://www.jianshu.com/p/ac873b45da36\">router 安装及使用</a></li>\n<li><a href=\"https://router.vuejs.org/zh/\">Vue Router</a></li>\n</ul>"},{"title":"Vue diff 算法解析","date":"2020-08-25T16:00:00.000Z","updated":"2020-08-25T16:00:00.000Z","_content":"\ndiff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)。在 Vue 虚拟 DOM 渲染成真实 DOM 的新旧 VNode 节点比较更新时，就用到了该算法。\n\n<!-- more -->\n\n### 当数据发生变化时，Vue 是怎么更新节点的？\n\nVue 根据真实 DOM 生成一颗 virtual DOM，当 virtual DOM 某个节点的`数据`改变后会生成一个新的 Vnode，然后 Vnode 和 oldVnode 作对比，发现有不一样的地方就直接修改在真实的 DOM 上，然后使 oldVnode 的值为 Vnode。\n\ndiff 的过程就是调用名为 patch 的函数，比较新旧节点，一边比较一边给真实的 DOM 打补丁。\n\n当数据发生改变时，defineProperty set 方法会让调用 Dep.notify 通知所有订阅者 Watcher，订阅者就会调用 patch 给真实的 DOM 打补丁，更新相应的视图。\n\n### diff 算法特点\n\n1. 比较只会在同层级进行, 不会跨层级比较。\n2. 在 diff 比较的过程中，循环从两边向中间收拢。\n\n### diff 流程\n\n1. 对新老 VNode 的开始和结束位置进行标记：oldStartIdx、oldEndIdx、newStartIdx、newEndIdx。\n\n2. 标记好节点位置之后，就开始进入到的 while 循环处理中，这里是 diff 算法的核心流程，分情况进行了新老节点的比较并移动对应的 VNode 节点。while 循环的退出条件是直到老节点或者新节点的开始位置大于结束位置。循环过程中首先对新老 VNode 节点的头尾进行比较，寻找相同节点，当其中两个能匹配上那么真实 DOM 中的相应节点会移到 Vnode 相应的位置。\n\n   1. 如果是 oldStartIdx 和 newEndIdx 匹配上了，那么将当前真实 DOM 移到 oldEndIdx 后面，匹配上的两个指针向中间移动；\n   2. 如果是 oldEndIdx 和 newStartIdx 匹配上了，那么将当前真实 DOM 移到 oldStartIdx 前面，匹配上的两个指针向中间移动；\n   3. 如果 oldStartIdx 和 newStartIdx ，真实 DOM 中的相应节点移到 Vnode 相应的位置，匹配上的两个指针向中间移动；\n   4. 如果 oldEndIdx 和 newEndIdx 匹配上了，匹配上的两个指针向中间移动；\n   5. 如果四种匹配没有一对是成功，那么会根据旧的 VNode 的 key 生成一张 hash 表，用 newStartIdx 的 key 与 hash 表做匹配，匹配成功就判断 newStartIdx 和匹配节点是否为 sameNode，如果是，就将真实 DOM 移到 oldStartIdx 前面，否则则说明当前索引下的新的 VNode 节点在旧的 VNode 队列中不存在，无法进行节点的复用，那么就只能调用 createElm 创建一个新的 DOM 节点放到当前 oldStartIdx 的位置。newStartIdx 指针向中间移动，被匹配 old 中的节点置为 null。\n\n### 案例演练\n\n假设以下所有节点都是有 key 的，且 key 为自身的值\n\n- old:a-b-c-d\n- new:a-c-b-e-f\n\n```\noldStartIdx:a;\noldEndIdx:d;\nnewStartIdx:a\nnewEndIdx:f\n\noldStartIdx 和 newStartIdx 匹配，说明位置没变，此时 DOM 位置 a-b-c-d，此时指针：\n\noldStartIdx: b;\noldEndIdx: d;\nnewStartIdx: c\nnewEndIdx: f\n\n一个都没有匹配到，然后 c 匹配到旧的 VNode，将 c 放到 oldStartIdx前，此时 DOM 位置 a-c-b-d，此时指针：\n\noldStartIdx: b;\noldEndIdx: d;\nnewStartIdx: b\nnewEndIdx: f\n\noldStartIdx 和 newStartIdx 匹配，说明位置没变，此时 DOM 位置 a-c-b-d，此时指针：\n\noldStartIdx: d;\noldEndIdx: d;\nnewStartIdx: e\nnewEndIdx: f\n\n一个都没有匹配到，然后 e 未匹配到旧的 VNode，将创建的 e 放到 oldStartIdx前，被匹配 old 中的节点置为 null。此时 DOM 位置 a-c-b-e\n\n遍历结束，说明旧的 VNode先遍历完。就将剩余的 VNode 节点根据自己的的index插入到真实DOM中去，此时 DOM 位置为：a-c-b-e-f\n\n一次模拟完成。\n\n这个匹配过程的结束有两个条件：\n\n1. oldStartIdx > oldEndIdx 表示旧 VNode 先遍历完，那么就将多余的 VNode 根据index添加到DOM中去；\n2. newStartIdx > newEndIdx 表示新 VNode 先遍历完，那么就在真实 DOM 中将区间为[oldStartIdx, oldEndIdx]的多余节点删掉\n```\n\n> 引用\n\n- [Vue 的 diff 算法解析](https://www.infoq.cn/article/uDLCPKH4iQb0cR5wGY7f)\n- [详解 Vue 的 diff 算法](https://juejin.im/post/6844903607913938951#heading-3)\n","source":"_posts/Vue diff 算法解析.md","raw":"---\ntitle: Vue diff 算法解析\ndate: 2020-08-26 00:00:00\nupdated: 2020-08-26 00:00:00\ntags:\n  - Vue\n  - diff\n  - 算法\n---\n\ndiff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)。在 Vue 虚拟 DOM 渲染成真实 DOM 的新旧 VNode 节点比较更新时，就用到了该算法。\n\n<!-- more -->\n\n### 当数据发生变化时，Vue 是怎么更新节点的？\n\nVue 根据真实 DOM 生成一颗 virtual DOM，当 virtual DOM 某个节点的`数据`改变后会生成一个新的 Vnode，然后 Vnode 和 oldVnode 作对比，发现有不一样的地方就直接修改在真实的 DOM 上，然后使 oldVnode 的值为 Vnode。\n\ndiff 的过程就是调用名为 patch 的函数，比较新旧节点，一边比较一边给真实的 DOM 打补丁。\n\n当数据发生改变时，defineProperty set 方法会让调用 Dep.notify 通知所有订阅者 Watcher，订阅者就会调用 patch 给真实的 DOM 打补丁，更新相应的视图。\n\n### diff 算法特点\n\n1. 比较只会在同层级进行, 不会跨层级比较。\n2. 在 diff 比较的过程中，循环从两边向中间收拢。\n\n### diff 流程\n\n1. 对新老 VNode 的开始和结束位置进行标记：oldStartIdx、oldEndIdx、newStartIdx、newEndIdx。\n\n2. 标记好节点位置之后，就开始进入到的 while 循环处理中，这里是 diff 算法的核心流程，分情况进行了新老节点的比较并移动对应的 VNode 节点。while 循环的退出条件是直到老节点或者新节点的开始位置大于结束位置。循环过程中首先对新老 VNode 节点的头尾进行比较，寻找相同节点，当其中两个能匹配上那么真实 DOM 中的相应节点会移到 Vnode 相应的位置。\n\n   1. 如果是 oldStartIdx 和 newEndIdx 匹配上了，那么将当前真实 DOM 移到 oldEndIdx 后面，匹配上的两个指针向中间移动；\n   2. 如果是 oldEndIdx 和 newStartIdx 匹配上了，那么将当前真实 DOM 移到 oldStartIdx 前面，匹配上的两个指针向中间移动；\n   3. 如果 oldStartIdx 和 newStartIdx ，真实 DOM 中的相应节点移到 Vnode 相应的位置，匹配上的两个指针向中间移动；\n   4. 如果 oldEndIdx 和 newEndIdx 匹配上了，匹配上的两个指针向中间移动；\n   5. 如果四种匹配没有一对是成功，那么会根据旧的 VNode 的 key 生成一张 hash 表，用 newStartIdx 的 key 与 hash 表做匹配，匹配成功就判断 newStartIdx 和匹配节点是否为 sameNode，如果是，就将真实 DOM 移到 oldStartIdx 前面，否则则说明当前索引下的新的 VNode 节点在旧的 VNode 队列中不存在，无法进行节点的复用，那么就只能调用 createElm 创建一个新的 DOM 节点放到当前 oldStartIdx 的位置。newStartIdx 指针向中间移动，被匹配 old 中的节点置为 null。\n\n### 案例演练\n\n假设以下所有节点都是有 key 的，且 key 为自身的值\n\n- old:a-b-c-d\n- new:a-c-b-e-f\n\n```\noldStartIdx:a;\noldEndIdx:d;\nnewStartIdx:a\nnewEndIdx:f\n\noldStartIdx 和 newStartIdx 匹配，说明位置没变，此时 DOM 位置 a-b-c-d，此时指针：\n\noldStartIdx: b;\noldEndIdx: d;\nnewStartIdx: c\nnewEndIdx: f\n\n一个都没有匹配到，然后 c 匹配到旧的 VNode，将 c 放到 oldStartIdx前，此时 DOM 位置 a-c-b-d，此时指针：\n\noldStartIdx: b;\noldEndIdx: d;\nnewStartIdx: b\nnewEndIdx: f\n\noldStartIdx 和 newStartIdx 匹配，说明位置没变，此时 DOM 位置 a-c-b-d，此时指针：\n\noldStartIdx: d;\noldEndIdx: d;\nnewStartIdx: e\nnewEndIdx: f\n\n一个都没有匹配到，然后 e 未匹配到旧的 VNode，将创建的 e 放到 oldStartIdx前，被匹配 old 中的节点置为 null。此时 DOM 位置 a-c-b-e\n\n遍历结束，说明旧的 VNode先遍历完。就将剩余的 VNode 节点根据自己的的index插入到真实DOM中去，此时 DOM 位置为：a-c-b-e-f\n\n一次模拟完成。\n\n这个匹配过程的结束有两个条件：\n\n1. oldStartIdx > oldEndIdx 表示旧 VNode 先遍历完，那么就将多余的 VNode 根据index添加到DOM中去；\n2. newStartIdx > newEndIdx 表示新 VNode 先遍历完，那么就在真实 DOM 中将区间为[oldStartIdx, oldEndIdx]的多余节点删掉\n```\n\n> 引用\n\n- [Vue 的 diff 算法解析](https://www.infoq.cn/article/uDLCPKH4iQb0cR5wGY7f)\n- [详解 Vue 的 diff 算法](https://juejin.im/post/6844903607913938951#heading-3)\n","slug":"Vue diff 算法解析","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpwy000zk4u94vyo8j7x","content":"<p>diff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)。在 Vue 虚拟 DOM 渲染成真实 DOM 的新旧 VNode 节点比较更新时，就用到了该算法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"当数据发生变化时，Vue-是怎么更新节点的？\"><a href=\"#当数据发生变化时，Vue-是怎么更新节点的？\" class=\"headerlink\" title=\"当数据发生变化时，Vue 是怎么更新节点的？\"></a>当数据发生变化时，Vue 是怎么更新节点的？</h3><p>Vue 根据真实 DOM 生成一颗 virtual DOM，当 virtual DOM 某个节点的<code>数据</code>改变后会生成一个新的 Vnode，然后 Vnode 和 oldVnode 作对比，发现有不一样的地方就直接修改在真实的 DOM 上，然后使 oldVnode 的值为 Vnode。</p>\n<p>diff 的过程就是调用名为 patch 的函数，比较新旧节点，一边比较一边给真实的 DOM 打补丁。</p>\n<p>当数据发生改变时，defineProperty set 方法会让调用 Dep.notify 通知所有订阅者 Watcher，订阅者就会调用 patch 给真实的 DOM 打补丁，更新相应的视图。</p>\n<h3 id=\"diff-算法特点\"><a href=\"#diff-算法特点\" class=\"headerlink\" title=\"diff 算法特点\"></a>diff 算法特点</h3><ol>\n<li>比较只会在同层级进行, 不会跨层级比较。</li>\n<li>在 diff 比较的过程中，循环从两边向中间收拢。</li>\n</ol>\n<h3 id=\"diff-流程\"><a href=\"#diff-流程\" class=\"headerlink\" title=\"diff 流程\"></a>diff 流程</h3><ol>\n<li><p>对新老 VNode 的开始和结束位置进行标记：oldStartIdx、oldEndIdx、newStartIdx、newEndIdx。</p>\n</li>\n<li><p>标记好节点位置之后，就开始进入到的 while 循环处理中，这里是 diff 算法的核心流程，分情况进行了新老节点的比较并移动对应的 VNode 节点。while 循环的退出条件是直到老节点或者新节点的开始位置大于结束位置。循环过程中首先对新老 VNode 节点的头尾进行比较，寻找相同节点，当其中两个能匹配上那么真实 DOM 中的相应节点会移到 Vnode 相应的位置。</p>\n<ol>\n<li>如果是 oldStartIdx 和 newEndIdx 匹配上了，那么将当前真实 DOM 移到 oldEndIdx 后面，匹配上的两个指针向中间移动；</li>\n<li>如果是 oldEndIdx 和 newStartIdx 匹配上了，那么将当前真实 DOM 移到 oldStartIdx 前面，匹配上的两个指针向中间移动；</li>\n<li>如果 oldStartIdx 和 newStartIdx ，真实 DOM 中的相应节点移到 Vnode 相应的位置，匹配上的两个指针向中间移动；</li>\n<li>如果 oldEndIdx 和 newEndIdx 匹配上了，匹配上的两个指针向中间移动；</li>\n<li>如果四种匹配没有一对是成功，那么会根据旧的 VNode 的 key 生成一张 hash 表，用 newStartIdx 的 key 与 hash 表做匹配，匹配成功就判断 newStartIdx 和匹配节点是否为 sameNode，如果是，就将真实 DOM 移到 oldStartIdx 前面，否则则说明当前索引下的新的 VNode 节点在旧的 VNode 队列中不存在，无法进行节点的复用，那么就只能调用 createElm 创建一个新的 DOM 节点放到当前 oldStartIdx 的位置。newStartIdx 指针向中间移动，被匹配 old 中的节点置为 null。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"案例演练\"><a href=\"#案例演练\" class=\"headerlink\" title=\"案例演练\"></a>案例演练</h3><p>假设以下所有节点都是有 key 的，且 key 为自身的值</p>\n<ul>\n<li>old:a-b-c-d</li>\n<li>new:a-c-b-e-f</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldStartIdx:a;</span><br><span class=\"line\">oldEndIdx:d;</span><br><span class=\"line\">newStartIdx:a</span><br><span class=\"line\">newEndIdx:f</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx 和 newStartIdx 匹配，说明位置没变，此时 DOM 位置 a-b-c-d，此时指针：</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx: b;</span><br><span class=\"line\">oldEndIdx: d;</span><br><span class=\"line\">newStartIdx: c</span><br><span class=\"line\">newEndIdx: f</span><br><span class=\"line\"></span><br><span class=\"line\">一个都没有匹配到，然后 c 匹配到旧的 VNode，将 c 放到 oldStartIdx前，此时 DOM 位置 a-c-b-d，此时指针：</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx: b;</span><br><span class=\"line\">oldEndIdx: d;</span><br><span class=\"line\">newStartIdx: b</span><br><span class=\"line\">newEndIdx: f</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx 和 newStartIdx 匹配，说明位置没变，此时 DOM 位置 a-c-b-d，此时指针：</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx: d;</span><br><span class=\"line\">oldEndIdx: d;</span><br><span class=\"line\">newStartIdx: e</span><br><span class=\"line\">newEndIdx: f</span><br><span class=\"line\"></span><br><span class=\"line\">一个都没有匹配到，然后 e 未匹配到旧的 VNode，将创建的 e 放到 oldStartIdx前，被匹配 old 中的节点置为 null。此时 DOM 位置 a-c-b-e</span><br><span class=\"line\"></span><br><span class=\"line\">遍历结束，说明旧的 VNode先遍历完。就将剩余的 VNode 节点根据自己的的index插入到真实DOM中去，此时 DOM 位置为：a-c-b-e-f</span><br><span class=\"line\"></span><br><span class=\"line\">一次模拟完成。</span><br><span class=\"line\"></span><br><span class=\"line\">这个匹配过程的结束有两个条件：</span><br><span class=\"line\"></span><br><span class=\"line\">1. oldStartIdx &gt; oldEndIdx 表示旧 VNode 先遍历完，那么就将多余的 VNode 根据index添加到DOM中去；</span><br><span class=\"line\">2. newStartIdx &gt; newEndIdx 表示新 VNode 先遍历完，那么就在真实 DOM 中将区间为[oldStartIdx, oldEndIdx]的多余节点删掉</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.infoq.cn/article/uDLCPKH4iQb0cR5wGY7f\">Vue 的 diff 算法解析</a></li>\n<li><a href=\"https://juejin.im/post/6844903607913938951#heading-3\">详解 Vue 的 diff 算法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>diff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)。在 Vue 虚拟 DOM 渲染成真实 DOM 的新旧 VNode 节点比较更新时，就用到了该算法。</p>","more":"<h3 id=\"当数据发生变化时，Vue-是怎么更新节点的？\"><a href=\"#当数据发生变化时，Vue-是怎么更新节点的？\" class=\"headerlink\" title=\"当数据发生变化时，Vue 是怎么更新节点的？\"></a>当数据发生变化时，Vue 是怎么更新节点的？</h3><p>Vue 根据真实 DOM 生成一颗 virtual DOM，当 virtual DOM 某个节点的<code>数据</code>改变后会生成一个新的 Vnode，然后 Vnode 和 oldVnode 作对比，发现有不一样的地方就直接修改在真实的 DOM 上，然后使 oldVnode 的值为 Vnode。</p>\n<p>diff 的过程就是调用名为 patch 的函数，比较新旧节点，一边比较一边给真实的 DOM 打补丁。</p>\n<p>当数据发生改变时，defineProperty set 方法会让调用 Dep.notify 通知所有订阅者 Watcher，订阅者就会调用 patch 给真实的 DOM 打补丁，更新相应的视图。</p>\n<h3 id=\"diff-算法特点\"><a href=\"#diff-算法特点\" class=\"headerlink\" title=\"diff 算法特点\"></a>diff 算法特点</h3><ol>\n<li>比较只会在同层级进行, 不会跨层级比较。</li>\n<li>在 diff 比较的过程中，循环从两边向中间收拢。</li>\n</ol>\n<h3 id=\"diff-流程\"><a href=\"#diff-流程\" class=\"headerlink\" title=\"diff 流程\"></a>diff 流程</h3><ol>\n<li><p>对新老 VNode 的开始和结束位置进行标记：oldStartIdx、oldEndIdx、newStartIdx、newEndIdx。</p>\n</li>\n<li><p>标记好节点位置之后，就开始进入到的 while 循环处理中，这里是 diff 算法的核心流程，分情况进行了新老节点的比较并移动对应的 VNode 节点。while 循环的退出条件是直到老节点或者新节点的开始位置大于结束位置。循环过程中首先对新老 VNode 节点的头尾进行比较，寻找相同节点，当其中两个能匹配上那么真实 DOM 中的相应节点会移到 Vnode 相应的位置。</p>\n<ol>\n<li>如果是 oldStartIdx 和 newEndIdx 匹配上了，那么将当前真实 DOM 移到 oldEndIdx 后面，匹配上的两个指针向中间移动；</li>\n<li>如果是 oldEndIdx 和 newStartIdx 匹配上了，那么将当前真实 DOM 移到 oldStartIdx 前面，匹配上的两个指针向中间移动；</li>\n<li>如果 oldStartIdx 和 newStartIdx ，真实 DOM 中的相应节点移到 Vnode 相应的位置，匹配上的两个指针向中间移动；</li>\n<li>如果 oldEndIdx 和 newEndIdx 匹配上了，匹配上的两个指针向中间移动；</li>\n<li>如果四种匹配没有一对是成功，那么会根据旧的 VNode 的 key 生成一张 hash 表，用 newStartIdx 的 key 与 hash 表做匹配，匹配成功就判断 newStartIdx 和匹配节点是否为 sameNode，如果是，就将真实 DOM 移到 oldStartIdx 前面，否则则说明当前索引下的新的 VNode 节点在旧的 VNode 队列中不存在，无法进行节点的复用，那么就只能调用 createElm 创建一个新的 DOM 节点放到当前 oldStartIdx 的位置。newStartIdx 指针向中间移动，被匹配 old 中的节点置为 null。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"案例演练\"><a href=\"#案例演练\" class=\"headerlink\" title=\"案例演练\"></a>案例演练</h3><p>假设以下所有节点都是有 key 的，且 key 为自身的值</p>\n<ul>\n<li>old:a-b-c-d</li>\n<li>new:a-c-b-e-f</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldStartIdx:a;</span><br><span class=\"line\">oldEndIdx:d;</span><br><span class=\"line\">newStartIdx:a</span><br><span class=\"line\">newEndIdx:f</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx 和 newStartIdx 匹配，说明位置没变，此时 DOM 位置 a-b-c-d，此时指针：</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx: b;</span><br><span class=\"line\">oldEndIdx: d;</span><br><span class=\"line\">newStartIdx: c</span><br><span class=\"line\">newEndIdx: f</span><br><span class=\"line\"></span><br><span class=\"line\">一个都没有匹配到，然后 c 匹配到旧的 VNode，将 c 放到 oldStartIdx前，此时 DOM 位置 a-c-b-d，此时指针：</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx: b;</span><br><span class=\"line\">oldEndIdx: d;</span><br><span class=\"line\">newStartIdx: b</span><br><span class=\"line\">newEndIdx: f</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx 和 newStartIdx 匹配，说明位置没变，此时 DOM 位置 a-c-b-d，此时指针：</span><br><span class=\"line\"></span><br><span class=\"line\">oldStartIdx: d;</span><br><span class=\"line\">oldEndIdx: d;</span><br><span class=\"line\">newStartIdx: e</span><br><span class=\"line\">newEndIdx: f</span><br><span class=\"line\"></span><br><span class=\"line\">一个都没有匹配到，然后 e 未匹配到旧的 VNode，将创建的 e 放到 oldStartIdx前，被匹配 old 中的节点置为 null。此时 DOM 位置 a-c-b-e</span><br><span class=\"line\"></span><br><span class=\"line\">遍历结束，说明旧的 VNode先遍历完。就将剩余的 VNode 节点根据自己的的index插入到真实DOM中去，此时 DOM 位置为：a-c-b-e-f</span><br><span class=\"line\"></span><br><span class=\"line\">一次模拟完成。</span><br><span class=\"line\"></span><br><span class=\"line\">这个匹配过程的结束有两个条件：</span><br><span class=\"line\"></span><br><span class=\"line\">1. oldStartIdx &gt; oldEndIdx 表示旧 VNode 先遍历完，那么就将多余的 VNode 根据index添加到DOM中去；</span><br><span class=\"line\">2. newStartIdx &gt; newEndIdx 表示新 VNode 先遍历完，那么就在真实 DOM 中将区间为[oldStartIdx, oldEndIdx]的多余节点删掉</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.infoq.cn/article/uDLCPKH4iQb0cR5wGY7f\">Vue 的 diff 算法解析</a></li>\n<li><a href=\"https://juejin.im/post/6844903607913938951#heading-3\">详解 Vue 的 diff 算法</a></li>\n</ul>"},{"title":"Vue 基础知识","date":"2019-04-10T16:00:00.000Z","updated":"2019-04-10T16:00:00.000Z","_content":"\n梳理一下 Vue 的基础知识。\n\n<!-- more -->\n\n# 生命周期\n\n1. created：Vue 实例创建完成，还未挂载\n2. mounted：数据刚刚挂载到 Dom 上\n3. beforedestroy：一般用于处理事件解绑，定时器清除\n\n# 属性与计算属性\n\n1. 访问 Vue 实例中的属性，可使用类似`vm.$el`的方式访问，访问 data 中的属性，直接使用`vm.xxx`的形式访问\n2. 文本插值`{{}}`，里面能进行简单的运算，不支持多行语句，复杂的数据使用计算属性，文本插值里可使用过滤器，`{{data | filterFunc}}`\n3. 计算属性有缓存，其变更依赖其依赖属性的变更，计算属性可以计算多个 Vue 实例的数据\n4. 计算属性默认用的是 get 函数\n5. methods 里的方法，没有缓存\n6. class 的绑定，能同时使用对象和数组绑定，`:class=\"[{xxx:true},yyy]\"`\n\n# 内置指令\n\n1. v-cloak：解决初始化慢导致页面闪动的问题，一般和`display:none`一起使用\n2. v-for：有一点，如果是遍历对象的多个属性，则用`value in obj`，如还要遍历 key 和 value 的值，则`(value,key,index) in obj` ,里面的顺序不能改变\n3. 数组的 push，pop，unshift，shift，splice，sort 和 reverse 等操作会改变数组，引发页面重新渲染，改变数组长度或者指定项不会。使用 Vue.set(items,index,newval) 和 items.splice(index,1,newval)，改变数组也会引发渲染\n4. 方法有参数，却不加括号，默认传的是原生 JavaScript 的事件对象\n5. 单个单选框，radio， 使用 v-model 不生效\n   6 checkbox：最好使用数组当做绑定值，如果不是，则会被转换成布尔值，使得 checkbox 全选或者全不选\n6. select：只能把 v-model 放在 select\n7. 如果想 v-model 动态绑定值，使用 v-bind 绑定 value，v-model 的值是 value 的值\n\n> 引用\n\n- [Vue](https://cn.vuejs.org/v2/guide/)\n","source":"_posts/Vue 基础知识.md","raw":"---\ntitle: Vue 基础知识\ndate: 2019-04-11 00:00:00\nupdated: 2019-04-11 00:00:00\ntags:\n  - Vue\n---\n\n梳理一下 Vue 的基础知识。\n\n<!-- more -->\n\n# 生命周期\n\n1. created：Vue 实例创建完成，还未挂载\n2. mounted：数据刚刚挂载到 Dom 上\n3. beforedestroy：一般用于处理事件解绑，定时器清除\n\n# 属性与计算属性\n\n1. 访问 Vue 实例中的属性，可使用类似`vm.$el`的方式访问，访问 data 中的属性，直接使用`vm.xxx`的形式访问\n2. 文本插值`{{}}`，里面能进行简单的运算，不支持多行语句，复杂的数据使用计算属性，文本插值里可使用过滤器，`{{data | filterFunc}}`\n3. 计算属性有缓存，其变更依赖其依赖属性的变更，计算属性可以计算多个 Vue 实例的数据\n4. 计算属性默认用的是 get 函数\n5. methods 里的方法，没有缓存\n6. class 的绑定，能同时使用对象和数组绑定，`:class=\"[{xxx:true},yyy]\"`\n\n# 内置指令\n\n1. v-cloak：解决初始化慢导致页面闪动的问题，一般和`display:none`一起使用\n2. v-for：有一点，如果是遍历对象的多个属性，则用`value in obj`，如还要遍历 key 和 value 的值，则`(value,key,index) in obj` ,里面的顺序不能改变\n3. 数组的 push，pop，unshift，shift，splice，sort 和 reverse 等操作会改变数组，引发页面重新渲染，改变数组长度或者指定项不会。使用 Vue.set(items,index,newval) 和 items.splice(index,1,newval)，改变数组也会引发渲染\n4. 方法有参数，却不加括号，默认传的是原生 JavaScript 的事件对象\n5. 单个单选框，radio， 使用 v-model 不生效\n   6 checkbox：最好使用数组当做绑定值，如果不是，则会被转换成布尔值，使得 checkbox 全选或者全不选\n6. select：只能把 v-model 放在 select\n7. 如果想 v-model 动态绑定值，使用 v-bind 绑定 value，v-model 的值是 value 的值\n\n> 引用\n\n- [Vue](https://cn.vuejs.org/v2/guide/)\n","slug":"Vue 基础知识","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpx00012k4u91baf742s","content":"<p>梳理一下 Vue 的基础知识。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><ol>\n<li>created：Vue 实例创建完成，还未挂载</li>\n<li>mounted：数据刚刚挂载到 Dom 上</li>\n<li>beforedestroy：一般用于处理事件解绑，定时器清除</li>\n</ol>\n<h1 id=\"属性与计算属性\"><a href=\"#属性与计算属性\" class=\"headerlink\" title=\"属性与计算属性\"></a>属性与计算属性</h1><ol>\n<li>访问 Vue 实例中的属性，可使用类似<code>vm.$el</code>的方式访问，访问 data 中的属性，直接使用<code>vm.xxx</code>的形式访问</li>\n<li>文本插值<code>&#123;&#123;&#125;&#125;</code>，里面能进行简单的运算，不支持多行语句，复杂的数据使用计算属性，文本插值里可使用过滤器，<code>&#123;&#123;data | filterFunc&#125;&#125;</code></li>\n<li>计算属性有缓存，其变更依赖其依赖属性的变更，计算属性可以计算多个 Vue 实例的数据</li>\n<li>计算属性默认用的是 get 函数</li>\n<li>methods 里的方法，没有缓存</li>\n<li>class 的绑定，能同时使用对象和数组绑定，<code>:class=&quot;[&#123;xxx:true&#125;,yyy]&quot;</code></li>\n</ol>\n<h1 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h1><ol>\n<li>v-cloak：解决初始化慢导致页面闪动的问题，一般和<code>display:none</code>一起使用</li>\n<li>v-for：有一点，如果是遍历对象的多个属性，则用<code>value in obj</code>，如还要遍历 key 和 value 的值，则<code>(value,key,index) in obj</code> ,里面的顺序不能改变</li>\n<li>数组的 push，pop，unshift，shift，splice，sort 和 reverse 等操作会改变数组，引发页面重新渲染，改变数组长度或者指定项不会。使用 Vue.set(items,index,newval) 和 items.splice(index,1,newval)，改变数组也会引发渲染</li>\n<li>方法有参数，却不加括号，默认传的是原生 JavaScript 的事件对象</li>\n<li>单个单选框，radio， 使用 v-model 不生效<br>6 checkbox：最好使用数组当做绑定值，如果不是，则会被转换成布尔值，使得 checkbox 全选或者全不选</li>\n<li>select：只能把 v-model 放在 select</li>\n<li>如果想 v-model 动态绑定值，使用 v-bind 绑定 value，v-model 的值是 value 的值</li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/\">Vue</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>梳理一下 Vue 的基础知识。</p>","more":"<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><ol>\n<li>created：Vue 实例创建完成，还未挂载</li>\n<li>mounted：数据刚刚挂载到 Dom 上</li>\n<li>beforedestroy：一般用于处理事件解绑，定时器清除</li>\n</ol>\n<h1 id=\"属性与计算属性\"><a href=\"#属性与计算属性\" class=\"headerlink\" title=\"属性与计算属性\"></a>属性与计算属性</h1><ol>\n<li>访问 Vue 实例中的属性，可使用类似<code>vm.$el</code>的方式访问，访问 data 中的属性，直接使用<code>vm.xxx</code>的形式访问</li>\n<li>文本插值<code>&#123;&#123;&#125;&#125;</code>，里面能进行简单的运算，不支持多行语句，复杂的数据使用计算属性，文本插值里可使用过滤器，<code>&#123;&#123;data | filterFunc&#125;&#125;</code></li>\n<li>计算属性有缓存，其变更依赖其依赖属性的变更，计算属性可以计算多个 Vue 实例的数据</li>\n<li>计算属性默认用的是 get 函数</li>\n<li>methods 里的方法，没有缓存</li>\n<li>class 的绑定，能同时使用对象和数组绑定，<code>:class=&quot;[&#123;xxx:true&#125;,yyy]&quot;</code></li>\n</ol>\n<h1 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h1><ol>\n<li>v-cloak：解决初始化慢导致页面闪动的问题，一般和<code>display:none</code>一起使用</li>\n<li>v-for：有一点，如果是遍历对象的多个属性，则用<code>value in obj</code>，如还要遍历 key 和 value 的值，则<code>(value,key,index) in obj</code> ,里面的顺序不能改变</li>\n<li>数组的 push，pop，unshift，shift，splice，sort 和 reverse 等操作会改变数组，引发页面重新渲染，改变数组长度或者指定项不会。使用 Vue.set(items,index,newval) 和 items.splice(index,1,newval)，改变数组也会引发渲染</li>\n<li>方法有参数，却不加括号，默认传的是原生 JavaScript 的事件对象</li>\n<li>单个单选框，radio， 使用 v-model 不生效<br>6 checkbox：最好使用数组当做绑定值，如果不是，则会被转换成布尔值，使得 checkbox 全选或者全不选</li>\n<li>select：只能把 v-model 放在 select</li>\n<li>如果想 v-model 动态绑定值，使用 v-bind 绑定 value，v-model 的值是 value 的值</li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/\">Vue</a></li>\n</ul>"},{"title":"Vuex 小记","date":"2019-04-01T16:00:00.000Z","updated":"2019-04-01T16:00:00.000Z","_content":"\nVuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n<!-- more -->\n\n简单的数据共享可以用 eventBus，复杂的可以选择用 Vuex。\n\n每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：\n\nVuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n\n你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。\n\n# 核心概念\n\n## State\n\nstate 里存储的是状态（数据），当需要生成多个状态时，可使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。\n\n```javascript\nimport { mapState } from 'vuex'\n...mapState['state1','state2']\n```\n\nVuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：\n\n## Getter\n\n类似计算属性，使用 Getter 获取 state 里的状态。mapGetters 辅助函数可将 store 中的 getter 映射到局部计算属性中。\n\n## Mutation\n\n提交 mutation 是改变 Vuex 状态的唯一方法。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。使用 `store.commit('increment')` 这种形式调用一个 mutation handler。注意 Mutation 必须是同步函数，异步的可以将其放在 Action 中。\n\n在组件中使用 this.$store.commit('xxx') 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）\n\n## Action\n\nAction 类似于 mutation，不同在于：\n\n1. Action 提交的是 mutation，而不是直接变更状态。\n2. Action 可以包含任意异步操作。\n\nAction 通过 store.dispatch 方法触发\n\n## Module\n\n当应用变得非常复杂时，store 对象就有可能变得相当臃肿。Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。\n","source":"_posts/Vuex 小记.md","raw":"---\ntitle: Vuex 小记\ndate: 2019-04-02 00:00:00\nupdated: 2019-04-02 00:00:00\ntags:\n  - Vuex\n---\n\nVuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n<!-- more -->\n\n简单的数据共享可以用 eventBus，复杂的可以选择用 Vuex。\n\n每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：\n\nVuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n\n你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。\n\n# 核心概念\n\n## State\n\nstate 里存储的是状态（数据），当需要生成多个状态时，可使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。\n\n```javascript\nimport { mapState } from 'vuex'\n...mapState['state1','state2']\n```\n\nVuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：\n\n## Getter\n\n类似计算属性，使用 Getter 获取 state 里的状态。mapGetters 辅助函数可将 store 中的 getter 映射到局部计算属性中。\n\n## Mutation\n\n提交 mutation 是改变 Vuex 状态的唯一方法。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。使用 `store.commit('increment')` 这种形式调用一个 mutation handler。注意 Mutation 必须是同步函数，异步的可以将其放在 Action 中。\n\n在组件中使用 this.$store.commit('xxx') 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）\n\n## Action\n\nAction 类似于 mutation，不同在于：\n\n1. Action 提交的是 mutation，而不是直接变更状态。\n2. Action 可以包含任意异步操作。\n\nAction 通过 store.dispatch 方法触发\n\n## Module\n\n当应用变得非常复杂时，store 对象就有可能变得相当臃肿。Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。\n","slug":"Vuex 小记","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpx10013k4u92ltf83o1","content":"<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<span id=\"more\"></span>\n\n<p>简单的数据共享可以用 eventBus，复杂的可以选择用 Vuex。</p>\n<p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：</p>\n<p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>\n<p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p>\n<h1 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h1><h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state 里存储的是状态（数据），当需要生成多个状态时，可使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">...mapState[<span class=\"string\">&#x27;state1&#x27;</span>,<span class=\"string\">&#x27;state2&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：</p>\n<h2 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h2><p>类似计算属性，使用 Getter 获取 state 里的状态。mapGetters 辅助函数可将 store 中的 getter 映射到局部计算属性中。</p>\n<h2 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h2><p>提交 mutation 是改变 Vuex 状态的唯一方法。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。使用 <code>store.commit(&#39;increment&#39;)</code> 这种形式调用一个 mutation handler。注意 Mutation 必须是同步函数，异步的可以将其放在 Action 中。</p>\n<p>在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）</p>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p>Action 类似于 mutation，不同在于：</p>\n<ol>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ol>\n<p>Action 通过 store.dispatch 方法触发</p>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>当应用变得非常复杂时，store 对象就有可能变得相当臃肿。Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。</p>\n","site":{"data":{}},"excerpt":"<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>","more":"<p>简单的数据共享可以用 eventBus，复杂的可以选择用 Vuex。</p>\n<p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：</p>\n<p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>\n<p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p>\n<h1 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h1><h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state 里存储的是状态（数据），当需要生成多个状态时，可使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">...mapState[<span class=\"string\">&#x27;state1&#x27;</span>,<span class=\"string\">&#x27;state2&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：</p>\n<h2 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h2><p>类似计算属性，使用 Getter 获取 state 里的状态。mapGetters 辅助函数可将 store 中的 getter 映射到局部计算属性中。</p>\n<h2 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h2><p>提交 mutation 是改变 Vuex 状态的唯一方法。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。使用 <code>store.commit(&#39;increment&#39;)</code> 这种形式调用一个 mutation handler。注意 Mutation 必须是同步函数，异步的可以将其放在 Action 中。</p>\n<p>在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）</p>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p>Action 类似于 mutation，不同在于：</p>\n<ol>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ol>\n<p>Action 通过 store.dispatch 方法触发</p>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>当应用变得非常复杂时，store 对象就有可能变得相当臃肿。Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。</p>"},{"title":"Vue组件间通信","date":"2019-02-23T16:00:00.000Z","updated":"2019-02-23T16:00:00.000Z","_content":"\n列举了 4 种组件间通信的形式\n\n<!-- more -->\n\n# 父子通信\n\n## 利用 props\n\n使用 props，父组件可以使用 props 向子组件传递数据。子组件在 props 上注册该属性，就可用像用 data 一样使用 props。\n\n## 利用$children\n\n注意 $children 并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 $children 来进行数据绑定，考虑使用一个数组配合 v-for 来生成子组件，并且使用 Array 作为真正的来源。\n\n# 子组件向父组件通信\n\n## 使用 Vue 事件\n\n    发布订阅模式\n\n    1. 父组件自定义事件并监听\n    2. 自组件通过点击等事件触发该事件（$emit）\n    3. 父组件监听到这个事件，并获得传来的数据\n\n## 使用$parent\n\n    父实例，如果当前实例有的话。\n\n# 爷孙通信\n\n    依旧是使用发布订阅模式。通过子父，父爷层层向上通知事件。\n\n# 非父子组件、兄弟组件之间的数据传递\n\n使用 eventBus，利用 Vue 实例提供的 $emit 和 $on 方法\n\n```html\n<div id=\"app\">\n  <component-a></component-a>\n  <component-b></component-b>\n</div>\n\n<script>\n  let eventHub = new Vue()\n  Vue.prototype.$eventHub = eventHub\n  //compontent 是 Vue 的一个实例 this.__proto===Vue.prototype\n  Vue.component('component-a', {\n    template: `\n        <div>a<button @click=notify>点击</button></div>\n    `,\n    methods: {\n      notify() {\n        this.$eventHub.$emit('xxx', 'hi')\n      }\n    }\n  })\n\n  Vue.component('component-b', {\n    template: `\n        <div>b<div ref=output></div></div>\n    `,\n    created() {\n      this.$eventHub.$on('xxx', data => {\n        this.$refs.output.textContent = data\n      })\n    }\n  })\n  let app = new Vue({\n    el: '#app'\n  })\n</script>\n```\n\n# 更复杂的单页应用数据管理\n\n[请使用 Vuex](https://jiangnana.fun/2019/04/02/Vuex-%E5%B0%8F%E8%AE%B0/)\n\n> 引用\n\n- [渐进式\n  JavaScript 框架](https://cn.vuejs.org/)\n","source":"_posts/Vue组件间通信.md","raw":"---\ntitle: Vue组件间通信\ndate: 2019-02-24 00:00:00\nupdated: 2019-02-24 00:00:00\ntags:\n  - Vue\n  - 通信\n---\n\n列举了 4 种组件间通信的形式\n\n<!-- more -->\n\n# 父子通信\n\n## 利用 props\n\n使用 props，父组件可以使用 props 向子组件传递数据。子组件在 props 上注册该属性，就可用像用 data 一样使用 props。\n\n## 利用$children\n\n注意 $children 并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 $children 来进行数据绑定，考虑使用一个数组配合 v-for 来生成子组件，并且使用 Array 作为真正的来源。\n\n# 子组件向父组件通信\n\n## 使用 Vue 事件\n\n    发布订阅模式\n\n    1. 父组件自定义事件并监听\n    2. 自组件通过点击等事件触发该事件（$emit）\n    3. 父组件监听到这个事件，并获得传来的数据\n\n## 使用$parent\n\n    父实例，如果当前实例有的话。\n\n# 爷孙通信\n\n    依旧是使用发布订阅模式。通过子父，父爷层层向上通知事件。\n\n# 非父子组件、兄弟组件之间的数据传递\n\n使用 eventBus，利用 Vue 实例提供的 $emit 和 $on 方法\n\n```html\n<div id=\"app\">\n  <component-a></component-a>\n  <component-b></component-b>\n</div>\n\n<script>\n  let eventHub = new Vue()\n  Vue.prototype.$eventHub = eventHub\n  //compontent 是 Vue 的一个实例 this.__proto===Vue.prototype\n  Vue.component('component-a', {\n    template: `\n        <div>a<button @click=notify>点击</button></div>\n    `,\n    methods: {\n      notify() {\n        this.$eventHub.$emit('xxx', 'hi')\n      }\n    }\n  })\n\n  Vue.component('component-b', {\n    template: `\n        <div>b<div ref=output></div></div>\n    `,\n    created() {\n      this.$eventHub.$on('xxx', data => {\n        this.$refs.output.textContent = data\n      })\n    }\n  })\n  let app = new Vue({\n    el: '#app'\n  })\n</script>\n```\n\n# 更复杂的单页应用数据管理\n\n[请使用 Vuex](https://jiangnana.fun/2019/04/02/Vuex-%E5%B0%8F%E8%AE%B0/)\n\n> 引用\n\n- [渐进式\n  JavaScript 框架](https://cn.vuejs.org/)\n","slug":"Vue组件间通信","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpx20016k4u9a7pjcyt4","content":"<p>列举了 4 种组件间通信的形式</p>\n<span id=\"more\"></span>\n\n<h1 id=\"父子通信\"><a href=\"#父子通信\" class=\"headerlink\" title=\"父子通信\"></a>父子通信</h1><h2 id=\"利用-props\"><a href=\"#利用-props\" class=\"headerlink\" title=\"利用 props\"></a>利用 props</h2><p>使用 props，父组件可以使用 props 向子组件传递数据。子组件在 props 上注册该属性，就可用像用 data 一样使用 props。</p>\n<h2 id=\"利用-children\"><a href=\"#利用-children\" class=\"headerlink\" title=\"利用$children\"></a>利用$children</h2><p>注意 $children 并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 $children 来进行数据绑定，考虑使用一个数组配合 v-for 来生成子组件，并且使用 Array 作为真正的来源。</p>\n<h1 id=\"子组件向父组件通信\"><a href=\"#子组件向父组件通信\" class=\"headerlink\" title=\"子组件向父组件通信\"></a>子组件向父组件通信</h1><h2 id=\"使用-Vue-事件\"><a href=\"#使用-Vue-事件\" class=\"headerlink\" title=\"使用 Vue 事件\"></a>使用 Vue 事件</h2><pre><code>发布订阅模式\n\n1. 父组件自定义事件并监听\n2. 自组件通过点击等事件触发该事件（$emit）\n3. 父组件监听到这个事件，并获得传来的数据\n</code></pre>\n<h2 id=\"使用-parent\"><a href=\"#使用-parent\" class=\"headerlink\" title=\"使用$parent\"></a>使用$parent</h2><pre><code>父实例，如果当前实例有的话。\n</code></pre>\n<h1 id=\"爷孙通信\"><a href=\"#爷孙通信\" class=\"headerlink\" title=\"爷孙通信\"></a>爷孙通信</h1><pre><code>依旧是使用发布订阅模式。通过子父，父爷层层向上通知事件。\n</code></pre>\n<h1 id=\"非父子组件、兄弟组件之间的数据传递\"><a href=\"#非父子组件、兄弟组件之间的数据传递\" class=\"headerlink\" title=\"非父子组件、兄弟组件之间的数据传递\"></a>非父子组件、兄弟组件之间的数据传递</h1><p>使用 eventBus，利用 Vue 实例提供的 $emit 和 $on 方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component-a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> eventHub = <span class=\"keyword\">new</span> Vue()</span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.prototype.$eventHub = eventHub</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//compontent 是 Vue 的一个实例 this.__proto===Vue.prototype</span></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;component-a&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">        &lt;div&gt;a&lt;button @click=notify&gt;点击&lt;/button&gt;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    `</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">notify</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.$eventHub.$emit(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"string\">&#x27;hi&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;component-b&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">        &lt;div&gt;b&lt;div ref=output&gt;&lt;/div&gt;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    `</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.$eventHub.$on(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.$refs.output.textContent = data</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更复杂的单页应用数据管理\"><a href=\"#更复杂的单页应用数据管理\" class=\"headerlink\" title=\"更复杂的单页应用数据管理\"></a>更复杂的单页应用数据管理</h1><p><a href=\"https://jiangnana.fun/2019/04/02/Vuex-%E5%B0%8F%E8%AE%B0/\">请使用 Vuex</a></p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://cn.vuejs.org/\">渐进式<br>JavaScript 框架</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>列举了 4 种组件间通信的形式</p>","more":"<h1 id=\"父子通信\"><a href=\"#父子通信\" class=\"headerlink\" title=\"父子通信\"></a>父子通信</h1><h2 id=\"利用-props\"><a href=\"#利用-props\" class=\"headerlink\" title=\"利用 props\"></a>利用 props</h2><p>使用 props，父组件可以使用 props 向子组件传递数据。子组件在 props 上注册该属性，就可用像用 data 一样使用 props。</p>\n<h2 id=\"利用-children\"><a href=\"#利用-children\" class=\"headerlink\" title=\"利用$children\"></a>利用$children</h2><p>注意 $children 并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 $children 来进行数据绑定，考虑使用一个数组配合 v-for 来生成子组件，并且使用 Array 作为真正的来源。</p>\n<h1 id=\"子组件向父组件通信\"><a href=\"#子组件向父组件通信\" class=\"headerlink\" title=\"子组件向父组件通信\"></a>子组件向父组件通信</h1><h2 id=\"使用-Vue-事件\"><a href=\"#使用-Vue-事件\" class=\"headerlink\" title=\"使用 Vue 事件\"></a>使用 Vue 事件</h2><pre><code>发布订阅模式\n\n1. 父组件自定义事件并监听\n2. 自组件通过点击等事件触发该事件（$emit）\n3. 父组件监听到这个事件，并获得传来的数据\n</code></pre>\n<h2 id=\"使用-parent\"><a href=\"#使用-parent\" class=\"headerlink\" title=\"使用$parent\"></a>使用$parent</h2><pre><code>父实例，如果当前实例有的话。\n</code></pre>\n<h1 id=\"爷孙通信\"><a href=\"#爷孙通信\" class=\"headerlink\" title=\"爷孙通信\"></a>爷孙通信</h1><pre><code>依旧是使用发布订阅模式。通过子父，父爷层层向上通知事件。\n</code></pre>\n<h1 id=\"非父子组件、兄弟组件之间的数据传递\"><a href=\"#非父子组件、兄弟组件之间的数据传递\" class=\"headerlink\" title=\"非父子组件、兄弟组件之间的数据传递\"></a>非父子组件、兄弟组件之间的数据传递</h1><p>使用 eventBus，利用 Vue 实例提供的 $emit 和 $on 方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component-a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> eventHub = <span class=\"keyword\">new</span> Vue()</span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.prototype.$eventHub = eventHub</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//compontent 是 Vue 的一个实例 this.__proto===Vue.prototype</span></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;component-a&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">        &lt;div&gt;a&lt;button @click=notify&gt;点击&lt;/button&gt;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    `</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">notify</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.$eventHub.$emit(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"string\">&#x27;hi&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;component-b&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">        &lt;div&gt;b&lt;div ref=output&gt;&lt;/div&gt;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    `</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.$eventHub.$on(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.$refs.output.textContent = data</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更复杂的单页应用数据管理\"><a href=\"#更复杂的单页应用数据管理\" class=\"headerlink\" title=\"更复杂的单页应用数据管理\"></a>更复杂的单页应用数据管理</h1><p><a href=\"https://jiangnana.fun/2019/04/02/Vuex-%E5%B0%8F%E8%AE%B0/\">请使用 Vuex</a></p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://cn.vuejs.org/\">渐进式<br>JavaScript 框架</a></li>\n</ul>"},{"title":"express 初识","date":"2019-04-30T16:00:00.000Z","updated":"2019-04-30T16:00:00.000Z","_content":"\n最近在使用 express 做在线备忘贴的小项目，一边摸索着使用，一边整理一下使用过程中的笔记。\n\n<!-- more -->\n\n# EXPRESS 的安装使用\n\n1. 安装 `npm i express`，一般使用第二种脚手架安装\n2. 安装 express 的脚手架 express-generator ：`npm install express-generator`，运行，`./node_modules/express-generator/bin/express-cli.js -f -e`\n3. 运行 `npm i`，安装脚手架提供的包\n4. 运行 `PORT = 4000 node ./bin/www` 可以在端口 4000 预览 demo\n5. `\"start\": \"cross-env PORT=8080 node ./bin/www\"`，可以设置脚本，默认在 8080 端口打开页面，cross-env 是为了解决 windows 下报错的问题。\n\n# EXPRESS 工作流程\n\n目录结构\n\n```\n├── app.js # 应用的主入口\n├── bin  # 启动脚本\n├── node_modules # 依赖的模块\n├── package.json # node模块的配置文件\n├── public # 静态资源，如css、js等存放的目录\n├── routes # 路由规则存放的目录\n└── views # 模板文件存放的目录\n```\n\n首先通过入口 `app.js`， 得到路由，路由一般会被拆分到 `routes/` 目录下，根据不同路由 render 数据到页面模板中。\n\n# EXPRESS 三个重要的概念\n\n## 路由\n\n顾名思义，负责寻址的，根据用户请求的定位资源，图片、样式等文件的路由走 static\n\n## 中间件\n\n进行数据处理，把请求交给中间键处理，得到的结果再给下一级\n\n```javascript\nvar app = express()\n\napp.use(function (req, res, next) {\n  // 可以得到请求的相关信息\n  console.log('Time:', Date.now())\n  next() // 交给下一层的中间件，或者直接send\n})\n```\n\n## 模板引擎\n\n模板引擎类似 `Vue` 中的 template ，express 可选的模板引擎有 jade ，ejs 等\n\n> 引用\n\n- [Express 使用手记：核心入门](https://www.cnblogs.com/chyingp/p/express-intro.html)\n","source":"_posts/express 初识.md","raw":"---\ntitle: express 初识\ndate: 2019-05-01 00:00:00\nupdated: 2019-05-01 00:00:00\ntags:\n  - express\n---\n\n最近在使用 express 做在线备忘贴的小项目，一边摸索着使用，一边整理一下使用过程中的笔记。\n\n<!-- more -->\n\n# EXPRESS 的安装使用\n\n1. 安装 `npm i express`，一般使用第二种脚手架安装\n2. 安装 express 的脚手架 express-generator ：`npm install express-generator`，运行，`./node_modules/express-generator/bin/express-cli.js -f -e`\n3. 运行 `npm i`，安装脚手架提供的包\n4. 运行 `PORT = 4000 node ./bin/www` 可以在端口 4000 预览 demo\n5. `\"start\": \"cross-env PORT=8080 node ./bin/www\"`，可以设置脚本，默认在 8080 端口打开页面，cross-env 是为了解决 windows 下报错的问题。\n\n# EXPRESS 工作流程\n\n目录结构\n\n```\n├── app.js # 应用的主入口\n├── bin  # 启动脚本\n├── node_modules # 依赖的模块\n├── package.json # node模块的配置文件\n├── public # 静态资源，如css、js等存放的目录\n├── routes # 路由规则存放的目录\n└── views # 模板文件存放的目录\n```\n\n首先通过入口 `app.js`， 得到路由，路由一般会被拆分到 `routes/` 目录下，根据不同路由 render 数据到页面模板中。\n\n# EXPRESS 三个重要的概念\n\n## 路由\n\n顾名思义，负责寻址的，根据用户请求的定位资源，图片、样式等文件的路由走 static\n\n## 中间件\n\n进行数据处理，把请求交给中间键处理，得到的结果再给下一级\n\n```javascript\nvar app = express()\n\napp.use(function (req, res, next) {\n  // 可以得到请求的相关信息\n  console.log('Time:', Date.now())\n  next() // 交给下一层的中间件，或者直接send\n})\n```\n\n## 模板引擎\n\n模板引擎类似 `Vue` 中的 template ，express 可选的模板引擎有 jade ，ejs 等\n\n> 引用\n\n- [Express 使用手记：核心入门](https://www.cnblogs.com/chyingp/p/express-intro.html)\n","slug":"express 初识","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpx30017k4u9gdttdywn","content":"<p>最近在使用 express 做在线备忘贴的小项目，一边摸索着使用，一边整理一下使用过程中的笔记。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"EXPRESS-的安装使用\"><a href=\"#EXPRESS-的安装使用\" class=\"headerlink\" title=\"EXPRESS 的安装使用\"></a>EXPRESS 的安装使用</h1><ol>\n<li>安装 <code>npm i express</code>，一般使用第二种脚手架安装</li>\n<li>安装 express 的脚手架 express-generator ：<code>npm install express-generator</code>，运行，<code>./node_modules/express-generator/bin/express-cli.js -f -e</code></li>\n<li>运行 <code>npm i</code>，安装脚手架提供的包</li>\n<li>运行 <code>PORT = 4000 node ./bin/www</code> 可以在端口 4000 预览 demo</li>\n<li><code>&quot;start&quot;: &quot;cross-env PORT=8080 node ./bin/www&quot;</code>，可以设置脚本，默认在 8080 端口打开页面，cross-env 是为了解决 windows 下报错的问题。</li>\n</ol>\n<h1 id=\"EXPRESS-工作流程\"><a href=\"#EXPRESS-工作流程\" class=\"headerlink\" title=\"EXPRESS 工作流程\"></a>EXPRESS 工作流程</h1><p>目录结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── app.js # 应用的主入口</span><br><span class=\"line\">├── bin  # 启动脚本</span><br><span class=\"line\">├── node_modules # 依赖的模块</span><br><span class=\"line\">├── package.json # node模块的配置文件</span><br><span class=\"line\">├── public # 静态资源，如css、js等存放的目录</span><br><span class=\"line\">├── routes # 路由规则存放的目录</span><br><span class=\"line\">└── views # 模板文件存放的目录</span><br></pre></td></tr></table></figure>\n\n<p>首先通过入口 <code>app.js</code>， 得到路由，路由一般会被拆分到 <code>routes/</code> 目录下，根据不同路由 render 数据到页面模板中。</p>\n<h1 id=\"EXPRESS-三个重要的概念\"><a href=\"#EXPRESS-三个重要的概念\" class=\"headerlink\" title=\"EXPRESS 三个重要的概念\"></a>EXPRESS 三个重要的概念</h1><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>顾名思义，负责寻址的，根据用户请求的定位资源，图片、样式等文件的路由走 static</p>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><p>进行数据处理，把请求交给中间键处理，得到的结果再给下一级</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以得到请求的相关信息</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Time:&#x27;</span>, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">  next() <span class=\"comment\">// 交给下一层的中间件，或者直接send</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><p>模板引擎类似 <code>Vue</code> 中的 template ，express 可选的模板引擎有 jade ，ejs 等</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.cnblogs.com/chyingp/p/express-intro.html\">Express 使用手记：核心入门</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近在使用 express 做在线备忘贴的小项目，一边摸索着使用，一边整理一下使用过程中的笔记。</p>","more":"<h1 id=\"EXPRESS-的安装使用\"><a href=\"#EXPRESS-的安装使用\" class=\"headerlink\" title=\"EXPRESS 的安装使用\"></a>EXPRESS 的安装使用</h1><ol>\n<li>安装 <code>npm i express</code>，一般使用第二种脚手架安装</li>\n<li>安装 express 的脚手架 express-generator ：<code>npm install express-generator</code>，运行，<code>./node_modules/express-generator/bin/express-cli.js -f -e</code></li>\n<li>运行 <code>npm i</code>，安装脚手架提供的包</li>\n<li>运行 <code>PORT = 4000 node ./bin/www</code> 可以在端口 4000 预览 demo</li>\n<li><code>&quot;start&quot;: &quot;cross-env PORT=8080 node ./bin/www&quot;</code>，可以设置脚本，默认在 8080 端口打开页面，cross-env 是为了解决 windows 下报错的问题。</li>\n</ol>\n<h1 id=\"EXPRESS-工作流程\"><a href=\"#EXPRESS-工作流程\" class=\"headerlink\" title=\"EXPRESS 工作流程\"></a>EXPRESS 工作流程</h1><p>目录结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── app.js # 应用的主入口</span><br><span class=\"line\">├── bin  # 启动脚本</span><br><span class=\"line\">├── node_modules # 依赖的模块</span><br><span class=\"line\">├── package.json # node模块的配置文件</span><br><span class=\"line\">├── public # 静态资源，如css、js等存放的目录</span><br><span class=\"line\">├── routes # 路由规则存放的目录</span><br><span class=\"line\">└── views # 模板文件存放的目录</span><br></pre></td></tr></table></figure>\n\n<p>首先通过入口 <code>app.js</code>， 得到路由，路由一般会被拆分到 <code>routes/</code> 目录下，根据不同路由 render 数据到页面模板中。</p>\n<h1 id=\"EXPRESS-三个重要的概念\"><a href=\"#EXPRESS-三个重要的概念\" class=\"headerlink\" title=\"EXPRESS 三个重要的概念\"></a>EXPRESS 三个重要的概念</h1><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>顾名思义，负责寻址的，根据用户请求的定位资源，图片、样式等文件的路由走 static</p>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><p>进行数据处理，把请求交给中间键处理，得到的结果再给下一级</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以得到请求的相关信息</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Time:&#x27;</span>, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">  next() <span class=\"comment\">// 交给下一层的中间件，或者直接send</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><p>模板引擎类似 <code>Vue</code> 中的 template ，express 可选的模板引擎有 jade ，ejs 等</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.cnblogs.com/chyingp/p/express-intro.html\">Express 使用手记：核心入门</a></li>\n</ul>"},{"title":"git入门","date":"2018-10-10T16:00:00.000Z","updated":"2018-10-10T16:00:00.000Z","_content":"\n使用 Git 前，需要先建立一个仓库(repository)。我们可以使用一个已经存在的目录作为 Git 仓库或创建一个空目录。\n使用当前目录作为 Git 仓库，我们只需使它初始化。\n\n<!-- more -->\n\n# 常用命令\n\n`git init`\n\n运行后会在当前文件夹建立一个`.git`的文件夹，此时仓库是没有其他文件的，我们可以通过`add`命令增加文件。\n\n`git add filename`\n\n现在我们已经添加了这些文件，我们希望它们能够真正被保存在 Git 仓库。为此，我们将它们提交到仓库。\n\n`git commit -m \"Adding files\"`\n\n可以通过\n\n`git commit -v`\n\n查看所有 diff 信息\n\n当我们修改了很多文件，而不想每一个都 add，想 commit 自动来提交本地修改，我们可以使用-a 标识。\n\n`git commit -a -m \"Changed some files\"`\n\n`git commit`命令的`-a`选项可将所有被修改或者已删除的且已经被 git 管理的文档提交到仓库中。\n千万注意，`-a`不会造成新文件被提交，只能修改。\n\n`git pull`\n\n拉取线上代码，有可能会有冲突，这时需要手动合并冲突，并提交，vscode 有代码合并工具，方便合并代码。\n\n`git push`\n\n提交本地代码到线上\n\n# 处理 bug\n\n当代码出现 bug 时，可以将当前代码先提交，注意一定要先提交成功，然后执行 `git reset --hard commitID`，重置到指定 commit 时的版本。可以通过`git show commitID` 查看提交时的代码。\n\n# 分支\n\n`git branch 分支名` 创建一个分支\n`git push origin 本地分支名:远程` 提交本地分支到远程\n`git checkout 分支名` 切换到另一个分支\n\n# 通常提交代码流程\n\n1. `git add .` 通常来讲每次的 add 都是一种类型修改提交，不建议一次提交所有\n2. `git commit`\n3. `git pull` 注意 push 前一定要 pull 代码\n4. `git push`\n\n> 引用\n\n- [git 详解](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n\n- [Git 操作手册](https://xiedaimala.com/tasks/24e32d28-9aeb-4010-a643-d97904e8101d/text_tutorials/317c56bc-d774-415c-9594-4b11e67a3f5d)\n","source":"_posts/git入门.md","raw":"---\ntitle: git入门\ndate: 2018-10-11 00:00:00\nupdated: 2018-10-11 00:00:00\ntags:\n  - git\n---\n\n使用 Git 前，需要先建立一个仓库(repository)。我们可以使用一个已经存在的目录作为 Git 仓库或创建一个空目录。\n使用当前目录作为 Git 仓库，我们只需使它初始化。\n\n<!-- more -->\n\n# 常用命令\n\n`git init`\n\n运行后会在当前文件夹建立一个`.git`的文件夹，此时仓库是没有其他文件的，我们可以通过`add`命令增加文件。\n\n`git add filename`\n\n现在我们已经添加了这些文件，我们希望它们能够真正被保存在 Git 仓库。为此，我们将它们提交到仓库。\n\n`git commit -m \"Adding files\"`\n\n可以通过\n\n`git commit -v`\n\n查看所有 diff 信息\n\n当我们修改了很多文件，而不想每一个都 add，想 commit 自动来提交本地修改，我们可以使用-a 标识。\n\n`git commit -a -m \"Changed some files\"`\n\n`git commit`命令的`-a`选项可将所有被修改或者已删除的且已经被 git 管理的文档提交到仓库中。\n千万注意，`-a`不会造成新文件被提交，只能修改。\n\n`git pull`\n\n拉取线上代码，有可能会有冲突，这时需要手动合并冲突，并提交，vscode 有代码合并工具，方便合并代码。\n\n`git push`\n\n提交本地代码到线上\n\n# 处理 bug\n\n当代码出现 bug 时，可以将当前代码先提交，注意一定要先提交成功，然后执行 `git reset --hard commitID`，重置到指定 commit 时的版本。可以通过`git show commitID` 查看提交时的代码。\n\n# 分支\n\n`git branch 分支名` 创建一个分支\n`git push origin 本地分支名:远程` 提交本地分支到远程\n`git checkout 分支名` 切换到另一个分支\n\n# 通常提交代码流程\n\n1. `git add .` 通常来讲每次的 add 都是一种类型修改提交，不建议一次提交所有\n2. `git commit`\n3. `git pull` 注意 push 前一定要 pull 代码\n4. `git push`\n\n> 引用\n\n- [git 详解](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n\n- [Git 操作手册](https://xiedaimala.com/tasks/24e32d28-9aeb-4010-a643-d97904e8101d/text_tutorials/317c56bc-d774-415c-9594-4b11e67a3f5d)\n","slug":"git入门","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpx40019k4u9epha63j0","content":"<p>使用 Git 前，需要先建立一个仓库(repository)。我们可以使用一个已经存在的目录作为 Git 仓库或创建一个空目录。<br>使用当前目录作为 Git 仓库，我们只需使它初始化。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><p><code>git init</code></p>\n<p>运行后会在当前文件夹建立一个<code>.git</code>的文件夹，此时仓库是没有其他文件的，我们可以通过<code>add</code>命令增加文件。</p>\n<p><code>git add filename</code></p>\n<p>现在我们已经添加了这些文件，我们希望它们能够真正被保存在 Git 仓库。为此，我们将它们提交到仓库。</p>\n<p><code>git commit -m &quot;Adding files&quot;</code></p>\n<p>可以通过</p>\n<p><code>git commit -v</code></p>\n<p>查看所有 diff 信息</p>\n<p>当我们修改了很多文件，而不想每一个都 add，想 commit 自动来提交本地修改，我们可以使用-a 标识。</p>\n<p><code>git commit -a -m &quot;Changed some files&quot;</code></p>\n<p><code>git commit</code>命令的<code>-a</code>选项可将所有被修改或者已删除的且已经被 git 管理的文档提交到仓库中。<br>千万注意，<code>-a</code>不会造成新文件被提交，只能修改。</p>\n<p><code>git pull</code></p>\n<p>拉取线上代码，有可能会有冲突，这时需要手动合并冲突，并提交，vscode 有代码合并工具，方便合并代码。</p>\n<p><code>git push</code></p>\n<p>提交本地代码到线上</p>\n<h1 id=\"处理-bug\"><a href=\"#处理-bug\" class=\"headerlink\" title=\"处理 bug\"></a>处理 bug</h1><p>当代码出现 bug 时，可以将当前代码先提交，注意一定要先提交成功，然后执行 <code>git reset --hard commitID</code>，重置到指定 commit 时的版本。可以通过<code>git show commitID</code> 查看提交时的代码。</p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p><code>git branch 分支名</code> 创建一个分支<br><code>git push origin 本地分支名:远程</code> 提交本地分支到远程<br><code>git checkout 分支名</code> 切换到另一个分支</p>\n<h1 id=\"通常提交代码流程\"><a href=\"#通常提交代码流程\" class=\"headerlink\" title=\"通常提交代码流程\"></a>通常提交代码流程</h1><ol>\n<li><code>git add .</code> 通常来讲每次的 add 都是一种类型修改提交，不建议一次提交所有</li>\n<li><code>git commit</code></li>\n<li><code>git pull</code> 注意 push 前一定要 pull 代码</li>\n<li><code>git push</code></li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><p><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">git 详解</a></p>\n</li>\n<li><p><a href=\"https://xiedaimala.com/tasks/24e32d28-9aeb-4010-a643-d97904e8101d/text_tutorials/317c56bc-d774-415c-9594-4b11e67a3f5d\">Git 操作手册</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>使用 Git 前，需要先建立一个仓库(repository)。我们可以使用一个已经存在的目录作为 Git 仓库或创建一个空目录。<br>使用当前目录作为 Git 仓库，我们只需使它初始化。</p>","more":"<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><p><code>git init</code></p>\n<p>运行后会在当前文件夹建立一个<code>.git</code>的文件夹，此时仓库是没有其他文件的，我们可以通过<code>add</code>命令增加文件。</p>\n<p><code>git add filename</code></p>\n<p>现在我们已经添加了这些文件，我们希望它们能够真正被保存在 Git 仓库。为此，我们将它们提交到仓库。</p>\n<p><code>git commit -m &quot;Adding files&quot;</code></p>\n<p>可以通过</p>\n<p><code>git commit -v</code></p>\n<p>查看所有 diff 信息</p>\n<p>当我们修改了很多文件，而不想每一个都 add，想 commit 自动来提交本地修改，我们可以使用-a 标识。</p>\n<p><code>git commit -a -m &quot;Changed some files&quot;</code></p>\n<p><code>git commit</code>命令的<code>-a</code>选项可将所有被修改或者已删除的且已经被 git 管理的文档提交到仓库中。<br>千万注意，<code>-a</code>不会造成新文件被提交，只能修改。</p>\n<p><code>git pull</code></p>\n<p>拉取线上代码，有可能会有冲突，这时需要手动合并冲突，并提交，vscode 有代码合并工具，方便合并代码。</p>\n<p><code>git push</code></p>\n<p>提交本地代码到线上</p>\n<h1 id=\"处理-bug\"><a href=\"#处理-bug\" class=\"headerlink\" title=\"处理 bug\"></a>处理 bug</h1><p>当代码出现 bug 时，可以将当前代码先提交，注意一定要先提交成功，然后执行 <code>git reset --hard commitID</code>，重置到指定 commit 时的版本。可以通过<code>git show commitID</code> 查看提交时的代码。</p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p><code>git branch 分支名</code> 创建一个分支<br><code>git push origin 本地分支名:远程</code> 提交本地分支到远程<br><code>git checkout 分支名</code> 切换到另一个分支</p>\n<h1 id=\"通常提交代码流程\"><a href=\"#通常提交代码流程\" class=\"headerlink\" title=\"通常提交代码流程\"></a>通常提交代码流程</h1><ol>\n<li><code>git add .</code> 通常来讲每次的 add 都是一种类型修改提交，不建议一次提交所有</li>\n<li><code>git commit</code></li>\n<li><code>git pull</code> 注意 push 前一定要 pull 代码</li>\n<li><code>git push</code></li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><p><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">git 详解</a></p>\n</li>\n<li><p><a href=\"https://xiedaimala.com/tasks/24e32d28-9aeb-4010-a643-d97904e8101d/text_tutorials/317c56bc-d774-415c-9594-4b11e67a3f5d\">Git 操作手册</a></p>\n</li>\n</ul>"},{"title":"mixin、科里化，高阶函数","date":"2019-03-08T16:00:00.000Z","updated":"2019-03-08T16:00:00.000Z","_content":"\n了解一下一些 mixin、柯里化、高阶函数。\n\n<!-- more -->\n\n# mixin\n\n用代码解释一下：\n\n```javascript\nfunction (a, b) {\n    for (key in b) {\n        a[key] = b[key]\n    }\n}\n```\n\n上面代码能完成把对象 b 中的属性全部覆盖到 a 中。\n\nES6 中 Object.assign 也是同样的功能\n\n# 柯里化 currying\n\n说到柯里化，就有必要说一下 bind() 方法。\n\nbind 方法将函数绑定到一个对象，它还附带一些其他应用：除了第一个实参之外，传入 bind() 的实参也会绑定到 this。\n\n这个附带应用有时也被称为“柯里化”\n\n举个例子：\n\n```javascript\nvar sum = function (x, y) {\n  return x + y\n}\n\n// 创建一个类似sum的新函数，但 this 的值是 null\n// 并且第一个参数绑定到1，这个新函数期望只传入一个实参\nvar succ = sum.bind(null, 1)\nsucc(2) // 3 x绑定到1，并传入2作为实参\n\nfunction f(y, z) {\n  return this.x + y + z\n}\nvar g = f.bind({ x: 1 }, 2) // 绑定this和y\ng(3) // 6 this.x绑定到1，y绑定2，z绑定3\n```\n\n简单的来说，柯里化是将函数中一个或多个变量设为定值，并得到一个新函数。\n\n```javascript\nvar cache = []\n// 当add没传参数时，返回之前传入参数之和\nfunction add(n) {\n  if (n === undefined) {\n    return cache.reduce((i, j) => i + j, 0)\n  } else {\n    cache.push(n)\n    return add\n  }\n}\n\nadd(1)(2)(3)() // 6\n\n// 进阶版\nfunction add() {\n  let args = [].slice.call(arguments)\n  let fn = function () {\n    let fn_args = [].slice.call(arguments)\n    return add.apply(null, args.concat(fn_args))\n  }\n  fn.toString = function () {\n    return args.reduce((a, b) => a + b)\n  }\n  return fn\n}\n```\n\n# 高阶函数\n\n所谓高阶函数 higher-order function ，就是操作函数的函数。它接收一个或多个函数作为参数，并返回一个新函数。\n\n比如 bind() 也可以实现高阶函数:\n\n```javascript\nfunction add1(x, y) {\n  return x + y\n}\n\n// 主动调用bind\nadd2 = Function.prototype.bind.call(add1, undefined, 1) //将add1传入，this的值绑定到undefined，x的值绑定到1\n\nadd2(2) //3\n```\n","source":"_posts/mixin、科里化，高阶函数.md","raw":"---\ntitle: mixin、科里化，高阶函数\ndate: 2019-03-09 00:00:00\nupdated: 2019-03-09 00:00:00\ntags:\n  - mixin\n  - 柯里化\n  - 高阶函数\n  - JavaScript\n  - bind\n---\n\n了解一下一些 mixin、柯里化、高阶函数。\n\n<!-- more -->\n\n# mixin\n\n用代码解释一下：\n\n```javascript\nfunction (a, b) {\n    for (key in b) {\n        a[key] = b[key]\n    }\n}\n```\n\n上面代码能完成把对象 b 中的属性全部覆盖到 a 中。\n\nES6 中 Object.assign 也是同样的功能\n\n# 柯里化 currying\n\n说到柯里化，就有必要说一下 bind() 方法。\n\nbind 方法将函数绑定到一个对象，它还附带一些其他应用：除了第一个实参之外，传入 bind() 的实参也会绑定到 this。\n\n这个附带应用有时也被称为“柯里化”\n\n举个例子：\n\n```javascript\nvar sum = function (x, y) {\n  return x + y\n}\n\n// 创建一个类似sum的新函数，但 this 的值是 null\n// 并且第一个参数绑定到1，这个新函数期望只传入一个实参\nvar succ = sum.bind(null, 1)\nsucc(2) // 3 x绑定到1，并传入2作为实参\n\nfunction f(y, z) {\n  return this.x + y + z\n}\nvar g = f.bind({ x: 1 }, 2) // 绑定this和y\ng(3) // 6 this.x绑定到1，y绑定2，z绑定3\n```\n\n简单的来说，柯里化是将函数中一个或多个变量设为定值，并得到一个新函数。\n\n```javascript\nvar cache = []\n// 当add没传参数时，返回之前传入参数之和\nfunction add(n) {\n  if (n === undefined) {\n    return cache.reduce((i, j) => i + j, 0)\n  } else {\n    cache.push(n)\n    return add\n  }\n}\n\nadd(1)(2)(3)() // 6\n\n// 进阶版\nfunction add() {\n  let args = [].slice.call(arguments)\n  let fn = function () {\n    let fn_args = [].slice.call(arguments)\n    return add.apply(null, args.concat(fn_args))\n  }\n  fn.toString = function () {\n    return args.reduce((a, b) => a + b)\n  }\n  return fn\n}\n```\n\n# 高阶函数\n\n所谓高阶函数 higher-order function ，就是操作函数的函数。它接收一个或多个函数作为参数，并返回一个新函数。\n\n比如 bind() 也可以实现高阶函数:\n\n```javascript\nfunction add1(x, y) {\n  return x + y\n}\n\n// 主动调用bind\nadd2 = Function.prototype.bind.call(add1, undefined, 1) //将add1传入，this的值绑定到undefined，x的值绑定到1\n\nadd2(2) //3\n```\n","slug":"mixin、科里化，高阶函数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpx4001bk4u92oozbcce","content":"<p>了解一下一些 mixin、柯里化、高阶函数。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h1><p>用代码解释一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> b) &#123;</span><br><span class=\"line\">        a[key] = b[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码能完成把对象 b 中的属性全部覆盖到 a 中。</p>\n<p>ES6 中 Object.assign 也是同样的功能</p>\n<h1 id=\"柯里化-currying\"><a href=\"#柯里化-currying\" class=\"headerlink\" title=\"柯里化 currying\"></a>柯里化 currying</h1><p>说到柯里化，就有必要说一下 bind() 方法。</p>\n<p>bind 方法将函数绑定到一个对象，它还附带一些其他应用：除了第一个实参之外，传入 bind() 的实参也会绑定到 this。</p>\n<p>这个附带应用有时也被称为“柯里化”</p>\n<p>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个类似sum的新函数，但 this 的值是 null</span></span><br><span class=\"line\"><span class=\"comment\">// 并且第一个参数绑定到1，这个新函数期望只传入一个实参</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> succ = sum.bind(<span class=\"literal\">null</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">succ(<span class=\"number\">2</span>) <span class=\"comment\">// 3 x绑定到1，并传入2作为实参</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.x + y + z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = f.bind(&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;, <span class=\"number\">2</span>) <span class=\"comment\">// 绑定this和y</span></span><br><span class=\"line\">g(<span class=\"number\">3</span>) <span class=\"comment\">// 6 this.x绑定到1，y绑定2，z绑定3</span></span><br></pre></td></tr></table></figure>\n\n<p>简单的来说，柯里化是将函数中一个或多个变量设为定值，并得到一个新函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cache = []</span><br><span class=\"line\"><span class=\"comment\">// 当add没传参数时，返回之前传入参数之和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache.reduce(<span class=\"function\">(<span class=\"params\">i, j</span>) =&gt;</span> i + j, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    cache.push(n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)() <span class=\"comment\">// 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进阶版</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [].slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn_args = [].slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add.apply(<span class=\"literal\">null</span>, args.concat(fn_args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fn.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><p>所谓高阶函数 higher-order function ，就是操作函数的函数。它接收一个或多个函数作为参数，并返回一个新函数。</p>\n<p>比如 bind() 也可以实现高阶函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add1</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主动调用bind</span></span><br><span class=\"line\">add2 = <span class=\"built_in\">Function</span>.prototype.bind.call(add1, <span class=\"literal\">undefined</span>, <span class=\"number\">1</span>) <span class=\"comment\">//将add1传入，this的值绑定到undefined，x的值绑定到1</span></span><br><span class=\"line\"></span><br><span class=\"line\">add2(<span class=\"number\">2</span>) <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>了解一下一些 mixin、柯里化、高阶函数。</p>","more":"<h1 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h1><p>用代码解释一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> b) &#123;</span><br><span class=\"line\">        a[key] = b[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码能完成把对象 b 中的属性全部覆盖到 a 中。</p>\n<p>ES6 中 Object.assign 也是同样的功能</p>\n<h1 id=\"柯里化-currying\"><a href=\"#柯里化-currying\" class=\"headerlink\" title=\"柯里化 currying\"></a>柯里化 currying</h1><p>说到柯里化，就有必要说一下 bind() 方法。</p>\n<p>bind 方法将函数绑定到一个对象，它还附带一些其他应用：除了第一个实参之外，传入 bind() 的实参也会绑定到 this。</p>\n<p>这个附带应用有时也被称为“柯里化”</p>\n<p>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个类似sum的新函数，但 this 的值是 null</span></span><br><span class=\"line\"><span class=\"comment\">// 并且第一个参数绑定到1，这个新函数期望只传入一个实参</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> succ = sum.bind(<span class=\"literal\">null</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">succ(<span class=\"number\">2</span>) <span class=\"comment\">// 3 x绑定到1，并传入2作为实参</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.x + y + z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = f.bind(&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;, <span class=\"number\">2</span>) <span class=\"comment\">// 绑定this和y</span></span><br><span class=\"line\">g(<span class=\"number\">3</span>) <span class=\"comment\">// 6 this.x绑定到1，y绑定2，z绑定3</span></span><br></pre></td></tr></table></figure>\n\n<p>简单的来说，柯里化是将函数中一个或多个变量设为定值，并得到一个新函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cache = []</span><br><span class=\"line\"><span class=\"comment\">// 当add没传参数时，返回之前传入参数之和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache.reduce(<span class=\"function\">(<span class=\"params\">i, j</span>) =&gt;</span> i + j, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    cache.push(n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)() <span class=\"comment\">// 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进阶版</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [].slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn_args = [].slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add.apply(<span class=\"literal\">null</span>, args.concat(fn_args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fn.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><p>所谓高阶函数 higher-order function ，就是操作函数的函数。它接收一个或多个函数作为参数，并返回一个新函数。</p>\n<p>比如 bind() 也可以实现高阶函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add1</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主动调用bind</span></span><br><span class=\"line\">add2 = <span class=\"built_in\">Function</span>.prototype.bind.call(add1, <span class=\"literal\">undefined</span>, <span class=\"number\">1</span>) <span class=\"comment\">//将add1传入，this的值绑定到undefined，x的值绑定到1</span></span><br><span class=\"line\"></span><br><span class=\"line\">add2(<span class=\"number\">2</span>) <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>"},{"title":"render函数","date":"2019-04-15T16:00:00.000Z","updated":"2019-04-15T16:00:00.000Z","_content":"\n字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。\n\n<!-- more -->\n\n# 基本用法\n\ntemplate\n\n```html\n<template id=\"hdom\">\n  <div>\n    <h1 v-if=\"level==1\">\n      <slot></slot>\n    </h1>\n    <h2 v-if=\"level==2\">\n      <slot></slot>\n    </h2>\n    <h3 v-if=\"level==3\">\n      <slot></slot>\n    </h3>\n  </div>\n</template>\n```\n\n使用 vue 组件定义\n\n```javascript\nVue.component('child', {\n  props: ['level'],\n  template: '#hdom'\n})\n```\n\n使用 render 函数进行定义组件\n\n```javascript\nVue.component('child', {\n  render: function (createElement) {\n    return createElement('h' + this.level, this.$slots.default)\n  },\n  props: ['level']\n})\n```\n\n# render 函数的参数\n\n1. 第一个参数必须是 createElement,该参数的类型是 function\n\n# createElement 函数的参数\n\n## 第一个参数（必选）\n\n有三种数据类型\n\n1. String 类型：HTML 标签，例如`h1`\n2. Object 类型：含有数据的对象，如`{template: \"<h1></h1>\"}`\n3. Function 类型：返回一个数据对象，例如：\n\n```javascript\nVue.component('child', {\n  render(createElement) {\n    let dom = () => {\n      return\n      {\n        template: '<h1>13</h1>'\n      }\n    }\n    return createElement(dom(), this.$slots.default)\n  }\n})\n```\n\n## 第二个参数（可选）\n\n数据对象，只能是 Object\n\n常用的选项有：\n\n1. class\n\n```javascript\nclass:{\n  xxx:true\n}\n```\n\n2. style\n\n```javascript\nstyle: {\n  color: 'red'\n}\n```\n\n3. attrs （正常的 html 特性）\n\n```\nattrs:{\n  id:'xxx'\n}\n```\n\n4. domprops （原生 Dom 特性）\n\n```\ndomProps:{\n  innerHTML:'<strong>我是加粗的字</strong>'\n}\n```\n\n5. on 添加事件监听\n\n## 第三个参数（可选）\n\n可以是 String 或 Array 类型，代表子节点\n\n1. String 类型：\n2. Array 类型：\n\n```javascript\nrender(createElement) {\n\t\t\t\tlet xxx = () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttemplate: \"<h1></h1>\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn createElement(\n\t\t\t\t\t'div', {\n\n\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\tid: 'xxx'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tcolor: 'red'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclass: {\n\t\t\t\t\t\t\tx1xxx: true\n\t\t\t\t\t\t}\n\t\t\t\t\t},[\n\t\t\t\t\t\tcreateElement('div','div内容1'),\n\t\t\t\t\t\tcreateElement('div','div内容2')\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t}\n```\n\n# slot 在 render 中应用\n\n```Javascript\n<div id=\"app\">\n  <child>\n    <div>111</div>\n    <div>222</div>\n    <div slot='a'>333</div>\n    <div slot='b'>444</div>\n  </child>\n</div>\n<script>\n  Vue.component('child', {\n    render(createElement) {\n      let header = this.$slots.a // 返回含有 VNODE 的数组\n      let main = this.$slots.default\n      let footer = this.$slots.b\n      return createElement(\n        'div',[\n          createElement('header',header),// 虚拟节点，因为 vue 的双向绑定，每次更新了虚拟节点的数据，页面就会更新变更的那一部分\n          createElement('main',main),\n          createElement('footer',footer)\n        ]\n      );\n    }\n  })\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n# 作用域插槽在 render 中的应用\n\n```javascript\n<div id=\"app\">\n  <child>\n    <template scope = 'my'>\n      {{my.xxx}}\n      {{my.yyy}}\n    </template>\n  </child>\n</div>\n<script>\n  Vue.component('child', {\n    render(createElement) {\n      return createElement(\n        'div',this.$scopedSlots.default({\n          xxx:'111',\n          yyy:'222'\n        })\n      );\n    }\n  })\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n# 函数化组件\n\n设置 `functional:true` ,则该组件无状态，无实例。\n\n```\n<div id=\"app\">\n  <child value=\"hi\">\n\n  </child>\n</div>\n<script>\n  Vue.component('child', {\n    functional:true,\n    render(createElement,context) {\n\n      return createElement(\n        'div',[\n          createElement('button',{\n            on:{\n              click:function(){\n                console.log(context.parent) // 父组件\n                console.log(context.props.value) // hi\n                console.log(context.children) // 子组件\n                console.log(this) // Window\n              }\n            }\n          },'点击')\n        ]\n      );\n    }\n  })\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n> 引用\n\n- [渲染函数 & JSX](https://cn.vuejs.org/v2/guide/render-function.html)\n","source":"_posts/render函数.md","raw":"---\ntitle: render函数\ndate: 2019-04-16 00:00:00\nupdated: 2019-04-16 00:00:00\ntags:\n  - Vue\n  - render\n---\n\n字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。\n\n<!-- more -->\n\n# 基本用法\n\ntemplate\n\n```html\n<template id=\"hdom\">\n  <div>\n    <h1 v-if=\"level==1\">\n      <slot></slot>\n    </h1>\n    <h2 v-if=\"level==2\">\n      <slot></slot>\n    </h2>\n    <h3 v-if=\"level==3\">\n      <slot></slot>\n    </h3>\n  </div>\n</template>\n```\n\n使用 vue 组件定义\n\n```javascript\nVue.component('child', {\n  props: ['level'],\n  template: '#hdom'\n})\n```\n\n使用 render 函数进行定义组件\n\n```javascript\nVue.component('child', {\n  render: function (createElement) {\n    return createElement('h' + this.level, this.$slots.default)\n  },\n  props: ['level']\n})\n```\n\n# render 函数的参数\n\n1. 第一个参数必须是 createElement,该参数的类型是 function\n\n# createElement 函数的参数\n\n## 第一个参数（必选）\n\n有三种数据类型\n\n1. String 类型：HTML 标签，例如`h1`\n2. Object 类型：含有数据的对象，如`{template: \"<h1></h1>\"}`\n3. Function 类型：返回一个数据对象，例如：\n\n```javascript\nVue.component('child', {\n  render(createElement) {\n    let dom = () => {\n      return\n      {\n        template: '<h1>13</h1>'\n      }\n    }\n    return createElement(dom(), this.$slots.default)\n  }\n})\n```\n\n## 第二个参数（可选）\n\n数据对象，只能是 Object\n\n常用的选项有：\n\n1. class\n\n```javascript\nclass:{\n  xxx:true\n}\n```\n\n2. style\n\n```javascript\nstyle: {\n  color: 'red'\n}\n```\n\n3. attrs （正常的 html 特性）\n\n```\nattrs:{\n  id:'xxx'\n}\n```\n\n4. domprops （原生 Dom 特性）\n\n```\ndomProps:{\n  innerHTML:'<strong>我是加粗的字</strong>'\n}\n```\n\n5. on 添加事件监听\n\n## 第三个参数（可选）\n\n可以是 String 或 Array 类型，代表子节点\n\n1. String 类型：\n2. Array 类型：\n\n```javascript\nrender(createElement) {\n\t\t\t\tlet xxx = () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttemplate: \"<h1></h1>\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn createElement(\n\t\t\t\t\t'div', {\n\n\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\tid: 'xxx'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tcolor: 'red'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclass: {\n\t\t\t\t\t\t\tx1xxx: true\n\t\t\t\t\t\t}\n\t\t\t\t\t},[\n\t\t\t\t\t\tcreateElement('div','div内容1'),\n\t\t\t\t\t\tcreateElement('div','div内容2')\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t}\n```\n\n# slot 在 render 中应用\n\n```Javascript\n<div id=\"app\">\n  <child>\n    <div>111</div>\n    <div>222</div>\n    <div slot='a'>333</div>\n    <div slot='b'>444</div>\n  </child>\n</div>\n<script>\n  Vue.component('child', {\n    render(createElement) {\n      let header = this.$slots.a // 返回含有 VNODE 的数组\n      let main = this.$slots.default\n      let footer = this.$slots.b\n      return createElement(\n        'div',[\n          createElement('header',header),// 虚拟节点，因为 vue 的双向绑定，每次更新了虚拟节点的数据，页面就会更新变更的那一部分\n          createElement('main',main),\n          createElement('footer',footer)\n        ]\n      );\n    }\n  })\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n# 作用域插槽在 render 中的应用\n\n```javascript\n<div id=\"app\">\n  <child>\n    <template scope = 'my'>\n      {{my.xxx}}\n      {{my.yyy}}\n    </template>\n  </child>\n</div>\n<script>\n  Vue.component('child', {\n    render(createElement) {\n      return createElement(\n        'div',this.$scopedSlots.default({\n          xxx:'111',\n          yyy:'222'\n        })\n      );\n    }\n  })\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n# 函数化组件\n\n设置 `functional:true` ,则该组件无状态，无实例。\n\n```\n<div id=\"app\">\n  <child value=\"hi\">\n\n  </child>\n</div>\n<script>\n  Vue.component('child', {\n    functional:true,\n    render(createElement,context) {\n\n      return createElement(\n        'div',[\n          createElement('button',{\n            on:{\n              click:function(){\n                console.log(context.parent) // 父组件\n                console.log(context.props.value) // hi\n                console.log(context.children) // 子组件\n                console.log(this) // Window\n              }\n            }\n          },'点击')\n        ]\n      );\n    }\n  })\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n> 引用\n\n- [渲染函数 & JSX](https://cn.vuejs.org/v2/guide/render-function.html)\n","slug":"render函数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpx5001dk4u9g7zrdxe6","content":"<p>字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p>template</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hdom&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;level==1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;level==2&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;level==3&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 vue 组件定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">&#x27;level&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;#hdom&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用 render 函数进行定义组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">&#x27;h&#x27;</span> + <span class=\"built_in\">this</span>.level, <span class=\"built_in\">this</span>.$slots.default)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">&#x27;level&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"render-函数的参数\"><a href=\"#render-函数的参数\" class=\"headerlink\" title=\"render 函数的参数\"></a>render 函数的参数</h1><ol>\n<li>第一个参数必须是 createElement,该参数的类型是 function</li>\n</ol>\n<h1 id=\"createElement-函数的参数\"><a href=\"#createElement-函数的参数\" class=\"headerlink\" title=\"createElement 函数的参数\"></a>createElement 函数的参数</h1><h2 id=\"第一个参数（必选）\"><a href=\"#第一个参数（必选）\" class=\"headerlink\" title=\"第一个参数（必选）\"></a>第一个参数（必选）</h2><p>有三种数据类型</p>\n<ol>\n<li>String 类型：HTML 标签，例如<code>h1</code></li>\n<li>Object 类型：含有数据的对象，如<code>&#123;template: &quot;&lt;h1&gt;&lt;/h1&gt;&quot;&#125;</code></li>\n<li>Function 类型：返回一个数据对象，例如：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dom = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;h1&gt;13&lt;/h1&gt;&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(dom(), <span class=\"built_in\">this</span>.$slots.default)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二个参数（可选）\"><a href=\"#第二个参数（可选）\" class=\"headerlink\" title=\"第二个参数（可选）\"></a>第二个参数（可选）</h2><p>数据对象，只能是 Object</p>\n<p>常用的选项有：</p>\n<ol>\n<li>class</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>:</span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">xxx</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>style</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">style: &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>attrs （正常的 html 特性）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attrs:&#123;</span><br><span class=\"line\">  id:&#x27;xxx&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>domprops （原生 Dom 特性）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domProps:&#123;</span><br><span class=\"line\">  innerHTML:&#x27;&lt;strong&gt;我是加粗的字&lt;/strong&gt;&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>on 添加事件监听</li>\n</ol>\n<h2 id=\"第三个参数（可选）\"><a href=\"#第三个参数（可选）\" class=\"headerlink\" title=\"第三个参数（可选）\"></a>第三个参数（可选）</h2><p>可以是 String 或 Array 类型，代表子节点</p>\n<ol>\n<li>String 类型：</li>\n<li>Array 类型：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> xxx = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">template</span>: <span class=\"string\">&quot;&lt;h1&gt;&lt;/h1&gt;&quot;</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> createElement(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&#x27;div&#x27;</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">id</span>: <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">style</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">class</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">x1xxx</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,[</span><br><span class=\"line\">\t\t\t\t\t\tcreateElement(<span class=\"string\">&#x27;div&#x27;</span>,<span class=\"string\">&#x27;div内容1&#x27;</span>),</span><br><span class=\"line\">\t\t\t\t\t\tcreateElement(<span class=\"string\">&#x27;div&#x27;</span>,<span class=\"string\">&#x27;div内容2&#x27;</span>)</span><br><span class=\"line\">\t\t\t\t\t]</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"slot-在-render-中应用\"><a href=\"#slot-在-render-中应用\" class=\"headerlink\" title=\"slot 在 render 中应用\"></a>slot 在 render 中应用</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;a&#x27;</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;b&#x27;</span>&gt;</span>444<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">let</span> header = <span class=\"built_in\">this</span>.$slots.a <span class=\"comment\">// 返回含有 VNODE 的数组</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">let</span> main = <span class=\"built_in\">this</span>.$slots.default</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">let</span> footer = <span class=\"built_in\">this</span>.$slots.b</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> createElement(</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"string\">&#x27;div&#x27;</span>,[</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          createElement(<span class=\"string\">&#x27;header&#x27;</span>,header),<span class=\"comment\">// 虚拟节点，因为 vue 的双向绑定，每次更新了虚拟节点的数据，页面就会更新变更的那一部分</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          createElement(<span class=\"string\">&#x27;main&#x27;</span>,main),</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          createElement(<span class=\"string\">&#x27;footer&#x27;</span>,footer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        ]</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      );</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">data</span>: &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"作用域插槽在-render-中的应用\"><a href=\"#作用域插槽在-render-中的应用\" class=\"headerlink\" title=\"作用域插槽在 render 中的应用\"></a>作用域插槽在 render 中的应用</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">scope</span> = <span class=\"string\">&#x27;my&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      &#123;&#123;my.xxx&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      &#123;&#123;my.yyy&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> createElement(</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"string\">&#x27;div&#x27;</span>,<span class=\"built_in\">this</span>.$scopedSlots.default(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          <span class=\"attr\">xxx</span>:<span class=\"string\">&#x27;111&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          <span class=\"attr\">yyy</span>:<span class=\"string\">&#x27;222&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      );</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">data</span>: &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数化组件\"><a href=\"#函数化组件\" class=\"headerlink\" title=\"函数化组件\"></a>函数化组件</h1><p>设置 <code>functional:true</code> ,则该组件无状态，无实例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;child value=&quot;hi&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/child&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#x27;child&#x27;, &#123;</span><br><span class=\"line\">    functional:true,</span><br><span class=\"line\">    render(createElement,context) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      return createElement(</span><br><span class=\"line\">        &#x27;div&#x27;,[</span><br><span class=\"line\">          createElement(&#x27;button&#x27;,&#123;</span><br><span class=\"line\">            on:&#123;</span><br><span class=\"line\">              click:function()&#123;</span><br><span class=\"line\">                console.log(context.parent) // 父组件</span><br><span class=\"line\">                console.log(context.props.value) // hi</span><br><span class=\"line\">                console.log(context.children) // 子组件</span><br><span class=\"line\">                console.log(this) // Window</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,&#x27;点击&#x27;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  let vm = new Vue(&#123;</span><br><span class=\"line\">    el: &#x27;#app&#x27;,</span><br><span class=\"line\">    data: &#123;&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/render-function.html\">渲染函数 &amp; JSX</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。</p>","more":"<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p>template</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hdom&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;level==1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;level==2&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;level==3&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 vue 组件定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">&#x27;level&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;#hdom&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用 render 函数进行定义组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">&#x27;h&#x27;</span> + <span class=\"built_in\">this</span>.level, <span class=\"built_in\">this</span>.$slots.default)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">&#x27;level&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"render-函数的参数\"><a href=\"#render-函数的参数\" class=\"headerlink\" title=\"render 函数的参数\"></a>render 函数的参数</h1><ol>\n<li>第一个参数必须是 createElement,该参数的类型是 function</li>\n</ol>\n<h1 id=\"createElement-函数的参数\"><a href=\"#createElement-函数的参数\" class=\"headerlink\" title=\"createElement 函数的参数\"></a>createElement 函数的参数</h1><h2 id=\"第一个参数（必选）\"><a href=\"#第一个参数（必选）\" class=\"headerlink\" title=\"第一个参数（必选）\"></a>第一个参数（必选）</h2><p>有三种数据类型</p>\n<ol>\n<li>String 类型：HTML 标签，例如<code>h1</code></li>\n<li>Object 类型：含有数据的对象，如<code>&#123;template: &quot;&lt;h1&gt;&lt;/h1&gt;&quot;&#125;</code></li>\n<li>Function 类型：返回一个数据对象，例如：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dom = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;h1&gt;13&lt;/h1&gt;&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(dom(), <span class=\"built_in\">this</span>.$slots.default)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二个参数（可选）\"><a href=\"#第二个参数（可选）\" class=\"headerlink\" title=\"第二个参数（可选）\"></a>第二个参数（可选）</h2><p>数据对象，只能是 Object</p>\n<p>常用的选项有：</p>\n<ol>\n<li>class</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>:</span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">xxx</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>style</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">style: &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>attrs （正常的 html 特性）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attrs:&#123;</span><br><span class=\"line\">  id:&#x27;xxx&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>domprops （原生 Dom 特性）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domProps:&#123;</span><br><span class=\"line\">  innerHTML:&#x27;&lt;strong&gt;我是加粗的字&lt;/strong&gt;&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>on 添加事件监听</li>\n</ol>\n<h2 id=\"第三个参数（可选）\"><a href=\"#第三个参数（可选）\" class=\"headerlink\" title=\"第三个参数（可选）\"></a>第三个参数（可选）</h2><p>可以是 String 或 Array 类型，代表子节点</p>\n<ol>\n<li>String 类型：</li>\n<li>Array 类型：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> xxx = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">template</span>: <span class=\"string\">&quot;&lt;h1&gt;&lt;/h1&gt;&quot;</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> createElement(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&#x27;div&#x27;</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">id</span>: <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">style</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">class</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">x1xxx</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,[</span><br><span class=\"line\">\t\t\t\t\t\tcreateElement(<span class=\"string\">&#x27;div&#x27;</span>,<span class=\"string\">&#x27;div内容1&#x27;</span>),</span><br><span class=\"line\">\t\t\t\t\t\tcreateElement(<span class=\"string\">&#x27;div&#x27;</span>,<span class=\"string\">&#x27;div内容2&#x27;</span>)</span><br><span class=\"line\">\t\t\t\t\t]</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"slot-在-render-中应用\"><a href=\"#slot-在-render-中应用\" class=\"headerlink\" title=\"slot 在 render 中应用\"></a>slot 在 render 中应用</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;a&#x27;</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;b&#x27;</span>&gt;</span>444<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">let</span> header = <span class=\"built_in\">this</span>.$slots.a <span class=\"comment\">// 返回含有 VNODE 的数组</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">let</span> main = <span class=\"built_in\">this</span>.$slots.default</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">let</span> footer = <span class=\"built_in\">this</span>.$slots.b</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> createElement(</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"string\">&#x27;div&#x27;</span>,[</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          createElement(<span class=\"string\">&#x27;header&#x27;</span>,header),<span class=\"comment\">// 虚拟节点，因为 vue 的双向绑定，每次更新了虚拟节点的数据，页面就会更新变更的那一部分</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          createElement(<span class=\"string\">&#x27;main&#x27;</span>,main),</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          createElement(<span class=\"string\">&#x27;footer&#x27;</span>,footer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        ]</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      );</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">data</span>: &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"作用域插槽在-render-中的应用\"><a href=\"#作用域插槽在-render-中的应用\" class=\"headerlink\" title=\"作用域插槽在 render 中的应用\"></a>作用域插槽在 render 中的应用</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">scope</span> = <span class=\"string\">&#x27;my&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      &#123;&#123;my.xxx&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      &#123;&#123;my.yyy&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> createElement(</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"string\">&#x27;div&#x27;</span>,<span class=\"built_in\">this</span>.$scopedSlots.default(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          <span class=\"attr\">xxx</span>:<span class=\"string\">&#x27;111&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          <span class=\"attr\">yyy</span>:<span class=\"string\">&#x27;222&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      );</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">data</span>: &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数化组件\"><a href=\"#函数化组件\" class=\"headerlink\" title=\"函数化组件\"></a>函数化组件</h1><p>设置 <code>functional:true</code> ,则该组件无状态，无实例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;child value=&quot;hi&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/child&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#x27;child&#x27;, &#123;</span><br><span class=\"line\">    functional:true,</span><br><span class=\"line\">    render(createElement,context) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      return createElement(</span><br><span class=\"line\">        &#x27;div&#x27;,[</span><br><span class=\"line\">          createElement(&#x27;button&#x27;,&#123;</span><br><span class=\"line\">            on:&#123;</span><br><span class=\"line\">              click:function()&#123;</span><br><span class=\"line\">                console.log(context.parent) // 父组件</span><br><span class=\"line\">                console.log(context.props.value) // hi</span><br><span class=\"line\">                console.log(context.children) // 子组件</span><br><span class=\"line\">                console.log(this) // Window</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,&#x27;点击&#x27;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  let vm = new Vue(&#123;</span><br><span class=\"line\">    el: &#x27;#app&#x27;,</span><br><span class=\"line\">    data: &#123;&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/render-function.html\">渲染函数 &amp; JSX</a></li>\n</ul>"},{"title":"var,let,const之间的区别","date":"2019-03-01T16:00:00.000Z","updated":"2019-03-01T16:00:00.000Z","_content":"\n首先声明变量都放在作用域第一行！然后再写一下 var,let,const 之间的区别。\n\n<!-- more -->\n\n# var\n\nvar 在 mdn 中是被这描述的：\n\n变量声明，无论发生在何处，即使代码未执行，都在执行任何代码之前进行处理。\n\n将赋值给未声明变量的值在执行赋值时将其**隐式地创建为全局变量**（它将成为全局对象的属性）。但有时也不一定如此，有时多层嵌套函数时，如果上一层声明了 a，内部使用 a 就不会生成全局变量。\n\n声明变量在任何代码执行前创建，而非声明变量只有在执行赋值操作的时候才会被创建\n\n未能声明变量将很可能导致意想不到的结果。因此，建议始终声明变量，无论它们是在函数还是全局作用域内。 在 ECMAScript 5 严格模式下，分配给未声明的变量会引发错误。\n\n由于变量提升，变量可以在其声明之前使用。\n\n```jacascript\na = 5\nvar a\n\n//可以理解为\n\nvar a\na = 5\n```\n\n因此，建议始终在作用域顶部声明变量（全局代码的顶部和函数代码的顶部），这可以清楚知道哪些变量是函数作用域（本地），哪些变量在作用域链上的。\n\n# let\n\nlet 允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与 var 关键字不同的是，var 声明的变量只能是全局或者整个函数块的。\n\nlet 声明的变量只在其声明的块或子块中可用，这一点，与 var 相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。\n\n在 let 声明变量前使用该变量会报错（Temp Dead Zooe）\n\n```javascript\nfunction varTest() {\n  var x = 1\n  if (true) {\n    var x = 2 // 同样的变量!\n    console.log(x) // 2\n  }\n  console.log(x) // 2\n}\n\nfunction letTest() {\n  let x = 1\n  if (true) {\n    let x = 2 // 不同的变量\n    console.log(x) // 2\n  }\n  console.log(x) // 1\n}\n```\n\n在(同一个函数或)同一个作用域中用 let 重复定义一个变量将引起 TypeError。\n\n# const\n\nconst 是块级作用域，很像使用 let 语句定义的变量。const 的值不能通过重新赋值来改变，并且不能重新声明。\n\nconst 创建一个常数，这个常数可以是全局的或者是局部的。 全局的常量不能成为`window`的属性，不像`var`。\n\nconst 声明创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。\n\n常量在声明的时候可以使用大小写，但通常情况下全部用大写字母。\n\n> 引用\n\n- [var mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var)\n- [let mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let)\n- [const mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const)\n","source":"_posts/var,let,const之间的区别.md","raw":"---\ntitle: var,let,const之间的区别\ndate: 2019-03-02 00:00:00\nupdated: 2019-03-02 00:00:00\ntags:\n  - var\n  - let\n  - const\n---\n\n首先声明变量都放在作用域第一行！然后再写一下 var,let,const 之间的区别。\n\n<!-- more -->\n\n# var\n\nvar 在 mdn 中是被这描述的：\n\n变量声明，无论发生在何处，即使代码未执行，都在执行任何代码之前进行处理。\n\n将赋值给未声明变量的值在执行赋值时将其**隐式地创建为全局变量**（它将成为全局对象的属性）。但有时也不一定如此，有时多层嵌套函数时，如果上一层声明了 a，内部使用 a 就不会生成全局变量。\n\n声明变量在任何代码执行前创建，而非声明变量只有在执行赋值操作的时候才会被创建\n\n未能声明变量将很可能导致意想不到的结果。因此，建议始终声明变量，无论它们是在函数还是全局作用域内。 在 ECMAScript 5 严格模式下，分配给未声明的变量会引发错误。\n\n由于变量提升，变量可以在其声明之前使用。\n\n```jacascript\na = 5\nvar a\n\n//可以理解为\n\nvar a\na = 5\n```\n\n因此，建议始终在作用域顶部声明变量（全局代码的顶部和函数代码的顶部），这可以清楚知道哪些变量是函数作用域（本地），哪些变量在作用域链上的。\n\n# let\n\nlet 允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与 var 关键字不同的是，var 声明的变量只能是全局或者整个函数块的。\n\nlet 声明的变量只在其声明的块或子块中可用，这一点，与 var 相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。\n\n在 let 声明变量前使用该变量会报错（Temp Dead Zooe）\n\n```javascript\nfunction varTest() {\n  var x = 1\n  if (true) {\n    var x = 2 // 同样的变量!\n    console.log(x) // 2\n  }\n  console.log(x) // 2\n}\n\nfunction letTest() {\n  let x = 1\n  if (true) {\n    let x = 2 // 不同的变量\n    console.log(x) // 2\n  }\n  console.log(x) // 1\n}\n```\n\n在(同一个函数或)同一个作用域中用 let 重复定义一个变量将引起 TypeError。\n\n# const\n\nconst 是块级作用域，很像使用 let 语句定义的变量。const 的值不能通过重新赋值来改变，并且不能重新声明。\n\nconst 创建一个常数，这个常数可以是全局的或者是局部的。 全局的常量不能成为`window`的属性，不像`var`。\n\nconst 声明创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。\n\n常量在声明的时候可以使用大小写，但通常情况下全部用大写字母。\n\n> 引用\n\n- [var mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var)\n- [let mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let)\n- [const mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const)\n","slug":"var,let,const之间的区别","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpx6001fk4u99tih4v56","content":"<p>首先声明变量都放在作用域第一行！然后再写一下 var,let,const 之间的区别。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h1><p>var 在 mdn 中是被这描述的：</p>\n<p>变量声明，无论发生在何处，即使代码未执行，都在执行任何代码之前进行处理。</p>\n<p>将赋值给未声明变量的值在执行赋值时将其<strong>隐式地创建为全局变量</strong>（它将成为全局对象的属性）。但有时也不一定如此，有时多层嵌套函数时，如果上一层声明了 a，内部使用 a 就不会生成全局变量。</p>\n<p>声明变量在任何代码执行前创建，而非声明变量只有在执行赋值操作的时候才会被创建</p>\n<p>未能声明变量将很可能导致意想不到的结果。因此，建议始终声明变量，无论它们是在函数还是全局作用域内。 在 ECMAScript 5 严格模式下，分配给未声明的变量会引发错误。</p>\n<p>由于变量提升，变量可以在其声明之前使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 5</span><br><span class=\"line\">var a</span><br><span class=\"line\"></span><br><span class=\"line\">//可以理解为</span><br><span class=\"line\"></span><br><span class=\"line\">var a</span><br><span class=\"line\">a = 5</span><br></pre></td></tr></table></figure>\n\n<p>因此，建议始终在作用域顶部声明变量（全局代码的顶部和函数代码的顶部），这可以清楚知道哪些变量是函数作用域（本地），哪些变量在作用域链上的。</p>\n<h1 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h1><p>let 允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与 var 关键字不同的是，var 声明的变量只能是全局或者整个函数块的。</p>\n<p>let 声明的变量只在其声明的块或子块中可用，这一点，与 var 相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。</p>\n<p>在 let 声明变量前使用该变量会报错（Temp Dead Zooe）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">varTest</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">2</span> <span class=\"comment\">// 同样的变量!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">letTest</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">2</span> <span class=\"comment\">// 不同的变量</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在(同一个函数或)同一个作用域中用 let 重复定义一个变量将引起 TypeError。</p>\n<h1 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h1><p>const 是块级作用域，很像使用 let 语句定义的变量。const 的值不能通过重新赋值来改变，并且不能重新声明。</p>\n<p>const 创建一个常数，这个常数可以是全局的或者是局部的。 全局的常量不能成为<code>window</code>的属性，不像<code>var</code>。</p>\n<p>const 声明创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。</p>\n<p>常量在声明的时候可以使用大小写，但通常情况下全部用大写字母。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var\">var mdn</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let\">let mdn</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const\">const mdn</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>首先声明变量都放在作用域第一行！然后再写一下 var,let,const 之间的区别。</p>","more":"<h1 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h1><p>var 在 mdn 中是被这描述的：</p>\n<p>变量声明，无论发生在何处，即使代码未执行，都在执行任何代码之前进行处理。</p>\n<p>将赋值给未声明变量的值在执行赋值时将其<strong>隐式地创建为全局变量</strong>（它将成为全局对象的属性）。但有时也不一定如此，有时多层嵌套函数时，如果上一层声明了 a，内部使用 a 就不会生成全局变量。</p>\n<p>声明变量在任何代码执行前创建，而非声明变量只有在执行赋值操作的时候才会被创建</p>\n<p>未能声明变量将很可能导致意想不到的结果。因此，建议始终声明变量，无论它们是在函数还是全局作用域内。 在 ECMAScript 5 严格模式下，分配给未声明的变量会引发错误。</p>\n<p>由于变量提升，变量可以在其声明之前使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 5</span><br><span class=\"line\">var a</span><br><span class=\"line\"></span><br><span class=\"line\">//可以理解为</span><br><span class=\"line\"></span><br><span class=\"line\">var a</span><br><span class=\"line\">a = 5</span><br></pre></td></tr></table></figure>\n\n<p>因此，建议始终在作用域顶部声明变量（全局代码的顶部和函数代码的顶部），这可以清楚知道哪些变量是函数作用域（本地），哪些变量在作用域链上的。</p>\n<h1 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h1><p>let 允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与 var 关键字不同的是，var 声明的变量只能是全局或者整个函数块的。</p>\n<p>let 声明的变量只在其声明的块或子块中可用，这一点，与 var 相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。</p>\n<p>在 let 声明变量前使用该变量会报错（Temp Dead Zooe）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">varTest</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">2</span> <span class=\"comment\">// 同样的变量!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">letTest</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">2</span> <span class=\"comment\">// 不同的变量</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在(同一个函数或)同一个作用域中用 let 重复定义一个变量将引起 TypeError。</p>\n<h1 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h1><p>const 是块级作用域，很像使用 let 语句定义的变量。const 的值不能通过重新赋值来改变，并且不能重新声明。</p>\n<p>const 创建一个常数，这个常数可以是全局的或者是局部的。 全局的常量不能成为<code>window</code>的属性，不像<code>var</code>。</p>\n<p>const 声明创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。</p>\n<p>常量在声明的时候可以使用大小写，但通常情况下全部用大写字母。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var\">var mdn</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let\">let mdn</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const\">const mdn</a></li>\n</ul>"},{"title":"web 性能优化","date":"2019-03-09T16:00:00.000Z","updated":"2019-03-09T16:00:00.000Z","_content":"\n从网页开始请求到加载完成，从前端角度分析如何实现 web 性能优化，即：网页加载更快。\n\n<!-- more -->\n\n网页开始请求到加载完成可分为以下几个过程：\n\n1. 本地缓存 `×` 第一次访问没有缓存\n2. DNS 缓存 `√`\n3. 建立 TCP 连接 `√`\n4. 发送请求 `√`\n5. 后台处理 `×` 前端无法处理\n6. 接收响应 `√`\n7. 接收完成 `√`\n8. 解读 DOCTYPE `√`\n9. 逐行解析 `√`\n10. 解析标签 `√`\n11. 解析 CSS `√`\n12. 解析 JS `√`\n\n# DNS 缓存\n\n网页中的域名需要经过域名解析，而一次解析就要 20-120 ms 的时间。在 dns 查询结束之前，浏览器不会下载该域名下的任何东西。所以减少 dns 查询的时间可以加快页面的加载速度。建议一个页面所包含的域名数尽量控制在 2-4 个。\n\n# 建立 TCP 连接\n\nKeep-Alive 是一个通用消息头，允许消息发送者暗示连接的状态，还可以用来设置超时时长和最大请求数。\n\n建立 TCP 连接首先需要三次握手，在传输数据之前，在客户端和服务器之间相互交换 SYN 和 ACK 数据包。使用 keep-alive 标头意味着不必经常执行此过程。好处有：\n\n- 网络资源保护：每个客户端使用单个连接对网络资源的负担较小。\n- 减少网络拥塞：减少服务器和客户端之间的 TCP 连接数可能会导致网络拥塞减少。\n- 减少延迟：减少三方握手次数可以改善网站延迟。对于 SSL / TLS 连接尤其如此，这需要额外的往返来加密和验证连接。\n\nHTTP/2 中使用的是多路复用。\n\nHTTP 1.x 中，如果想并发多个请求，必须使用多个 TCP 链接，且浏览器为了控制资源，还会对单个域名有 6-8 个的 TCP 链接请求限制。\n\n在 HTTP/2 中：\n\n同域名下所有通信都在单个连接上完成。单个连接可以承载任意数量的双向数据流。数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。\n\n这一特性，使性能有了极大提升：\n\n同个域名只需要占用一个 TCP 连接，消除了因多个 TCP 连接而带来的延时和内存消耗。\n单个连接上可以并行交错的请求和响应，之间互不干扰。\n在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。\n\n# 发送请求\n\n因为浏览器每次发送请求都会带上 cookie ，因此减少 cookie 的大小可以加快请求速度。并使用 cache-control。倘若文件过大，就分多次请求，避免用户一次等待过多时间。这是就需要多个域名，增大瞬间请求的数量。\n\n# 接收响应\n\n1. 使用 Etag，倘若服务器内容未更新，则服务器返回 304.\n2. 使用 Gzip 压缩。服务器把响应内容压缩后再传输，浏览器重新解压后再使用数据。\n\n# doctype\n\ndoctype 写错可能导致页面显示不正常，并且不能不写。\n\n# 逐行解析\n\n尽量减少标签数量\n\n# 解析标签\n\n解析到标签，比如`h1`\n\n在 ie 中会直接显示便签，在解析到 CSS 后再重新渲染标签，影响性能\n\n在 Chrome 中，浏览器默认用户是在网速很快的环境下的，因此是等到 css 加载完毕再显示标签\n\n# 解析 CSS\n\n1. 尽量少的 CSS 以减少请求数量。\n2. 将 CSS 放到页面首部，某些浏览器就不用重载页面。\n3. 压缩文件大小\n\n# 解析 js\n\n1. js 脚本文件放到页面底部，因为脚本文件会阻塞页面加载\n2. 尽量减少的 js 以减少请求数量。\n3. 压缩文件大小。\n4. 懒加载，先加载用户时候的数据，当用户滚动的时候再加载下面的。\n5. 加 loading 动画可以延长用户等待时间。\n6. 将 js 和 CSS 文件放到 CDN 上，速度快，而且都是无 cookie 请求。\n\n> 引用\n\n- [Keep-Alive](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive)\n- [What is HTTP Keep-Alive](https://www.incapsula.com/cdn-guide/glossary/http-keep-alive.html)\n- [一文读懂 HTTP/2 特性](https://zhuanlan.zhihu.com/p/26559480)\n","source":"_posts/web性能优化.md","raw":"---\ntitle: web 性能优化\ndate: 2019-03-10 00:00:00\nupdated: 2019-03-10 00:00:00\ntags:\n  - 性能\n  - 优化\n---\n\n从网页开始请求到加载完成，从前端角度分析如何实现 web 性能优化，即：网页加载更快。\n\n<!-- more -->\n\n网页开始请求到加载完成可分为以下几个过程：\n\n1. 本地缓存 `×` 第一次访问没有缓存\n2. DNS 缓存 `√`\n3. 建立 TCP 连接 `√`\n4. 发送请求 `√`\n5. 后台处理 `×` 前端无法处理\n6. 接收响应 `√`\n7. 接收完成 `√`\n8. 解读 DOCTYPE `√`\n9. 逐行解析 `√`\n10. 解析标签 `√`\n11. 解析 CSS `√`\n12. 解析 JS `√`\n\n# DNS 缓存\n\n网页中的域名需要经过域名解析，而一次解析就要 20-120 ms 的时间。在 dns 查询结束之前，浏览器不会下载该域名下的任何东西。所以减少 dns 查询的时间可以加快页面的加载速度。建议一个页面所包含的域名数尽量控制在 2-4 个。\n\n# 建立 TCP 连接\n\nKeep-Alive 是一个通用消息头，允许消息发送者暗示连接的状态，还可以用来设置超时时长和最大请求数。\n\n建立 TCP 连接首先需要三次握手，在传输数据之前，在客户端和服务器之间相互交换 SYN 和 ACK 数据包。使用 keep-alive 标头意味着不必经常执行此过程。好处有：\n\n- 网络资源保护：每个客户端使用单个连接对网络资源的负担较小。\n- 减少网络拥塞：减少服务器和客户端之间的 TCP 连接数可能会导致网络拥塞减少。\n- 减少延迟：减少三方握手次数可以改善网站延迟。对于 SSL / TLS 连接尤其如此，这需要额外的往返来加密和验证连接。\n\nHTTP/2 中使用的是多路复用。\n\nHTTP 1.x 中，如果想并发多个请求，必须使用多个 TCP 链接，且浏览器为了控制资源，还会对单个域名有 6-8 个的 TCP 链接请求限制。\n\n在 HTTP/2 中：\n\n同域名下所有通信都在单个连接上完成。单个连接可以承载任意数量的双向数据流。数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。\n\n这一特性，使性能有了极大提升：\n\n同个域名只需要占用一个 TCP 连接，消除了因多个 TCP 连接而带来的延时和内存消耗。\n单个连接上可以并行交错的请求和响应，之间互不干扰。\n在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。\n\n# 发送请求\n\n因为浏览器每次发送请求都会带上 cookie ，因此减少 cookie 的大小可以加快请求速度。并使用 cache-control。倘若文件过大，就分多次请求，避免用户一次等待过多时间。这是就需要多个域名，增大瞬间请求的数量。\n\n# 接收响应\n\n1. 使用 Etag，倘若服务器内容未更新，则服务器返回 304.\n2. 使用 Gzip 压缩。服务器把响应内容压缩后再传输，浏览器重新解压后再使用数据。\n\n# doctype\n\ndoctype 写错可能导致页面显示不正常，并且不能不写。\n\n# 逐行解析\n\n尽量减少标签数量\n\n# 解析标签\n\n解析到标签，比如`h1`\n\n在 ie 中会直接显示便签，在解析到 CSS 后再重新渲染标签，影响性能\n\n在 Chrome 中，浏览器默认用户是在网速很快的环境下的，因此是等到 css 加载完毕再显示标签\n\n# 解析 CSS\n\n1. 尽量少的 CSS 以减少请求数量。\n2. 将 CSS 放到页面首部，某些浏览器就不用重载页面。\n3. 压缩文件大小\n\n# 解析 js\n\n1. js 脚本文件放到页面底部，因为脚本文件会阻塞页面加载\n2. 尽量减少的 js 以减少请求数量。\n3. 压缩文件大小。\n4. 懒加载，先加载用户时候的数据，当用户滚动的时候再加载下面的。\n5. 加 loading 动画可以延长用户等待时间。\n6. 将 js 和 CSS 文件放到 CDN 上，速度快，而且都是无 cookie 请求。\n\n> 引用\n\n- [Keep-Alive](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive)\n- [What is HTTP Keep-Alive](https://www.incapsula.com/cdn-guide/glossary/http-keep-alive.html)\n- [一文读懂 HTTP/2 特性](https://zhuanlan.zhihu.com/p/26559480)\n","slug":"web性能优化","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxe001hk4u9gua3boqx","content":"<p>从网页开始请求到加载完成，从前端角度分析如何实现 web 性能优化，即：网页加载更快。</p>\n<span id=\"more\"></span>\n\n<p>网页开始请求到加载完成可分为以下几个过程：</p>\n<ol>\n<li>本地缓存 <code>×</code> 第一次访问没有缓存</li>\n<li>DNS 缓存 <code>√</code></li>\n<li>建立 TCP 连接 <code>√</code></li>\n<li>发送请求 <code>√</code></li>\n<li>后台处理 <code>×</code> 前端无法处理</li>\n<li>接收响应 <code>√</code></li>\n<li>接收完成 <code>√</code></li>\n<li>解读 DOCTYPE <code>√</code></li>\n<li>逐行解析 <code>√</code></li>\n<li>解析标签 <code>√</code></li>\n<li>解析 CSS <code>√</code></li>\n<li>解析 JS <code>√</code></li>\n</ol>\n<h1 id=\"DNS-缓存\"><a href=\"#DNS-缓存\" class=\"headerlink\" title=\"DNS 缓存\"></a>DNS 缓存</h1><p>网页中的域名需要经过域名解析，而一次解析就要 20-120 ms 的时间。在 dns 查询结束之前，浏览器不会下载该域名下的任何东西。所以减少 dns 查询的时间可以加快页面的加载速度。建议一个页面所包含的域名数尽量控制在 2-4 个。</p>\n<h1 id=\"建立-TCP-连接\"><a href=\"#建立-TCP-连接\" class=\"headerlink\" title=\"建立 TCP 连接\"></a>建立 TCP 连接</h1><p>Keep-Alive 是一个通用消息头，允许消息发送者暗示连接的状态，还可以用来设置超时时长和最大请求数。</p>\n<p>建立 TCP 连接首先需要三次握手，在传输数据之前，在客户端和服务器之间相互交换 SYN 和 ACK 数据包。使用 keep-alive 标头意味着不必经常执行此过程。好处有：</p>\n<ul>\n<li>网络资源保护：每个客户端使用单个连接对网络资源的负担较小。</li>\n<li>减少网络拥塞：减少服务器和客户端之间的 TCP 连接数可能会导致网络拥塞减少。</li>\n<li>减少延迟：减少三方握手次数可以改善网站延迟。对于 SSL / TLS 连接尤其如此，这需要额外的往返来加密和验证连接。</li>\n</ul>\n<p>HTTP/2 中使用的是多路复用。</p>\n<p>HTTP 1.x 中，如果想并发多个请求，必须使用多个 TCP 链接，且浏览器为了控制资源，还会对单个域名有 6-8 个的 TCP 链接请求限制。</p>\n<p>在 HTTP/2 中：</p>\n<p>同域名下所有通信都在单个连接上完成。单个连接可以承载任意数量的双向数据流。数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</p>\n<p>这一特性，使性能有了极大提升：</p>\n<p>同个域名只需要占用一个 TCP 连接，消除了因多个 TCP 连接而带来的延时和内存消耗。<br>单个连接上可以并行交错的请求和响应，之间互不干扰。<br>在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。</p>\n<h1 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h1><p>因为浏览器每次发送请求都会带上 cookie ，因此减少 cookie 的大小可以加快请求速度。并使用 cache-control。倘若文件过大，就分多次请求，避免用户一次等待过多时间。这是就需要多个域名，增大瞬间请求的数量。</p>\n<h1 id=\"接收响应\"><a href=\"#接收响应\" class=\"headerlink\" title=\"接收响应\"></a>接收响应</h1><ol>\n<li>使用 Etag，倘若服务器内容未更新，则服务器返回 304.</li>\n<li>使用 Gzip 压缩。服务器把响应内容压缩后再传输，浏览器重新解压后再使用数据。</li>\n</ol>\n<h1 id=\"doctype\"><a href=\"#doctype\" class=\"headerlink\" title=\"doctype\"></a>doctype</h1><p>doctype 写错可能导致页面显示不正常，并且不能不写。</p>\n<h1 id=\"逐行解析\"><a href=\"#逐行解析\" class=\"headerlink\" title=\"逐行解析\"></a>逐行解析</h1><p>尽量减少标签数量</p>\n<h1 id=\"解析标签\"><a href=\"#解析标签\" class=\"headerlink\" title=\"解析标签\"></a>解析标签</h1><p>解析到标签，比如<code>h1</code></p>\n<p>在 ie 中会直接显示便签，在解析到 CSS 后再重新渲染标签，影响性能</p>\n<p>在 Chrome 中，浏览器默认用户是在网速很快的环境下的，因此是等到 css 加载完毕再显示标签</p>\n<h1 id=\"解析-CSS\"><a href=\"#解析-CSS\" class=\"headerlink\" title=\"解析 CSS\"></a>解析 CSS</h1><ol>\n<li>尽量少的 CSS 以减少请求数量。</li>\n<li>将 CSS 放到页面首部，某些浏览器就不用重载页面。</li>\n<li>压缩文件大小</li>\n</ol>\n<h1 id=\"解析-js\"><a href=\"#解析-js\" class=\"headerlink\" title=\"解析 js\"></a>解析 js</h1><ol>\n<li>js 脚本文件放到页面底部，因为脚本文件会阻塞页面加载</li>\n<li>尽量减少的 js 以减少请求数量。</li>\n<li>压缩文件大小。</li>\n<li>懒加载，先加载用户时候的数据，当用户滚动的时候再加载下面的。</li>\n<li>加 loading 动画可以延长用户等待时间。</li>\n<li>将 js 和 CSS 文件放到 CDN 上，速度快，而且都是无 cookie 请求。</li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive\">Keep-Alive</a></li>\n<li><a href=\"https://www.incapsula.com/cdn-guide/glossary/http-keep-alive.html\">What is HTTP Keep-Alive</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26559480\">一文读懂 HTTP/2 特性</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>从网页开始请求到加载完成，从前端角度分析如何实现 web 性能优化，即：网页加载更快。</p>","more":"<p>网页开始请求到加载完成可分为以下几个过程：</p>\n<ol>\n<li>本地缓存 <code>×</code> 第一次访问没有缓存</li>\n<li>DNS 缓存 <code>√</code></li>\n<li>建立 TCP 连接 <code>√</code></li>\n<li>发送请求 <code>√</code></li>\n<li>后台处理 <code>×</code> 前端无法处理</li>\n<li>接收响应 <code>√</code></li>\n<li>接收完成 <code>√</code></li>\n<li>解读 DOCTYPE <code>√</code></li>\n<li>逐行解析 <code>√</code></li>\n<li>解析标签 <code>√</code></li>\n<li>解析 CSS <code>√</code></li>\n<li>解析 JS <code>√</code></li>\n</ol>\n<h1 id=\"DNS-缓存\"><a href=\"#DNS-缓存\" class=\"headerlink\" title=\"DNS 缓存\"></a>DNS 缓存</h1><p>网页中的域名需要经过域名解析，而一次解析就要 20-120 ms 的时间。在 dns 查询结束之前，浏览器不会下载该域名下的任何东西。所以减少 dns 查询的时间可以加快页面的加载速度。建议一个页面所包含的域名数尽量控制在 2-4 个。</p>\n<h1 id=\"建立-TCP-连接\"><a href=\"#建立-TCP-连接\" class=\"headerlink\" title=\"建立 TCP 连接\"></a>建立 TCP 连接</h1><p>Keep-Alive 是一个通用消息头，允许消息发送者暗示连接的状态，还可以用来设置超时时长和最大请求数。</p>\n<p>建立 TCP 连接首先需要三次握手，在传输数据之前，在客户端和服务器之间相互交换 SYN 和 ACK 数据包。使用 keep-alive 标头意味着不必经常执行此过程。好处有：</p>\n<ul>\n<li>网络资源保护：每个客户端使用单个连接对网络资源的负担较小。</li>\n<li>减少网络拥塞：减少服务器和客户端之间的 TCP 连接数可能会导致网络拥塞减少。</li>\n<li>减少延迟：减少三方握手次数可以改善网站延迟。对于 SSL / TLS 连接尤其如此，这需要额外的往返来加密和验证连接。</li>\n</ul>\n<p>HTTP/2 中使用的是多路复用。</p>\n<p>HTTP 1.x 中，如果想并发多个请求，必须使用多个 TCP 链接，且浏览器为了控制资源，还会对单个域名有 6-8 个的 TCP 链接请求限制。</p>\n<p>在 HTTP/2 中：</p>\n<p>同域名下所有通信都在单个连接上完成。单个连接可以承载任意数量的双向数据流。数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</p>\n<p>这一特性，使性能有了极大提升：</p>\n<p>同个域名只需要占用一个 TCP 连接，消除了因多个 TCP 连接而带来的延时和内存消耗。<br>单个连接上可以并行交错的请求和响应，之间互不干扰。<br>在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。</p>\n<h1 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h1><p>因为浏览器每次发送请求都会带上 cookie ，因此减少 cookie 的大小可以加快请求速度。并使用 cache-control。倘若文件过大，就分多次请求，避免用户一次等待过多时间。这是就需要多个域名，增大瞬间请求的数量。</p>\n<h1 id=\"接收响应\"><a href=\"#接收响应\" class=\"headerlink\" title=\"接收响应\"></a>接收响应</h1><ol>\n<li>使用 Etag，倘若服务器内容未更新，则服务器返回 304.</li>\n<li>使用 Gzip 压缩。服务器把响应内容压缩后再传输，浏览器重新解压后再使用数据。</li>\n</ol>\n<h1 id=\"doctype\"><a href=\"#doctype\" class=\"headerlink\" title=\"doctype\"></a>doctype</h1><p>doctype 写错可能导致页面显示不正常，并且不能不写。</p>\n<h1 id=\"逐行解析\"><a href=\"#逐行解析\" class=\"headerlink\" title=\"逐行解析\"></a>逐行解析</h1><p>尽量减少标签数量</p>\n<h1 id=\"解析标签\"><a href=\"#解析标签\" class=\"headerlink\" title=\"解析标签\"></a>解析标签</h1><p>解析到标签，比如<code>h1</code></p>\n<p>在 ie 中会直接显示便签，在解析到 CSS 后再重新渲染标签，影响性能</p>\n<p>在 Chrome 中，浏览器默认用户是在网速很快的环境下的，因此是等到 css 加载完毕再显示标签</p>\n<h1 id=\"解析-CSS\"><a href=\"#解析-CSS\" class=\"headerlink\" title=\"解析 CSS\"></a>解析 CSS</h1><ol>\n<li>尽量少的 CSS 以减少请求数量。</li>\n<li>将 CSS 放到页面首部，某些浏览器就不用重载页面。</li>\n<li>压缩文件大小</li>\n</ol>\n<h1 id=\"解析-js\"><a href=\"#解析-js\" class=\"headerlink\" title=\"解析 js\"></a>解析 js</h1><ol>\n<li>js 脚本文件放到页面底部，因为脚本文件会阻塞页面加载</li>\n<li>尽量减少的 js 以减少请求数量。</li>\n<li>压缩文件大小。</li>\n<li>懒加载，先加载用户时候的数据，当用户滚动的时候再加载下面的。</li>\n<li>加 loading 动画可以延长用户等待时间。</li>\n<li>将 js 和 CSS 文件放到 CDN 上，速度快，而且都是无 cookie 请求。</li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive\">Keep-Alive</a></li>\n<li><a href=\"https://www.incapsula.com/cdn-guide/glossary/http-keep-alive.html\">What is HTTP Keep-Alive</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26559480\">一文读懂 HTTP/2 特性</a></li>\n</ul>"},{"title":"三种常见排序","date":"2019-03-31T16:00:00.000Z","updated":"2019-03-31T16:00:00.000Z","_content":"\n好记性不如烂笔头，万一哪天忘了，我还能查...\n\n<!-- more -->\n\n# 冒泡排序\n\n![冒泡排序](https://www.google.com/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwiGmdamh6_hAhVBCqYKHcNsD-0QjRx6BAgBEAU&url=https%3A%2F%2Fwww.cnblogs.com%2Feniac12%2Fp%2F5329396.html&psig=AOvVaw0xPQB8eNXUhz08vcurfcT5&ust=1554213666476354)\n\n## 算法流程\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n## 代码实现\n\n```javascript\nfunction bubbleSort(array) {\n  let i = array.length,\n    j,\n    temp\n  while (i > 1) {\n    for (j = 0; j < i; j++) {\n      if (array[j] > array[j + 1]) {\n        temp = array[j]\n        array[j] = array[j + 1]\n        array[j + 1] = temp\n      }\n    }\n    i--\n  }\n  return array\n}\n```\n\n# 选择排序\n\n![选择排序](https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif)\n\n## 算法流程\n\n1. 在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n2. 从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n3. 以此类推，直到所有元素均排序完毕。\n\n## 代码实现\n\n```javascript\nfunction selectionSort(array) {\n  var length = array.length,\n    i,\n    j,\n    minIndex,\n    minValue,\n    temp\n  for (i = 0; i < length - 1; i++) {\n    minIndex = i\n    minValue = array[minIndex]\n    for (j = i + 1; j < length; j++) {\n      if (array[j] < minValue) {\n        minIndex = j\n        minValue = array[minIndex]\n      }\n    }\n    // 交换位置\n    temp = array[i]\n    array[i] = minValue\n    array[minIndex] = temp\n  }\n  return array\n}\n```\n\n# 快速排序\n\n![快速排序](https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif)\n\n## 算法流程\n\n1. 在数据集之中，选择一个元素作为”基准”（pivot）。\n2. 所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition) 操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。\n3. 对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n\n## 代码实现\n\n```javascript\nfunction quickSort(array) {\n  // 交换元素位置\n  function swap(array, i, k) {\n    var temp = array[i]\n    array[i] = array[k]\n    array[k] = temp\n  }\n\n  // 数组分区，左小右大\n  function partition(array, left, right) {\n    var storeIndex = left\n    var pivot = array[right] // 直接选最右边的元素为基准元素\n    for (var i = left; i < right; i++) {\n      if (array[i] < pivot) {\n        swap(array, storeIndex, i)\n        storeIndex++ // 交换位置后，storeIndex 自增 1，代表下一个可能要交换的位置\n      }\n    }\n    swap(array, right, storeIndex) // 将基准元素放置到最后的正确位置上\n    return storeIndex\n  }\n\n  function sort(array, left, right) {\n    if (left > right) {\n      return\n    }\n    var storeIndex = partition(array, left, right)\n    sort(array, left, storeIndex - 1)\n    sort(array, storeIndex + 1, right)\n  }\n  sort(array, 0, array.length - 1)\n  return array\n}\n```\n\n> 引用\n\n- [常见排序算法 - 冒泡排序 (Bubble Sort)](http://bubkoo.com/2014/01/12/sort-algorithm/bubble-sort/)\n- [常见排序算法 - 选择排序 (Selection Sort)](http://bubkoo.com/2014/01/13/sort-algorithm/selection-sort/)\n- [常见排序算法 - 快速排序 (Quick Sort)](http://bubkoo.com/2014/01/12/sort-algorithm/quick-sort/)\n","source":"_posts/三种常见排序.md","raw":"---\ntitle: 三种常见排序\ndate: 2019-04-01 00:00:00\nupdated: 2019-04-01 00:00:00\ntags:\n  - 冒泡排序\n  - 选择排序\n  - 快速排序\n---\n\n好记性不如烂笔头，万一哪天忘了，我还能查...\n\n<!-- more -->\n\n# 冒泡排序\n\n![冒泡排序](https://www.google.com/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwiGmdamh6_hAhVBCqYKHcNsD-0QjRx6BAgBEAU&url=https%3A%2F%2Fwww.cnblogs.com%2Feniac12%2Fp%2F5329396.html&psig=AOvVaw0xPQB8eNXUhz08vcurfcT5&ust=1554213666476354)\n\n## 算法流程\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n## 代码实现\n\n```javascript\nfunction bubbleSort(array) {\n  let i = array.length,\n    j,\n    temp\n  while (i > 1) {\n    for (j = 0; j < i; j++) {\n      if (array[j] > array[j + 1]) {\n        temp = array[j]\n        array[j] = array[j + 1]\n        array[j + 1] = temp\n      }\n    }\n    i--\n  }\n  return array\n}\n```\n\n# 选择排序\n\n![选择排序](https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif)\n\n## 算法流程\n\n1. 在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n2. 从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n3. 以此类推，直到所有元素均排序完毕。\n\n## 代码实现\n\n```javascript\nfunction selectionSort(array) {\n  var length = array.length,\n    i,\n    j,\n    minIndex,\n    minValue,\n    temp\n  for (i = 0; i < length - 1; i++) {\n    minIndex = i\n    minValue = array[minIndex]\n    for (j = i + 1; j < length; j++) {\n      if (array[j] < minValue) {\n        minIndex = j\n        minValue = array[minIndex]\n      }\n    }\n    // 交换位置\n    temp = array[i]\n    array[i] = minValue\n    array[minIndex] = temp\n  }\n  return array\n}\n```\n\n# 快速排序\n\n![快速排序](https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif)\n\n## 算法流程\n\n1. 在数据集之中，选择一个元素作为”基准”（pivot）。\n2. 所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition) 操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。\n3. 对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n\n## 代码实现\n\n```javascript\nfunction quickSort(array) {\n  // 交换元素位置\n  function swap(array, i, k) {\n    var temp = array[i]\n    array[i] = array[k]\n    array[k] = temp\n  }\n\n  // 数组分区，左小右大\n  function partition(array, left, right) {\n    var storeIndex = left\n    var pivot = array[right] // 直接选最右边的元素为基准元素\n    for (var i = left; i < right; i++) {\n      if (array[i] < pivot) {\n        swap(array, storeIndex, i)\n        storeIndex++ // 交换位置后，storeIndex 自增 1，代表下一个可能要交换的位置\n      }\n    }\n    swap(array, right, storeIndex) // 将基准元素放置到最后的正确位置上\n    return storeIndex\n  }\n\n  function sort(array, left, right) {\n    if (left > right) {\n      return\n    }\n    var storeIndex = partition(array, left, right)\n    sort(array, left, storeIndex - 1)\n    sort(array, storeIndex + 1, right)\n  }\n  sort(array, 0, array.length - 1)\n  return array\n}\n```\n\n> 引用\n\n- [常见排序算法 - 冒泡排序 (Bubble Sort)](http://bubkoo.com/2014/01/12/sort-algorithm/bubble-sort/)\n- [常见排序算法 - 选择排序 (Selection Sort)](http://bubkoo.com/2014/01/13/sort-algorithm/selection-sort/)\n- [常见排序算法 - 快速排序 (Quick Sort)](http://bubkoo.com/2014/01/12/sort-algorithm/quick-sort/)\n","slug":"三种常见排序","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxe001jk4u978aydiyk","content":"<p>好记性不如烂笔头，万一哪天忘了，我还能查…</p>\n<span id=\"more\"></span>\n\n<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><p><img src=\"https://www.google.com/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwiGmdamh6_hAhVBCqYKHcNsD-0QjRx6BAgBEAU&url=https://www.cnblogs.com/eniac12/p/5329396.html&psig=AOvVaw0xPQB8eNXUhz08vcurfcT5&ust=1554213666476354\" alt=\"冒泡排序\"></p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = array.length,</span><br><span class=\"line\">    j,</span><br><span class=\"line\">    temp</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j] &gt; array[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        temp = array[j]</span><br><span class=\"line\">        array[j] = array[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">        array[j + <span class=\"number\">1</span>] = temp</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i--</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif\" alt=\"选择排序\"></p>\n<h2 id=\"算法流程-1\"><a href=\"#算法流程-1\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>\n<li>从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>\n<li>以此类推，直到所有元素均排序完毕。</li>\n</ol>\n<h2 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = array.length,</span><br><span class=\"line\">    i,</span><br><span class=\"line\">    j,</span><br><span class=\"line\">    minIndex,</span><br><span class=\"line\">    minValue,</span><br><span class=\"line\">    temp</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    minIndex = i</span><br><span class=\"line\">    minValue = array[minIndex]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j] &lt; minValue) &#123;</span><br><span class=\"line\">        minIndex = j</span><br><span class=\"line\">        minValue = array[minIndex]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换位置</span></span><br><span class=\"line\">    temp = array[i]</span><br><span class=\"line\">    array[i] = minValue</span><br><span class=\"line\">    array[minIndex] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif\" alt=\"快速排序\"></p>\n<h2 id=\"算法流程-2\"><a href=\"#算法流程-2\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>在数据集之中，选择一个元素作为”基准”（pivot）。</li>\n<li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition) 操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。</li>\n<li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li>\n</ol>\n<h2 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 交换元素位置</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">array, i, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = array[i]</span><br><span class=\"line\">    array[i] = array[k]</span><br><span class=\"line\">    array[k] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数组分区，左小右大</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partition</span>(<span class=\"params\">array, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> storeIndex = left</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pivot = array[right] <span class=\"comment\">// 直接选最右边的元素为基准元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = left; i &lt; right; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[i] &lt; pivot) &#123;</span><br><span class=\"line\">        swap(array, storeIndex, i)</span><br><span class=\"line\">        storeIndex++ <span class=\"comment\">// 交换位置后，storeIndex 自增 1，代表下一个可能要交换的位置</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(array, right, storeIndex) <span class=\"comment\">// 将基准元素放置到最后的正确位置上</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> storeIndex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">array, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> storeIndex = partition(array, left, right)</span><br><span class=\"line\">    sort(array, left, storeIndex - <span class=\"number\">1</span>)</span><br><span class=\"line\">    sort(array, storeIndex + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sort(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"http://bubkoo.com/2014/01/12/sort-algorithm/bubble-sort/\">常见排序算法 - 冒泡排序 (Bubble Sort)</a></li>\n<li><a href=\"http://bubkoo.com/2014/01/13/sort-algorithm/selection-sort/\">常见排序算法 - 选择排序 (Selection Sort)</a></li>\n<li><a href=\"http://bubkoo.com/2014/01/12/sort-algorithm/quick-sort/\">常见排序算法 - 快速排序 (Quick Sort)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>好记性不如烂笔头，万一哪天忘了，我还能查…</p>","more":"<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><p><img src=\"https://www.google.com/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwiGmdamh6_hAhVBCqYKHcNsD-0QjRx6BAgBEAU&url=https://www.cnblogs.com/eniac12/p/5329396.html&psig=AOvVaw0xPQB8eNXUhz08vcurfcT5&ust=1554213666476354\" alt=\"冒泡排序\"></p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = array.length,</span><br><span class=\"line\">    j,</span><br><span class=\"line\">    temp</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j] &gt; array[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        temp = array[j]</span><br><span class=\"line\">        array[j] = array[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">        array[j + <span class=\"number\">1</span>] = temp</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i--</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif\" alt=\"选择排序\"></p>\n<h2 id=\"算法流程-1\"><a href=\"#算法流程-1\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>\n<li>从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>\n<li>以此类推，直到所有元素均排序完毕。</li>\n</ol>\n<h2 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = array.length,</span><br><span class=\"line\">    i,</span><br><span class=\"line\">    j,</span><br><span class=\"line\">    minIndex,</span><br><span class=\"line\">    minValue,</span><br><span class=\"line\">    temp</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    minIndex = i</span><br><span class=\"line\">    minValue = array[minIndex]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j] &lt; minValue) &#123;</span><br><span class=\"line\">        minIndex = j</span><br><span class=\"line\">        minValue = array[minIndex]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换位置</span></span><br><span class=\"line\">    temp = array[i]</span><br><span class=\"line\">    array[i] = minValue</span><br><span class=\"line\">    array[minIndex] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif\" alt=\"快速排序\"></p>\n<h2 id=\"算法流程-2\"><a href=\"#算法流程-2\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>在数据集之中，选择一个元素作为”基准”（pivot）。</li>\n<li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition) 操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。</li>\n<li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li>\n</ol>\n<h2 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 交换元素位置</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">array, i, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = array[i]</span><br><span class=\"line\">    array[i] = array[k]</span><br><span class=\"line\">    array[k] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数组分区，左小右大</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partition</span>(<span class=\"params\">array, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> storeIndex = left</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pivot = array[right] <span class=\"comment\">// 直接选最右边的元素为基准元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = left; i &lt; right; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[i] &lt; pivot) &#123;</span><br><span class=\"line\">        swap(array, storeIndex, i)</span><br><span class=\"line\">        storeIndex++ <span class=\"comment\">// 交换位置后，storeIndex 自增 1，代表下一个可能要交换的位置</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(array, right, storeIndex) <span class=\"comment\">// 将基准元素放置到最后的正确位置上</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> storeIndex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">array, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> storeIndex = partition(array, left, right)</span><br><span class=\"line\">    sort(array, left, storeIndex - <span class=\"number\">1</span>)</span><br><span class=\"line\">    sort(array, storeIndex + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sort(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"http://bubkoo.com/2014/01/12/sort-algorithm/bubble-sort/\">常见排序算法 - 冒泡排序 (Bubble Sort)</a></li>\n<li><a href=\"http://bubkoo.com/2014/01/13/sort-algorithm/selection-sort/\">常见排序算法 - 选择排序 (Selection Sort)</a></li>\n<li><a href=\"http://bubkoo.com/2014/01/12/sort-algorithm/quick-sort/\">常见排序算法 - 快速排序 (Quick Sort)</a></li>\n</ul>"},{"title":"个性化 echarts 图表","date":"2019-06-28T16:00:00.000Z","updated":"2019-06-28T16:00:00.000Z","_content":"\n最近公司开发 ERP 系统，其中有表格展示，一开始也没放在心上，心想用 echarts 就行了，但真正开始做后，才发现 echarts 并不简单。\n\n<!-- more -->\n\n其中有一张表的需求是这样的：横坐标表示门店，纵坐标表示门店的销售额和预期销售额，超过预期，超过的部分用紫色表示，未达到预期，未完成的部分用红色表示。\n\n由于对 echarts 不熟悉，一开始就想用堆叠柱状图表示，一部分是实际完成的销售额，一部分是超过的数据，超过的数据有正负，正值表示超过预期了，负值表示低于预期，结果展示出来是这样的\n\n配置如下：\n\n```javascript\noption = {\n  xAxis: {\n    type: 'category',\n    data: ['shop1', 'shop2', 'shop3', 'shop4', 'shop5', 'shop5', 'shop6']\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter(value) {\n        return `${value} 万元`\n      }\n    }\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  series: [\n    {\n      name: '预期销售额',\n      stack: 'one',\n      data: [120, 200, 150, 80, 70, 110, 130],\n      type: 'bar'\n    },\n    {\n      name: '完成情况',\n      stack: 'one',\n      data: [12, 20, 15, -8, 7, -11, 13],\n      type: 'bar',\n      itemStyle: {\n        color: function (p) {\n          return p.value >= 0 ? 'purple' : 'red'\n        }\n      }\n    }\n  ]\n}\n```\n\n展示出来的效果：\n\n![初始图表](https://i.loli.net/2019/06/29/5d1712ca9761120404.png)\n\n发现了几个问题，\n\n1. 完成情况的值，应该是预期目标值+超过的数据，而不只是超出的数据；\n2. 色块的位置，应该都在顶部的；\n3. 两个色块叠加的高度，应该等于实际完成的销售额。\n\n基于此，分析数据，然后得到解决方法：\n\n1. 判断超出数据的值，如果为负，则预期目标值为（预期目标值-未达到的值），并记录下该数值的索引，将负值取正；\n2. 正常堆叠，但是鼠标悬浮上去的值，如果是正值的索引，预期目标值不变，实际完成是预期目标值+超出的数据，如果是负值的索引，两者的值互换位置；\n3. 对的色块也要根据索引改变颜色。\n\n说的有些费劲，还是上代码吧：\n\n```\nlet data1 = [120, 200, 150, 80, 70, 110, 130]\nlet data2 = [12, 20, 15, -8, 7, -11, 13]\nlet indexes = []\n\ndata2.forEach((v,k)=>{\n    if(v<0){\n        indexes.push(k)\n        data1[k] =  data1[k]+v\n        data2[k] =  Math.abs(v)\n    }\n})\n\noption = {\n    xAxis: {\n        type: 'category',\n        data: ['shop1', 'shop2', 'shop3', 'shop4', 'shop5', 'shop5', 'shop6']\n    },\n    yAxis: {\n        type: 'value',\n        axisLabel: {\n                formatter(value) {\n                  return `${value} 万元`;\n                }\n              }\n    },\n     tooltip :{\n            trigger: \"axis\",\n            formatter(value) {\n              if (indexes.indexOf(value[0].dataIndex) >= 0) {\n                return `\n              ${value[0].name}<br/>\n              ${value[0].marker}${value[0].seriesName}: ${value[0].data +\n                  value[1].data}<br />\n              ${value[1].marker}${value[1].seriesName}: ${value[0].data}\n              `;\n              } else {\n                return `\n              ${value[0].name}<br/>\n              ${value[0].marker}${value[0].seriesName}: ${value[0].data}<br />\n              ${value[1].marker}${value[1].seriesName}: ${value[0].data +\n                  value[1].data}\n              `;\n              }\n            }\n          },\n    series: [{\n        name:'预期销售额',\n        stack:'one',\n        data: data1,\n        type: 'bar'\n    },\n    {\n        name:'完成情况',\n        stack:'one',\n        data: data2,\n        type: 'bar',\n        itemStyle: {\n                color: function(p) {\n                  return  indexes.indexOf(p.dataIndex) >= 0 ? \"red\" : \"purple\";\n                }}\n    }]\n};\n```\n\n预览效果如下：\n\n![最终图表](https://i.loli.net/2019/06/29/5d1721c76600393971.png)\n\n有点 low ，不过大体完成效果~~\n","source":"_posts/个性化echarts.md","raw":"---\ntitle: 个性化 echarts 图表\ndate: 2019-06-29 00:00:00\nupdated: 2019-06-29 00:00:00\ntags:\n  - echarts\n---\n\n最近公司开发 ERP 系统，其中有表格展示，一开始也没放在心上，心想用 echarts 就行了，但真正开始做后，才发现 echarts 并不简单。\n\n<!-- more -->\n\n其中有一张表的需求是这样的：横坐标表示门店，纵坐标表示门店的销售额和预期销售额，超过预期，超过的部分用紫色表示，未达到预期，未完成的部分用红色表示。\n\n由于对 echarts 不熟悉，一开始就想用堆叠柱状图表示，一部分是实际完成的销售额，一部分是超过的数据，超过的数据有正负，正值表示超过预期了，负值表示低于预期，结果展示出来是这样的\n\n配置如下：\n\n```javascript\noption = {\n  xAxis: {\n    type: 'category',\n    data: ['shop1', 'shop2', 'shop3', 'shop4', 'shop5', 'shop5', 'shop6']\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter(value) {\n        return `${value} 万元`\n      }\n    }\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  series: [\n    {\n      name: '预期销售额',\n      stack: 'one',\n      data: [120, 200, 150, 80, 70, 110, 130],\n      type: 'bar'\n    },\n    {\n      name: '完成情况',\n      stack: 'one',\n      data: [12, 20, 15, -8, 7, -11, 13],\n      type: 'bar',\n      itemStyle: {\n        color: function (p) {\n          return p.value >= 0 ? 'purple' : 'red'\n        }\n      }\n    }\n  ]\n}\n```\n\n展示出来的效果：\n\n![初始图表](https://i.loli.net/2019/06/29/5d1712ca9761120404.png)\n\n发现了几个问题，\n\n1. 完成情况的值，应该是预期目标值+超过的数据，而不只是超出的数据；\n2. 色块的位置，应该都在顶部的；\n3. 两个色块叠加的高度，应该等于实际完成的销售额。\n\n基于此，分析数据，然后得到解决方法：\n\n1. 判断超出数据的值，如果为负，则预期目标值为（预期目标值-未达到的值），并记录下该数值的索引，将负值取正；\n2. 正常堆叠，但是鼠标悬浮上去的值，如果是正值的索引，预期目标值不变，实际完成是预期目标值+超出的数据，如果是负值的索引，两者的值互换位置；\n3. 对的色块也要根据索引改变颜色。\n\n说的有些费劲，还是上代码吧：\n\n```\nlet data1 = [120, 200, 150, 80, 70, 110, 130]\nlet data2 = [12, 20, 15, -8, 7, -11, 13]\nlet indexes = []\n\ndata2.forEach((v,k)=>{\n    if(v<0){\n        indexes.push(k)\n        data1[k] =  data1[k]+v\n        data2[k] =  Math.abs(v)\n    }\n})\n\noption = {\n    xAxis: {\n        type: 'category',\n        data: ['shop1', 'shop2', 'shop3', 'shop4', 'shop5', 'shop5', 'shop6']\n    },\n    yAxis: {\n        type: 'value',\n        axisLabel: {\n                formatter(value) {\n                  return `${value} 万元`;\n                }\n              }\n    },\n     tooltip :{\n            trigger: \"axis\",\n            formatter(value) {\n              if (indexes.indexOf(value[0].dataIndex) >= 0) {\n                return `\n              ${value[0].name}<br/>\n              ${value[0].marker}${value[0].seriesName}: ${value[0].data +\n                  value[1].data}<br />\n              ${value[1].marker}${value[1].seriesName}: ${value[0].data}\n              `;\n              } else {\n                return `\n              ${value[0].name}<br/>\n              ${value[0].marker}${value[0].seriesName}: ${value[0].data}<br />\n              ${value[1].marker}${value[1].seriesName}: ${value[0].data +\n                  value[1].data}\n              `;\n              }\n            }\n          },\n    series: [{\n        name:'预期销售额',\n        stack:'one',\n        data: data1,\n        type: 'bar'\n    },\n    {\n        name:'完成情况',\n        stack:'one',\n        data: data2,\n        type: 'bar',\n        itemStyle: {\n                color: function(p) {\n                  return  indexes.indexOf(p.dataIndex) >= 0 ? \"red\" : \"purple\";\n                }}\n    }]\n};\n```\n\n预览效果如下：\n\n![最终图表](https://i.loli.net/2019/06/29/5d1721c76600393971.png)\n\n有点 low ，不过大体完成效果~~\n","slug":"个性化echarts","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxf001kk4u9dn4r7avu","content":"<p>最近公司开发 ERP 系统，其中有表格展示，一开始也没放在心上，心想用 echarts 就行了，但真正开始做后，才发现 echarts 并不简单。</p>\n<span id=\"more\"></span>\n\n<p>其中有一张表的需求是这样的：横坐标表示门店，纵坐标表示门店的销售额和预期销售额，超过预期，超过的部分用紫色表示，未达到预期，未完成的部分用红色表示。</p>\n<p>由于对 echarts 不熟悉，一开始就想用堆叠柱状图表示，一部分是实际完成的销售额，一部分是超过的数据，超过的数据有正负，正值表示超过预期了，负值表示低于预期，结果展示出来是这样的</p>\n<p>配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option = &#123;</span><br><span class=\"line\">  <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;category&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: [<span class=\"string\">&#x27;shop1&#x27;</span>, <span class=\"string\">&#x27;shop2&#x27;</span>, <span class=\"string\">&#x27;shop3&#x27;</span>, <span class=\"string\">&#x27;shop4&#x27;</span>, <span class=\"string\">&#x27;shop5&#x27;</span>, <span class=\"string\">&#x27;shop5&#x27;</span>, <span class=\"string\">&#x27;shop6&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;value&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">axisLabel</span>: &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">formatter</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;value&#125;</span> 万元`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;axis&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">series</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;预期销售额&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: <span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"number\">120</span>, <span class=\"number\">200</span>, <span class=\"number\">150</span>, <span class=\"number\">80</span>, <span class=\"number\">70</span>, <span class=\"number\">110</span>, <span class=\"number\">130</span>],</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;完成情况&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: <span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"number\">12</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, -<span class=\"number\">8</span>, <span class=\"number\">7</span>, -<span class=\"number\">11</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">itemStyle</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> p.value &gt;= <span class=\"number\">0</span> ? <span class=\"string\">&#x27;purple&#x27;</span> : <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>展示出来的效果：</p>\n<p><img src=\"https://i.loli.net/2019/06/29/5d1712ca9761120404.png\" alt=\"初始图表\"></p>\n<p>发现了几个问题，</p>\n<ol>\n<li>完成情况的值，应该是预期目标值+超过的数据，而不只是超出的数据；</li>\n<li>色块的位置，应该都在顶部的；</li>\n<li>两个色块叠加的高度，应该等于实际完成的销售额。</li>\n</ol>\n<p>基于此，分析数据，然后得到解决方法：</p>\n<ol>\n<li>判断超出数据的值，如果为负，则预期目标值为（预期目标值-未达到的值），并记录下该数值的索引，将负值取正；</li>\n<li>正常堆叠，但是鼠标悬浮上去的值，如果是正值的索引，预期目标值不变，实际完成是预期目标值+超出的数据，如果是负值的索引，两者的值互换位置；</li>\n<li>对的色块也要根据索引改变颜色。</li>\n</ol>\n<p>说的有些费劲，还是上代码吧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data1 = [120, 200, 150, 80, 70, 110, 130]</span><br><span class=\"line\">let data2 = [12, 20, 15, -8, 7, -11, 13]</span><br><span class=\"line\">let indexes = []</span><br><span class=\"line\"></span><br><span class=\"line\">data2.forEach((v,k)=&gt;&#123;</span><br><span class=\"line\">    if(v&lt;0)&#123;</span><br><span class=\"line\">        indexes.push(k)</span><br><span class=\"line\">        data1[k] =  data1[k]+v</span><br><span class=\"line\">        data2[k] =  Math.abs(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">option = &#123;</span><br><span class=\"line\">    xAxis: &#123;</span><br><span class=\"line\">        type: &#x27;category&#x27;,</span><br><span class=\"line\">        data: [&#x27;shop1&#x27;, &#x27;shop2&#x27;, &#x27;shop3&#x27;, &#x27;shop4&#x27;, &#x27;shop5&#x27;, &#x27;shop5&#x27;, &#x27;shop6&#x27;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    yAxis: &#123;</span><br><span class=\"line\">        type: &#x27;value&#x27;,</span><br><span class=\"line\">        axisLabel: &#123;</span><br><span class=\"line\">                formatter(value) &#123;</span><br><span class=\"line\">                  return `$&#123;value&#125; 万元`;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">     tooltip :&#123;</span><br><span class=\"line\">            trigger: &quot;axis&quot;,</span><br><span class=\"line\">            formatter(value) &#123;</span><br><span class=\"line\">              if (indexes.indexOf(value[0].dataIndex) &gt;= 0) &#123;</span><br><span class=\"line\">                return `</span><br><span class=\"line\">              $&#123;value[0].name&#125;&lt;br/&gt;</span><br><span class=\"line\">              $&#123;value[0].marker&#125;$&#123;value[0].seriesName&#125;: $&#123;value[0].data +</span><br><span class=\"line\">                  value[1].data&#125;&lt;br /&gt;</span><br><span class=\"line\">              $&#123;value[1].marker&#125;$&#123;value[1].seriesName&#125;: $&#123;value[0].data&#125;</span><br><span class=\"line\">              `;</span><br><span class=\"line\">              &#125; else &#123;</span><br><span class=\"line\">                return `</span><br><span class=\"line\">              $&#123;value[0].name&#125;&lt;br/&gt;</span><br><span class=\"line\">              $&#123;value[0].marker&#125;$&#123;value[0].seriesName&#125;: $&#123;value[0].data&#125;&lt;br /&gt;</span><br><span class=\"line\">              $&#123;value[1].marker&#125;$&#123;value[1].seriesName&#125;: $&#123;value[0].data +</span><br><span class=\"line\">                  value[1].data&#125;</span><br><span class=\"line\">              `;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">    series: [&#123;</span><br><span class=\"line\">        name:&#x27;预期销售额&#x27;,</span><br><span class=\"line\">        stack:&#x27;one&#x27;,</span><br><span class=\"line\">        data: data1,</span><br><span class=\"line\">        type: &#x27;bar&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name:&#x27;完成情况&#x27;,</span><br><span class=\"line\">        stack:&#x27;one&#x27;,</span><br><span class=\"line\">        data: data2,</span><br><span class=\"line\">        type: &#x27;bar&#x27;,</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">                color: function(p) &#123;</span><br><span class=\"line\">                  return  indexes.indexOf(p.dataIndex) &gt;= 0 ? &quot;red&quot; : &quot;purple&quot;;</span><br><span class=\"line\">                &#125;&#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>预览效果如下：</p>\n<p><img src=\"https://i.loli.net/2019/06/29/5d1721c76600393971.png\" alt=\"最终图表\"></p>\n<p>有点 low ，不过大体完成效果~~</p>\n","site":{"data":{}},"excerpt":"<p>最近公司开发 ERP 系统，其中有表格展示，一开始也没放在心上，心想用 echarts 就行了，但真正开始做后，才发现 echarts 并不简单。</p>","more":"<p>其中有一张表的需求是这样的：横坐标表示门店，纵坐标表示门店的销售额和预期销售额，超过预期，超过的部分用紫色表示，未达到预期，未完成的部分用红色表示。</p>\n<p>由于对 echarts 不熟悉，一开始就想用堆叠柱状图表示，一部分是实际完成的销售额，一部分是超过的数据，超过的数据有正负，正值表示超过预期了，负值表示低于预期，结果展示出来是这样的</p>\n<p>配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option = &#123;</span><br><span class=\"line\">  <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;category&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: [<span class=\"string\">&#x27;shop1&#x27;</span>, <span class=\"string\">&#x27;shop2&#x27;</span>, <span class=\"string\">&#x27;shop3&#x27;</span>, <span class=\"string\">&#x27;shop4&#x27;</span>, <span class=\"string\">&#x27;shop5&#x27;</span>, <span class=\"string\">&#x27;shop5&#x27;</span>, <span class=\"string\">&#x27;shop6&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;value&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">axisLabel</span>: &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">formatter</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;value&#125;</span> 万元`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;axis&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">series</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;预期销售额&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: <span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"number\">120</span>, <span class=\"number\">200</span>, <span class=\"number\">150</span>, <span class=\"number\">80</span>, <span class=\"number\">70</span>, <span class=\"number\">110</span>, <span class=\"number\">130</span>],</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;完成情况&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: <span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"number\">12</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, -<span class=\"number\">8</span>, <span class=\"number\">7</span>, -<span class=\"number\">11</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">itemStyle</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> p.value &gt;= <span class=\"number\">0</span> ? <span class=\"string\">&#x27;purple&#x27;</span> : <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>展示出来的效果：</p>\n<p><img src=\"https://i.loli.net/2019/06/29/5d1712ca9761120404.png\" alt=\"初始图表\"></p>\n<p>发现了几个问题，</p>\n<ol>\n<li>完成情况的值，应该是预期目标值+超过的数据，而不只是超出的数据；</li>\n<li>色块的位置，应该都在顶部的；</li>\n<li>两个色块叠加的高度，应该等于实际完成的销售额。</li>\n</ol>\n<p>基于此，分析数据，然后得到解决方法：</p>\n<ol>\n<li>判断超出数据的值，如果为负，则预期目标值为（预期目标值-未达到的值），并记录下该数值的索引，将负值取正；</li>\n<li>正常堆叠，但是鼠标悬浮上去的值，如果是正值的索引，预期目标值不变，实际完成是预期目标值+超出的数据，如果是负值的索引，两者的值互换位置；</li>\n<li>对的色块也要根据索引改变颜色。</li>\n</ol>\n<p>说的有些费劲，还是上代码吧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data1 = [120, 200, 150, 80, 70, 110, 130]</span><br><span class=\"line\">let data2 = [12, 20, 15, -8, 7, -11, 13]</span><br><span class=\"line\">let indexes = []</span><br><span class=\"line\"></span><br><span class=\"line\">data2.forEach((v,k)=&gt;&#123;</span><br><span class=\"line\">    if(v&lt;0)&#123;</span><br><span class=\"line\">        indexes.push(k)</span><br><span class=\"line\">        data1[k] =  data1[k]+v</span><br><span class=\"line\">        data2[k] =  Math.abs(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">option = &#123;</span><br><span class=\"line\">    xAxis: &#123;</span><br><span class=\"line\">        type: &#x27;category&#x27;,</span><br><span class=\"line\">        data: [&#x27;shop1&#x27;, &#x27;shop2&#x27;, &#x27;shop3&#x27;, &#x27;shop4&#x27;, &#x27;shop5&#x27;, &#x27;shop5&#x27;, &#x27;shop6&#x27;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    yAxis: &#123;</span><br><span class=\"line\">        type: &#x27;value&#x27;,</span><br><span class=\"line\">        axisLabel: &#123;</span><br><span class=\"line\">                formatter(value) &#123;</span><br><span class=\"line\">                  return `$&#123;value&#125; 万元`;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">     tooltip :&#123;</span><br><span class=\"line\">            trigger: &quot;axis&quot;,</span><br><span class=\"line\">            formatter(value) &#123;</span><br><span class=\"line\">              if (indexes.indexOf(value[0].dataIndex) &gt;= 0) &#123;</span><br><span class=\"line\">                return `</span><br><span class=\"line\">              $&#123;value[0].name&#125;&lt;br/&gt;</span><br><span class=\"line\">              $&#123;value[0].marker&#125;$&#123;value[0].seriesName&#125;: $&#123;value[0].data +</span><br><span class=\"line\">                  value[1].data&#125;&lt;br /&gt;</span><br><span class=\"line\">              $&#123;value[1].marker&#125;$&#123;value[1].seriesName&#125;: $&#123;value[0].data&#125;</span><br><span class=\"line\">              `;</span><br><span class=\"line\">              &#125; else &#123;</span><br><span class=\"line\">                return `</span><br><span class=\"line\">              $&#123;value[0].name&#125;&lt;br/&gt;</span><br><span class=\"line\">              $&#123;value[0].marker&#125;$&#123;value[0].seriesName&#125;: $&#123;value[0].data&#125;&lt;br /&gt;</span><br><span class=\"line\">              $&#123;value[1].marker&#125;$&#123;value[1].seriesName&#125;: $&#123;value[0].data +</span><br><span class=\"line\">                  value[1].data&#125;</span><br><span class=\"line\">              `;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">    series: [&#123;</span><br><span class=\"line\">        name:&#x27;预期销售额&#x27;,</span><br><span class=\"line\">        stack:&#x27;one&#x27;,</span><br><span class=\"line\">        data: data1,</span><br><span class=\"line\">        type: &#x27;bar&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name:&#x27;完成情况&#x27;,</span><br><span class=\"line\">        stack:&#x27;one&#x27;,</span><br><span class=\"line\">        data: data2,</span><br><span class=\"line\">        type: &#x27;bar&#x27;,</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">                color: function(p) &#123;</span><br><span class=\"line\">                  return  indexes.indexOf(p.dataIndex) &gt;= 0 ? &quot;red&quot; : &quot;purple&quot;;</span><br><span class=\"line\">                &#125;&#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>预览效果如下：</p>\n<p><img src=\"https://i.loli.net/2019/06/29/5d1721c76600393971.png\" alt=\"最终图表\"></p>\n<p>有点 low ，不过大体完成效果~~</p>"},{"title":"事件委托","date":"2019-03-16T16:00:00.000Z","updated":"2019-03-16T16:00:00.000Z","_content":"\n现页面有`<li>`若干个，倘若需要监听每个`<li>`，传统的方法是遍历标签，并给它们添加同样多的点击事件，但如果页面中有多个标签，给每个标签都添加点击事件，会造成内存占用过多。今天利用事件捕获冒泡机制，写一个事件委托，解决这个问题。\n\n<!-- more -->\n\n# 事件委托\n\n```html\n<ul>\n  <li>01</li>\n  <li>02</li>\n  <li><span>03</span></li>\n  <li>04</li>\n  <li>05</li>\n  <li>06</li>\n</ul>\n```\n\n```javascript\nlet oUl = document.querySelector('ul')\noUl.addEventListener('click', function(e) {\n    let ele =  e.target\n    while (!ele.matches('li')){\n        if(ele.matches('ul')){\n            ele = null\n            break\n        }\n        ele = ele.parentNode  // 一直往上寻找父元素，直到ul退出循环、\n    }\n\n    ele && ele.style.color = 'red'\n})\n```\n\n# 事件冒泡\n\n简单的说，事件分为捕获和冒泡阶段。当`addEventListener`设置为 true 时，监听捕获时的事件，当设置为 false 时，监听冒泡时的阶段，默认是使用冒泡。如果在目标上捕获和冒泡都有监听，则按照书写顺序依次执行。\n\n举个例子：\n\n```html\n<div id=\"a\">\n  <div id=\"b\">\n    <div id=\"c\"></div>\n  </div>\n</div>\n```\n\n`````javascript\n// 当点击c时, 输出结果：c b a\na.addEventListener('click', function () {\n  console.log('a')\n})\nb.addEventListener('click', function () {\n  console.log('b')\n})\nc.addEventListener('click', function () {\n  console.log('c')\n})```\n\n````javascript\n// 当点击c时,先捕获，再冒泡，因此输出结果：b c a\na.addEventListener('click',function(){\n  console.log('a')\n})\nb.addEventListener('click',function(){\n  console.log('b')\n},true)\nc.addEventListener('click',function(){\n  console.log('c')\n})\n```\n`````\n","source":"_posts/事件委托.md","raw":"---\ntitle: 事件委托\ndate: 2019-03-17 00:00:00\nupdated: 2019-03-17 00:00:00\ntags:\n  - 事件委托\n  - 冒泡\n---\n\n现页面有`<li>`若干个，倘若需要监听每个`<li>`，传统的方法是遍历标签，并给它们添加同样多的点击事件，但如果页面中有多个标签，给每个标签都添加点击事件，会造成内存占用过多。今天利用事件捕获冒泡机制，写一个事件委托，解决这个问题。\n\n<!-- more -->\n\n# 事件委托\n\n```html\n<ul>\n  <li>01</li>\n  <li>02</li>\n  <li><span>03</span></li>\n  <li>04</li>\n  <li>05</li>\n  <li>06</li>\n</ul>\n```\n\n```javascript\nlet oUl = document.querySelector('ul')\noUl.addEventListener('click', function(e) {\n    let ele =  e.target\n    while (!ele.matches('li')){\n        if(ele.matches('ul')){\n            ele = null\n            break\n        }\n        ele = ele.parentNode  // 一直往上寻找父元素，直到ul退出循环、\n    }\n\n    ele && ele.style.color = 'red'\n})\n```\n\n# 事件冒泡\n\n简单的说，事件分为捕获和冒泡阶段。当`addEventListener`设置为 true 时，监听捕获时的事件，当设置为 false 时，监听冒泡时的阶段，默认是使用冒泡。如果在目标上捕获和冒泡都有监听，则按照书写顺序依次执行。\n\n举个例子：\n\n```html\n<div id=\"a\">\n  <div id=\"b\">\n    <div id=\"c\"></div>\n  </div>\n</div>\n```\n\n`````javascript\n// 当点击c时, 输出结果：c b a\na.addEventListener('click', function () {\n  console.log('a')\n})\nb.addEventListener('click', function () {\n  console.log('b')\n})\nc.addEventListener('click', function () {\n  console.log('c')\n})```\n\n````javascript\n// 当点击c时,先捕获，再冒泡，因此输出结果：b c a\na.addEventListener('click',function(){\n  console.log('a')\n})\nb.addEventListener('click',function(){\n  console.log('b')\n},true)\nc.addEventListener('click',function(){\n  console.log('c')\n})\n```\n`````\n","slug":"事件委托","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxg001nk4u91ycl03vn","content":"<p>现页面有<code>&lt;li&gt;</code>若干个，倘若需要监听每个<code>&lt;li&gt;</code>，传统的方法是遍历标签，并给它们添加同样多的点击事件，但如果页面中有多个标签，给每个标签都添加点击事件，会造成内存占用过多。今天利用事件捕获冒泡机制，写一个事件委托，解决这个问题。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>01<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>02<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>03<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>04<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>05<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>06<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> oUl = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\">oUl.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ele =  e.target</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!ele.matches(<span class=\"string\">&#x27;li&#x27;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ele.matches(<span class=\"string\">&#x27;ul&#x27;</span>))&#123;</span><br><span class=\"line\">            ele = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ele = ele.parentNode  <span class=\"comment\">// 一直往上寻找父元素，直到ul退出循环、</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ele &amp;&amp; ele.style.color = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h1><p>简单的说，事件分为捕获和冒泡阶段。当<code>addEventListener</code>设置为 true 时，监听捕获时的事件，当设置为 false 时，监听冒泡时的阶段，默认是使用冒泡。如果在目标上捕获和冒泡都有监听，则按照书写顺序依次执行。</p>\n<p>举个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当点击c时, 输出结果：c b a</span></span><br><span class=\"line\">a.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">b.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">c.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\">&#125;)<span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"string\">`javascript</span></span><br><span class=\"line\"><span class=\"string\">// 当点击c时,先捕获，再冒泡，因此输出结果：b c a</span></span><br><span class=\"line\"><span class=\"string\">a.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.log(&#x27;a&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\">b.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.log(&#x27;b&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;,true)</span></span><br><span class=\"line\"><span class=\"string\">c.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.log(&#x27;c&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>现页面有<code>&lt;li&gt;</code>若干个，倘若需要监听每个<code>&lt;li&gt;</code>，传统的方法是遍历标签，并给它们添加同样多的点击事件，但如果页面中有多个标签，给每个标签都添加点击事件，会造成内存占用过多。今天利用事件捕获冒泡机制，写一个事件委托，解决这个问题。</p>","more":"<h1 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>01<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>02<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>03<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>04<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>05<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>06<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> oUl = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\">oUl.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ele =  e.target</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!ele.matches(<span class=\"string\">&#x27;li&#x27;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ele.matches(<span class=\"string\">&#x27;ul&#x27;</span>))&#123;</span><br><span class=\"line\">            ele = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ele = ele.parentNode  <span class=\"comment\">// 一直往上寻找父元素，直到ul退出循环、</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ele &amp;&amp; ele.style.color = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h1><p>简单的说，事件分为捕获和冒泡阶段。当<code>addEventListener</code>设置为 true 时，监听捕获时的事件，当设置为 false 时，监听冒泡时的阶段，默认是使用冒泡。如果在目标上捕获和冒泡都有监听，则按照书写顺序依次执行。</p>\n<p>举个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当点击c时, 输出结果：c b a</span></span><br><span class=\"line\">a.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">b.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">c.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\">&#125;)<span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"string\">`javascript</span></span><br><span class=\"line\"><span class=\"string\">// 当点击c时,先捕获，再冒泡，因此输出结果：b c a</span></span><br><span class=\"line\"><span class=\"string\">a.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.log(&#x27;a&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\">b.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.log(&#x27;b&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;,true)</span></span><br><span class=\"line\"><span class=\"string\">c.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.log(&#x27;c&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span></span><br></pre></td></tr></table></figure>"},{"title":"二分查找如何定位左边界和右边界","date":"2021-06-09T16:00:00.000Z","updated":"2021-06-09T16:00:00.000Z","_content":"\n不使用 JS 数组 API，查找`有序`数列最先出现的位置和最后出现的位置\n\n<!-- more -->\n\n```javascript\nfunction binarySearch(arr, target) {\n  let left1 = 0\n  let right = arr.length\n  while (left1 < right) {\n    let mid = Math.floor((right + left1) / 2)\n    if (arr[mid] < target) left1 = mid + 1\n    else right = mid\n  }\n\n  if (arr[left1] !== target) {\n    return { start: -1, end: -1 }\n  }\n\n  let left2 = left1\n  right = arr.length\n\n  while (left1 < right) {\n    let mid = Math.floor((right + left1) / 2)\n    if (arr[mid] === target) left1 = mid + 1\n    else right = mid\n  }\n\n  return { start: left2, end: left1 - 1 }\n}\n// 测试\nconst a = [1, 3, 5, 5, 5, 5, 5, 5, 5, 7, 7, 9]\nbinarySearch(a, 5) // {start: 2, end: 8}\nbinarySearch(a, 7) // {start: 9, end: 10}\nbinarySearch(a, 47) // {start:-1, end: -1}\n```\n\n> 引用\n\n- [第 150 题：二分查找如何定位左边界和右边界 ](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/320)\n","source":"_posts/二分查找如何定位左边界和右边界.md","raw":"---\ntitle: 二分查找如何定位左边界和右边界\ndate: 2021-06-10 00:00:00\nupdated: 2021-06-10 00:00:00\ntags:\n  - 二分法\n---\n\n不使用 JS 数组 API，查找`有序`数列最先出现的位置和最后出现的位置\n\n<!-- more -->\n\n```javascript\nfunction binarySearch(arr, target) {\n  let left1 = 0\n  let right = arr.length\n  while (left1 < right) {\n    let mid = Math.floor((right + left1) / 2)\n    if (arr[mid] < target) left1 = mid + 1\n    else right = mid\n  }\n\n  if (arr[left1] !== target) {\n    return { start: -1, end: -1 }\n  }\n\n  let left2 = left1\n  right = arr.length\n\n  while (left1 < right) {\n    let mid = Math.floor((right + left1) / 2)\n    if (arr[mid] === target) left1 = mid + 1\n    else right = mid\n  }\n\n  return { start: left2, end: left1 - 1 }\n}\n// 测试\nconst a = [1, 3, 5, 5, 5, 5, 5, 5, 5, 7, 7, 9]\nbinarySearch(a, 5) // {start: 2, end: 8}\nbinarySearch(a, 7) // {start: 9, end: 10}\nbinarySearch(a, 47) // {start:-1, end: -1}\n```\n\n> 引用\n\n- [第 150 题：二分查找如何定位左边界和右边界 ](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/320)\n","slug":"二分查找如何定位左边界和右边界","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxg001ok4u9269ob607","content":"<p>不使用 JS 数组 API，查找<code>有序</code>数列最先出现的位置和最后出现的位置</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">arr, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left1 = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = arr.length</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left1 &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((right + left1) / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] &lt; target) left1 = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> right = mid</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr[left1] !== target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">start</span>: -<span class=\"number\">1</span>, <span class=\"attr\">end</span>: -<span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left2 = left1</span><br><span class=\"line\">  right = arr.length</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left1 &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((right + left1) / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] === target) left1 = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> right = mid</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">start</span>: left2, <span class=\"attr\">end</span>: left1 - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">binarySearch(a, <span class=\"number\">5</span>) <span class=\"comment\">// &#123;start: 2, end: 8&#125;</span></span><br><span class=\"line\">binarySearch(a, <span class=\"number\">7</span>) <span class=\"comment\">// &#123;start: 9, end: 10&#125;</span></span><br><span class=\"line\">binarySearch(a, <span class=\"number\">47</span>) <span class=\"comment\">// &#123;start:-1, end: -1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/320\">第 150 题：二分查找如何定位左边界和右边界 </a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>不使用 JS 数组 API，查找<code>有序</code>数列最先出现的位置和最后出现的位置</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">arr, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left1 = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = arr.length</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left1 &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((right + left1) / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] &lt; target) left1 = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> right = mid</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr[left1] !== target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">start</span>: -<span class=\"number\">1</span>, <span class=\"attr\">end</span>: -<span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left2 = left1</span><br><span class=\"line\">  right = arr.length</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left1 &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((right + left1) / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] === target) left1 = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> right = mid</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">start</span>: left2, <span class=\"attr\">end</span>: left1 - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">binarySearch(a, <span class=\"number\">5</span>) <span class=\"comment\">// &#123;start: 2, end: 8&#125;</span></span><br><span class=\"line\">binarySearch(a, <span class=\"number\">7</span>) <span class=\"comment\">// &#123;start: 9, end: 10&#125;</span></span><br><span class=\"line\">binarySearch(a, <span class=\"number\">47</span>) <span class=\"comment\">// &#123;start:-1, end: -1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/320\">第 150 题：二分查找如何定位左边界和右边界 </a></li>\n</ul>"},{"title":"什么是AJAX","date":"2018-12-18T16:00:00.000Z","updated":"2018-12-18T16:00:00.000Z","_content":"\n# 什么是 AJAX\n\n1999 年，微软公司发布 IE 浏览器 5.0 版，第一次引入新功能：允许 JavaScript 脚本向服务器发起 HTTP 请求。这个功能当时并没有引起注意，直到 2004 年 Gmail 发布和 2005 年 Google Map 发布，才引起广泛重视。2005 年 2 月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。后来，AJAX 这个词就成为 JavaScript 脚本发起 HTTP 通信的代名词，也就是说，只要用脚本发起通信，就可以叫做 AJAX 通信。W3C 也在 2006 年发布了它的国际标准。\n\n<!-- more -->\n\n具体来说，AJAX 包括以下几个步骤。\n\n1. 创建 XMLHttpRequest 实例\n2. 发出 HTTP 请求\n3. 接收服务器传回的数据\n4. 更新网页数据\n\n概括起来，就是一句话，**AJAX 通过原生的 XMLHttpRequest 对象发出 HTTP 请求，得到服务器返回的数据后，再进行处理**。现在，服务器返回的都是 JSON 格式的数据，XML 格式已经过时了，但是 AJAX 这个名字已经成了一个通用名词，字面含义已经消失了。\n\n```javascript\nfunction ajax(option) {\n  return new Promise(function (resolve, reject) {\n    let url = option.url\n    let method = option.method\n    let body = option.body\n    let success = option.success\n    let fail = option.success\n\n    var httpRquest = new XMLHttpRequest()\n    httpRquest.open(method, url)\n    httpRquest.onreadystatechange = function () {\n      if (httpRquest.readyState === 4 && httpRquest.status === 200) {\n        resolve.call(undefined, httpRquest.responseText)\n      } else if (httpRquest.readyState === 4 && httpRquest.status === 404) {\n        reject.call(undefined, httpRquest.response)\n      }\n    }\n    httpRquest.send(body)\n  })\n}\n```\n\n# 同源策略\n\n只有 **协议+端口+域名** 一模一样才允许发 AJAX 请求\n\n一模一样一模一样一模一样一模一样一模一样一模一样一模一样一模一样\n\n    - http://baidu.com 可以向 http://www.baidu.com 发 AJAX 请求吗 no\n    - http://baidu.com:80 可以向 http://baidu.com:81 发 AJAX 请求吗 no\n\n浏览器必须保证\n\n只有 协议+端口+域名 一模一样才允许发 AJAX 请求\n\n# 跨域\n\n## CORS\n\nCORS ( Cross-Origin Resource Sharing ) 可以告诉浏览器，我俩一家的，别阻止他。\n\n具体来说，就是在后台设置的头信息之中，增加一个`Access-Control-Allow-Origin`\n\n```javascript\nvar http = require('http')\nvar fs = require('fs')\nvar url = require('url')\nvar port = process.argv[2]\n\nif (!port) {\n  console.log('请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？')\n  process.exit(1)\n}\n\nvar server = http.createServer(function (request, response) {\n  var parsedUrl = url.parse(request.url, true)\n  var path = request.url\n  var query = ''\n  if (path.indexOf('?') >= 0) {\n    query = path.substring(path.indexOf('?'))\n  }\n  var pathNoQuery = parsedUrl.pathname\n  var queryObject = parsedUrl.query\n  var method = request.method\n\n  /******** 从这里开始看，上面不要看 ************/\n\n  if (path === '/') {\n    var string = fs.readFileSync('./index.html', 'utf8')\n    var m = fs.readFileSync('./db', 'utf8') //100\n    string = string.replace('$$n$$', m)\n    response.setHeader('Content-Type', 'text/html', 'charset=utf-8')\n    response.write(string)\n    response.end()\n  } else if (pathNoQuery === '/count' && method.toUpperCase() === 'GET') {\n    response.statusCode = 200\n    var m = fs.readFileSync('./db', 'utf8')\n    m = parseInt(m, 10)\n    var n = m + 1\n    fs.writeFileSync('./db', n)\n    response.setHeader('Content-Type', 'text/json', 'charset=utf-8')\n    response.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:8008') //最重要的是这一句\n    response.write(`\n        {\n          \"count\":\"${n}\"\n        }\n    `)\n    response.end()\n  } else {\n    response.statusCode = 404\n    response.write('网页走丢了')\n    response.end()\n  }\n\n  /******** 代码结束，下面不要看 ************/\n})\n\nserver.listen(port)\nconsole.log('127.0.0.1:' + port)\n```\n\n## JSONP\n\nJSONP 只能 get，不够安全。[什么是 JSONP >>](https://jiangnana.fun/2018/12/18/%E4%BB%80%E4%B9%88%E6%98%AFJSONP/)\n\n> 引用\n\n- https://wangdoc.com/javascript/bom/xmlhttprequest.html\n","source":"_posts/什么是AJAX.md","raw":"---\ntitle: 什么是AJAX\ndate: 2018-12-19 00:00:00\nupdated: 2018-12-19 00:00:00\ntags:\n  - AJAX\n---\n\n# 什么是 AJAX\n\n1999 年，微软公司发布 IE 浏览器 5.0 版，第一次引入新功能：允许 JavaScript 脚本向服务器发起 HTTP 请求。这个功能当时并没有引起注意，直到 2004 年 Gmail 发布和 2005 年 Google Map 发布，才引起广泛重视。2005 年 2 月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。后来，AJAX 这个词就成为 JavaScript 脚本发起 HTTP 通信的代名词，也就是说，只要用脚本发起通信，就可以叫做 AJAX 通信。W3C 也在 2006 年发布了它的国际标准。\n\n<!-- more -->\n\n具体来说，AJAX 包括以下几个步骤。\n\n1. 创建 XMLHttpRequest 实例\n2. 发出 HTTP 请求\n3. 接收服务器传回的数据\n4. 更新网页数据\n\n概括起来，就是一句话，**AJAX 通过原生的 XMLHttpRequest 对象发出 HTTP 请求，得到服务器返回的数据后，再进行处理**。现在，服务器返回的都是 JSON 格式的数据，XML 格式已经过时了，但是 AJAX 这个名字已经成了一个通用名词，字面含义已经消失了。\n\n```javascript\nfunction ajax(option) {\n  return new Promise(function (resolve, reject) {\n    let url = option.url\n    let method = option.method\n    let body = option.body\n    let success = option.success\n    let fail = option.success\n\n    var httpRquest = new XMLHttpRequest()\n    httpRquest.open(method, url)\n    httpRquest.onreadystatechange = function () {\n      if (httpRquest.readyState === 4 && httpRquest.status === 200) {\n        resolve.call(undefined, httpRquest.responseText)\n      } else if (httpRquest.readyState === 4 && httpRquest.status === 404) {\n        reject.call(undefined, httpRquest.response)\n      }\n    }\n    httpRquest.send(body)\n  })\n}\n```\n\n# 同源策略\n\n只有 **协议+端口+域名** 一模一样才允许发 AJAX 请求\n\n一模一样一模一样一模一样一模一样一模一样一模一样一模一样一模一样\n\n    - http://baidu.com 可以向 http://www.baidu.com 发 AJAX 请求吗 no\n    - http://baidu.com:80 可以向 http://baidu.com:81 发 AJAX 请求吗 no\n\n浏览器必须保证\n\n只有 协议+端口+域名 一模一样才允许发 AJAX 请求\n\n# 跨域\n\n## CORS\n\nCORS ( Cross-Origin Resource Sharing ) 可以告诉浏览器，我俩一家的，别阻止他。\n\n具体来说，就是在后台设置的头信息之中，增加一个`Access-Control-Allow-Origin`\n\n```javascript\nvar http = require('http')\nvar fs = require('fs')\nvar url = require('url')\nvar port = process.argv[2]\n\nif (!port) {\n  console.log('请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？')\n  process.exit(1)\n}\n\nvar server = http.createServer(function (request, response) {\n  var parsedUrl = url.parse(request.url, true)\n  var path = request.url\n  var query = ''\n  if (path.indexOf('?') >= 0) {\n    query = path.substring(path.indexOf('?'))\n  }\n  var pathNoQuery = parsedUrl.pathname\n  var queryObject = parsedUrl.query\n  var method = request.method\n\n  /******** 从这里开始看，上面不要看 ************/\n\n  if (path === '/') {\n    var string = fs.readFileSync('./index.html', 'utf8')\n    var m = fs.readFileSync('./db', 'utf8') //100\n    string = string.replace('$$n$$', m)\n    response.setHeader('Content-Type', 'text/html', 'charset=utf-8')\n    response.write(string)\n    response.end()\n  } else if (pathNoQuery === '/count' && method.toUpperCase() === 'GET') {\n    response.statusCode = 200\n    var m = fs.readFileSync('./db', 'utf8')\n    m = parseInt(m, 10)\n    var n = m + 1\n    fs.writeFileSync('./db', n)\n    response.setHeader('Content-Type', 'text/json', 'charset=utf-8')\n    response.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:8008') //最重要的是这一句\n    response.write(`\n        {\n          \"count\":\"${n}\"\n        }\n    `)\n    response.end()\n  } else {\n    response.statusCode = 404\n    response.write('网页走丢了')\n    response.end()\n  }\n\n  /******** 代码结束，下面不要看 ************/\n})\n\nserver.listen(port)\nconsole.log('127.0.0.1:' + port)\n```\n\n## JSONP\n\nJSONP 只能 get，不够安全。[什么是 JSONP >>](https://jiangnana.fun/2018/12/18/%E4%BB%80%E4%B9%88%E6%98%AFJSONP/)\n\n> 引用\n\n- https://wangdoc.com/javascript/bom/xmlhttprequest.html\n","slug":"什么是AJAX","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxk001qk4u9efgi4tf0","content":"<h1 id=\"什么是-AJAX\"><a href=\"#什么是-AJAX\" class=\"headerlink\" title=\"什么是 AJAX\"></a>什么是 AJAX</h1><p>1999 年，微软公司发布 IE 浏览器 5.0 版，第一次引入新功能：允许 JavaScript 脚本向服务器发起 HTTP 请求。这个功能当时并没有引起注意，直到 2004 年 Gmail 发布和 2005 年 Google Map 发布，才引起广泛重视。2005 年 2 月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。后来，AJAX 这个词就成为 JavaScript 脚本发起 HTTP 通信的代名词，也就是说，只要用脚本发起通信，就可以叫做 AJAX 通信。W3C 也在 2006 年发布了它的国际标准。</p>\n<span id=\"more\"></span>\n\n<p>具体来说，AJAX 包括以下几个步骤。</p>\n<ol>\n<li>创建 XMLHttpRequest 实例</li>\n<li>发出 HTTP 请求</li>\n<li>接收服务器传回的数据</li>\n<li>更新网页数据</li>\n</ol>\n<p>概括起来，就是一句话，<strong>AJAX 通过原生的 XMLHttpRequest 对象发出 HTTP 请求，得到服务器返回的数据后，再进行处理</strong>。现在，服务器返回的都是 JSON 格式的数据，XML 格式已经过时了，但是 AJAX 这个名字已经成了一个通用名词，字面含义已经消失了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">option</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = option.url</span><br><span class=\"line\">    <span class=\"keyword\">let</span> method = option.method</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = option.body</span><br><span class=\"line\">    <span class=\"keyword\">let</span> success = option.success</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fail = option.success</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> httpRquest = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">    httpRquest.open(method, url)</span><br><span class=\"line\">    httpRquest.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (httpRquest.readyState === <span class=\"number\">4</span> &amp;&amp; httpRquest.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve.call(<span class=\"literal\">undefined</span>, httpRquest.responseText)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (httpRquest.readyState === <span class=\"number\">4</span> &amp;&amp; httpRquest.status === <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        reject.call(<span class=\"literal\">undefined</span>, httpRquest.response)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    httpRquest.send(body)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h1><p>只有 <strong>协议+端口+域名</strong> 一模一样才允许发 AJAX 请求</p>\n<p>一模一样一模一样一模一样一模一样一模一样一模一样一模一样一模一样</p>\n<pre><code>- http://baidu.com 可以向 http://www.baidu.com 发 AJAX 请求吗 no\n- http://baidu.com:80 可以向 http://baidu.com:81 发 AJAX 请求吗 no\n</code></pre>\n<p>浏览器必须保证</p>\n<p>只有 协议+端口+域名 一模一样才允许发 AJAX 请求</p>\n<h1 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h1><h2 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h2><p>CORS ( Cross-Origin Resource Sharing ) 可以告诉浏览器，我俩一家的，别阻止他。</p>\n<p>具体来说，就是在后台设置的头信息之中，增加一个<code>Access-Control-Allow-Origin</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> port = process.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!port) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？&#x27;</span>)</span><br><span class=\"line\">  process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parsedUrl = url.parse(request.url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> path = request.url</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (path.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    query = path.substring(path.indexOf(<span class=\"string\">&#x27;?&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pathNoQuery = parsedUrl.pathname</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryObject = parsedUrl.query</span><br><span class=\"line\">  <span class=\"keyword\">var</span> method = request.method</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/******** 从这里开始看，上面不要看 ************/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (path === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> string = fs.readFileSync(<span class=\"string\">&#x27;./index.html&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = fs.readFileSync(<span class=\"string\">&#x27;./db&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>) <span class=\"comment\">//100</span></span><br><span class=\"line\">    string = string.replace(<span class=\"string\">&#x27;$$n$$&#x27;</span>, m)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/html&#x27;</span>, <span class=\"string\">&#x27;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathNoQuery === <span class=\"string\">&#x27;/count&#x27;</span> &amp;&amp; method.toUpperCase() === <span class=\"string\">&#x27;GET&#x27;</span>) &#123;</span><br><span class=\"line\">    response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = fs.readFileSync(<span class=\"string\">&#x27;./db&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\">    m = <span class=\"built_in\">parseInt</span>(m, <span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = m + <span class=\"number\">1</span></span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">&#x27;./db&#x27;</span>, n)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/json&#x27;</span>, <span class=\"string\">&#x27;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;http://127.0.0.1:8008&#x27;</span>) <span class=\"comment\">//最重要的是这一句</span></span><br><span class=\"line\">    response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;count&quot;:&quot;<span class=\"subst\">$&#123;n&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.statusCode = <span class=\"number\">404</span></span><br><span class=\"line\">    response.write(<span class=\"string\">&#x27;网页走丢了&#x27;</span>)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/******** 代码结束，下面不要看 ************/</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;127.0.0.1:&#x27;</span> + port)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP 只能 get，不够安全。<a href=\"https://jiangnana.fun/2018/12/18/%E4%BB%80%E4%B9%88%E6%98%AFJSONP/\">什么是 JSONP &gt;&gt;</a></p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wangdoc.com/javascript/bom/xmlhttprequest.html\">https://wangdoc.com/javascript/bom/xmlhttprequest.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是-AJAX\"><a href=\"#什么是-AJAX\" class=\"headerlink\" title=\"什么是 AJAX\"></a>什么是 AJAX</h1><p>1999 年，微软公司发布 IE 浏览器 5.0 版，第一次引入新功能：允许 JavaScript 脚本向服务器发起 HTTP 请求。这个功能当时并没有引起注意，直到 2004 年 Gmail 发布和 2005 年 Google Map 发布，才引起广泛重视。2005 年 2 月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。后来，AJAX 这个词就成为 JavaScript 脚本发起 HTTP 通信的代名词，也就是说，只要用脚本发起通信，就可以叫做 AJAX 通信。W3C 也在 2006 年发布了它的国际标准。</p>","more":"<p>具体来说，AJAX 包括以下几个步骤。</p>\n<ol>\n<li>创建 XMLHttpRequest 实例</li>\n<li>发出 HTTP 请求</li>\n<li>接收服务器传回的数据</li>\n<li>更新网页数据</li>\n</ol>\n<p>概括起来，就是一句话，<strong>AJAX 通过原生的 XMLHttpRequest 对象发出 HTTP 请求，得到服务器返回的数据后，再进行处理</strong>。现在，服务器返回的都是 JSON 格式的数据，XML 格式已经过时了，但是 AJAX 这个名字已经成了一个通用名词，字面含义已经消失了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">option</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = option.url</span><br><span class=\"line\">    <span class=\"keyword\">let</span> method = option.method</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = option.body</span><br><span class=\"line\">    <span class=\"keyword\">let</span> success = option.success</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fail = option.success</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> httpRquest = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">    httpRquest.open(method, url)</span><br><span class=\"line\">    httpRquest.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (httpRquest.readyState === <span class=\"number\">4</span> &amp;&amp; httpRquest.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve.call(<span class=\"literal\">undefined</span>, httpRquest.responseText)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (httpRquest.readyState === <span class=\"number\">4</span> &amp;&amp; httpRquest.status === <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        reject.call(<span class=\"literal\">undefined</span>, httpRquest.response)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    httpRquest.send(body)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h1><p>只有 <strong>协议+端口+域名</strong> 一模一样才允许发 AJAX 请求</p>\n<p>一模一样一模一样一模一样一模一样一模一样一模一样一模一样一模一样</p>\n<pre><code>- http://baidu.com 可以向 http://www.baidu.com 发 AJAX 请求吗 no\n- http://baidu.com:80 可以向 http://baidu.com:81 发 AJAX 请求吗 no\n</code></pre>\n<p>浏览器必须保证</p>\n<p>只有 协议+端口+域名 一模一样才允许发 AJAX 请求</p>\n<h1 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h1><h2 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h2><p>CORS ( Cross-Origin Resource Sharing ) 可以告诉浏览器，我俩一家的，别阻止他。</p>\n<p>具体来说，就是在后台设置的头信息之中，增加一个<code>Access-Control-Allow-Origin</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> port = process.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!port) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？&#x27;</span>)</span><br><span class=\"line\">  process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parsedUrl = url.parse(request.url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> path = request.url</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (path.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    query = path.substring(path.indexOf(<span class=\"string\">&#x27;?&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pathNoQuery = parsedUrl.pathname</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryObject = parsedUrl.query</span><br><span class=\"line\">  <span class=\"keyword\">var</span> method = request.method</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/******** 从这里开始看，上面不要看 ************/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (path === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> string = fs.readFileSync(<span class=\"string\">&#x27;./index.html&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = fs.readFileSync(<span class=\"string\">&#x27;./db&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>) <span class=\"comment\">//100</span></span><br><span class=\"line\">    string = string.replace(<span class=\"string\">&#x27;$$n$$&#x27;</span>, m)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/html&#x27;</span>, <span class=\"string\">&#x27;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathNoQuery === <span class=\"string\">&#x27;/count&#x27;</span> &amp;&amp; method.toUpperCase() === <span class=\"string\">&#x27;GET&#x27;</span>) &#123;</span><br><span class=\"line\">    response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = fs.readFileSync(<span class=\"string\">&#x27;./db&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\">    m = <span class=\"built_in\">parseInt</span>(m, <span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = m + <span class=\"number\">1</span></span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">&#x27;./db&#x27;</span>, n)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/json&#x27;</span>, <span class=\"string\">&#x27;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;http://127.0.0.1:8008&#x27;</span>) <span class=\"comment\">//最重要的是这一句</span></span><br><span class=\"line\">    response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;count&quot;:&quot;<span class=\"subst\">$&#123;n&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.statusCode = <span class=\"number\">404</span></span><br><span class=\"line\">    response.write(<span class=\"string\">&#x27;网页走丢了&#x27;</span>)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/******** 代码结束，下面不要看 ************/</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;127.0.0.1:&#x27;</span> + port)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP 只能 get，不够安全。<a href=\"https://jiangnana.fun/2018/12/18/%E4%BB%80%E4%B9%88%E6%98%AFJSONP/\">什么是 JSONP &gt;&gt;</a></p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wangdoc.com/javascript/bom/xmlhttprequest.html\">https://wangdoc.com/javascript/bom/xmlhttprequest.html</a></li>\n</ul>"},{"title":"什么是MVC","date":"2018-12-25T16:00:00.000Z","updated":"2018-12-25T16:00:00.000Z","_content":"\n### 什么是 MVC\n\n1. 最上面的一层，是直接面向最终用户的\"视图层\"（View）。它是提供给用户的操作界面，是程序的外壳。\n2. 最底下的一层，是核心的\"数据层\"（Model），也就是程序需要操作的数据或信息。\n3. 中间的一层，就是\"控制层\"（Controller），它负责根据用户从\"视图层\"输入的指令，选取\"数据层\"中的数据，然后对其进行相应的操作，产生最终结果。\n\n<!-- more -->\n\nModel 和服务器交互，Model 将得到的数据交给 Controller，Controller 把数据填入 View，并监听 View\n用户操作 View，如点击按钮，Controller 就会接受到点击事件，Controller 这时会去调用 Model，Model 会与服务器交互，得到数据后返回给 Controller，Controller 得到数据就去更新 View\n\n### MVC 例子\n\n```javascript\n!function () {\n  let model = Model({\n    resouceName: 'Message'\n  })\n  let view = View('.message')[0]\n  let controller = {\n    view: null,\n    leaveMessage: null,\n    messageList: null,\n    model: null,\n    init: function (view, model) {\n      this.view = view\n      this.model = model\n      this.leaveMessage = view.querySelector('#leaveMessage')\n      this.messageList = view.querySelector('ul')\n      this.model.init()\n      this.messageInit()\n      this.bindEvents()\n    },\n    messageInit: function () {\n      this.model.fetch().then(message => {\n        let array = message.map(value => value.attributes)\n\n        array.forEach((value, key) => {\n          let oLi = document.createElement('li')\n          let ospanname = document.createElement('span')\n          let ospanmessage = document.createElement('span')\n          ospanname.innerText = value.name + ': '\n          ospanmessage.innerText = value.message\n\n          oLi.appendChild(ospanname)\n          oLi.appendChild(ospanmessage)\n\n          this.messageList.appendChild(oLi)\n        })\n      })\n    },\n    bindEvents: function () {\n      this.leaveMessage.addEventListener('submit', e => {\n        e.preventDefault()\n        this.savemessage()\n      })\n    },\n    savemessage: function () {\n      leaveMessage = this.leaveMessage\n      let postName = leaveMessage.querySelector('input[name=name]').value\n      let postMessages = leaveMessage.querySelector('input[name=messages]').value\n\n      this.model\n        .save({\n          name: postName,\n          message: postMessages\n        })\n        .then(function (object) {\n          alert('提交成功')\n          let ul = view.querySelector('ul')\n          let oLi = document.createElement('li')\n          let ospanname = document.createElement('span')\n          let ospanmessage = document.createElement('span')\n          ospanname.innerText = object.attributes.name + ': '\n          ospanmessage.innerText = object.attributes.message\n\n          oLi.appendChild(ospanname)\n          oLi.appendChild(ospanmessage)\n\n          ul.appendChild(oLi)\n        })\n    }\n  }\n\n  controller.init.call(controller, view, model)\n}.call()\n```\n","source":"_posts/什么是MVC.md","raw":"---\ntitle: 什么是MVC\ndate: 2018-12-26 00:00:00\nupdated: 2018-12-26 00:00:00\ntags:\n  - MVC\n---\n\n### 什么是 MVC\n\n1. 最上面的一层，是直接面向最终用户的\"视图层\"（View）。它是提供给用户的操作界面，是程序的外壳。\n2. 最底下的一层，是核心的\"数据层\"（Model），也就是程序需要操作的数据或信息。\n3. 中间的一层，就是\"控制层\"（Controller），它负责根据用户从\"视图层\"输入的指令，选取\"数据层\"中的数据，然后对其进行相应的操作，产生最终结果。\n\n<!-- more -->\n\nModel 和服务器交互，Model 将得到的数据交给 Controller，Controller 把数据填入 View，并监听 View\n用户操作 View，如点击按钮，Controller 就会接受到点击事件，Controller 这时会去调用 Model，Model 会与服务器交互，得到数据后返回给 Controller，Controller 得到数据就去更新 View\n\n### MVC 例子\n\n```javascript\n!function () {\n  let model = Model({\n    resouceName: 'Message'\n  })\n  let view = View('.message')[0]\n  let controller = {\n    view: null,\n    leaveMessage: null,\n    messageList: null,\n    model: null,\n    init: function (view, model) {\n      this.view = view\n      this.model = model\n      this.leaveMessage = view.querySelector('#leaveMessage')\n      this.messageList = view.querySelector('ul')\n      this.model.init()\n      this.messageInit()\n      this.bindEvents()\n    },\n    messageInit: function () {\n      this.model.fetch().then(message => {\n        let array = message.map(value => value.attributes)\n\n        array.forEach((value, key) => {\n          let oLi = document.createElement('li')\n          let ospanname = document.createElement('span')\n          let ospanmessage = document.createElement('span')\n          ospanname.innerText = value.name + ': '\n          ospanmessage.innerText = value.message\n\n          oLi.appendChild(ospanname)\n          oLi.appendChild(ospanmessage)\n\n          this.messageList.appendChild(oLi)\n        })\n      })\n    },\n    bindEvents: function () {\n      this.leaveMessage.addEventListener('submit', e => {\n        e.preventDefault()\n        this.savemessage()\n      })\n    },\n    savemessage: function () {\n      leaveMessage = this.leaveMessage\n      let postName = leaveMessage.querySelector('input[name=name]').value\n      let postMessages = leaveMessage.querySelector('input[name=messages]').value\n\n      this.model\n        .save({\n          name: postName,\n          message: postMessages\n        })\n        .then(function (object) {\n          alert('提交成功')\n          let ul = view.querySelector('ul')\n          let oLi = document.createElement('li')\n          let ospanname = document.createElement('span')\n          let ospanmessage = document.createElement('span')\n          ospanname.innerText = object.attributes.name + ': '\n          ospanmessage.innerText = object.attributes.message\n\n          oLi.appendChild(ospanname)\n          oLi.appendChild(ospanmessage)\n\n          ul.appendChild(oLi)\n        })\n    }\n  }\n\n  controller.init.call(controller, view, model)\n}.call()\n```\n","slug":"什么是MVC","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxl001rk4u90rklgdfj","content":"<h3 id=\"什么是-MVC\"><a href=\"#什么是-MVC\" class=\"headerlink\" title=\"什么是 MVC\"></a>什么是 MVC</h3><ol>\n<li>最上面的一层，是直接面向最终用户的”视图层”（View）。它是提供给用户的操作界面，是程序的外壳。</li>\n<li>最底下的一层，是核心的”数据层”（Model），也就是程序需要操作的数据或信息。</li>\n<li>中间的一层，就是”控制层”（Controller），它负责根据用户从”视图层”输入的指令，选取”数据层”中的数据，然后对其进行相应的操作，产生最终结果。</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>Model 和服务器交互，Model 将得到的数据交给 Controller，Controller 把数据填入 View，并监听 View<br>用户操作 View，如点击按钮，Controller 就会接受到点击事件，Controller 这时会去调用 Model，Model 会与服务器交互，得到数据后返回给 Controller，Controller 得到数据就去更新 View</p>\n<h3 id=\"MVC-例子\"><a href=\"#MVC-例子\" class=\"headerlink\" title=\"MVC 例子\"></a>MVC 例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> model = Model(&#123;</span><br><span class=\"line\">    <span class=\"attr\">resouceName</span>: <span class=\"string\">&#x27;Message&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> view = View(<span class=\"string\">&#x27;.message&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> controller = &#123;</span><br><span class=\"line\">    <span class=\"attr\">view</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">leaveMessage</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">messageList</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">model</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view, model</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.view = view</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model = model</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.leaveMessage = view.querySelector(<span class=\"string\">&#x27;#leaveMessage&#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.messageList = view.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model.init()</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.messageInit()</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.bindEvents()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">messageInit</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model.fetch().then(<span class=\"function\"><span class=\"params\">message</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> array = message.map(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.attributes)</span><br><span class=\"line\"></span><br><span class=\"line\">        array.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> oLi = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ospanname = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ospanmessage = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          ospanname.innerText = value.name + <span class=\"string\">&#x27;: &#x27;</span></span><br><span class=\"line\">          ospanmessage.innerText = value.message</span><br><span class=\"line\"></span><br><span class=\"line\">          oLi.appendChild(ospanname)</span><br><span class=\"line\">          oLi.appendChild(ospanmessage)</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"built_in\">this</span>.messageList.appendChild(oLi)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">bindEvents</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.leaveMessage.addEventListener(<span class=\"string\">&#x27;submit&#x27;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        e.preventDefault()</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.savemessage()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">savemessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      leaveMessage = <span class=\"built_in\">this</span>.leaveMessage</span><br><span class=\"line\">      <span class=\"keyword\">let</span> postName = leaveMessage.querySelector(<span class=\"string\">&#x27;input[name=name]&#x27;</span>).value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> postMessages = leaveMessage.querySelector(<span class=\"string\">&#x27;input[name=messages]&#x27;</span>).value</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model</span><br><span class=\"line\">        .save(&#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: postName,</span><br><span class=\"line\">          <span class=\"attr\">message</span>: postMessages</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">          alert(<span class=\"string\">&#x27;提交成功&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ul = view.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> oLi = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ospanname = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ospanmessage = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          ospanname.innerText = object.attributes.name + <span class=\"string\">&#x27;: &#x27;</span></span><br><span class=\"line\">          ospanmessage.innerText = object.attributes.message</span><br><span class=\"line\"></span><br><span class=\"line\">          oLi.appendChild(ospanname)</span><br><span class=\"line\">          oLi.appendChild(ospanmessage)</span><br><span class=\"line\"></span><br><span class=\"line\">          ul.appendChild(oLi)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  controller.init.call(controller, view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是-MVC\"><a href=\"#什么是-MVC\" class=\"headerlink\" title=\"什么是 MVC\"></a>什么是 MVC</h3><ol>\n<li>最上面的一层，是直接面向最终用户的”视图层”（View）。它是提供给用户的操作界面，是程序的外壳。</li>\n<li>最底下的一层，是核心的”数据层”（Model），也就是程序需要操作的数据或信息。</li>\n<li>中间的一层，就是”控制层”（Controller），它负责根据用户从”视图层”输入的指令，选取”数据层”中的数据，然后对其进行相应的操作，产生最终结果。</li>\n</ol>","more":"<p>Model 和服务器交互，Model 将得到的数据交给 Controller，Controller 把数据填入 View，并监听 View<br>用户操作 View，如点击按钮，Controller 就会接受到点击事件，Controller 这时会去调用 Model，Model 会与服务器交互，得到数据后返回给 Controller，Controller 得到数据就去更新 View</p>\n<h3 id=\"MVC-例子\"><a href=\"#MVC-例子\" class=\"headerlink\" title=\"MVC 例子\"></a>MVC 例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> model = Model(&#123;</span><br><span class=\"line\">    <span class=\"attr\">resouceName</span>: <span class=\"string\">&#x27;Message&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> view = View(<span class=\"string\">&#x27;.message&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> controller = &#123;</span><br><span class=\"line\">    <span class=\"attr\">view</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">leaveMessage</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">messageList</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">model</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view, model</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.view = view</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model = model</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.leaveMessage = view.querySelector(<span class=\"string\">&#x27;#leaveMessage&#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.messageList = view.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model.init()</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.messageInit()</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.bindEvents()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">messageInit</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model.fetch().then(<span class=\"function\"><span class=\"params\">message</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> array = message.map(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.attributes)</span><br><span class=\"line\"></span><br><span class=\"line\">        array.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> oLi = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ospanname = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ospanmessage = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          ospanname.innerText = value.name + <span class=\"string\">&#x27;: &#x27;</span></span><br><span class=\"line\">          ospanmessage.innerText = value.message</span><br><span class=\"line\"></span><br><span class=\"line\">          oLi.appendChild(ospanname)</span><br><span class=\"line\">          oLi.appendChild(ospanmessage)</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"built_in\">this</span>.messageList.appendChild(oLi)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">bindEvents</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.leaveMessage.addEventListener(<span class=\"string\">&#x27;submit&#x27;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        e.preventDefault()</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.savemessage()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">savemessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      leaveMessage = <span class=\"built_in\">this</span>.leaveMessage</span><br><span class=\"line\">      <span class=\"keyword\">let</span> postName = leaveMessage.querySelector(<span class=\"string\">&#x27;input[name=name]&#x27;</span>).value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> postMessages = leaveMessage.querySelector(<span class=\"string\">&#x27;input[name=messages]&#x27;</span>).value</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model</span><br><span class=\"line\">        .save(&#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: postName,</span><br><span class=\"line\">          <span class=\"attr\">message</span>: postMessages</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">          alert(<span class=\"string\">&#x27;提交成功&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ul = view.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> oLi = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ospanname = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> ospanmessage = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          ospanname.innerText = object.attributes.name + <span class=\"string\">&#x27;: &#x27;</span></span><br><span class=\"line\">          ospanmessage.innerText = object.attributes.message</span><br><span class=\"line\"></span><br><span class=\"line\">          oLi.appendChild(ospanname)</span><br><span class=\"line\">          oLi.appendChild(ospanmessage)</span><br><span class=\"line\"></span><br><span class=\"line\">          ul.appendChild(oLi)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  controller.init.call(controller, view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure>"},{"title":"什么是JSONP","date":"2018-12-17T16:00:00.000Z","updated":"2018-12-17T16:00:00.000Z","_content":"\n### 什么是 JSONP\n\n请求方：浏览器（前端）\n\n响应方：服务器（后端）\n\n<!-- more -->\n\n1. 浏览器动态创建`<script>`标签， src 指向响应方，并插入到`<body>`中，同时传一个查询参数（ url?callback=funcName ），查询值默认为 callback；\n2. 响应方根据查询的参数，构造形如`xxx.call(undefined,'数据')`的内容，并响应给浏览器；\n3. 浏览器接收到响应，会自动解析请求到`script`里的数据，执行`xxx.call(undefined,'数据')`，就得到想要的数据；\n4. 请求完成或请求失败，都会删除生成`<script>`标签和构建的`xxx`全局函数。\n\n### 两个约定：\n\n1. 默认查询参数的值`callback=funcName`；\n2. funcName 使用随机数，例如 func123456。\n\n### JSONP demo\n\n- html 页面\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-Hans\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>JSONP-demo</title>\n  </head>\n\n  <body>\n    <p>你还有<span id=\"money\">$$money$$</span>块钱</p>\n    <button id=\"btn\">扣1块钱</button>\n    <script>\n      btn.addEventListener('click', function () {\n        func = 'func' + parseInt(Math.random() * 10000, 10)\n\n        window[func] = function (respones) {\n          if (respones.success) {\n            money.innerText = respones.money\n          }\n        }\n        var script = document.createElement('script')\n        script.src = 'http://jack.com:8888/pay?callback=' + func\n        document.body.appendChild(script)\n        script.onload = function (e) {\n          e.currentTarget.remove()\n          delete window[func]\n        }\n        script.onerror = function (e) {\n          e.currentTarget.remove()\n          alert('failed')\n          delete window[func]\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n\n- server.js\n\n```\n\nvar http = require('http')\nvar fs = require('fs')\nvar url = require('url')\nvar port = process.argv[2]\n\nif(!port){\n  console.log('请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？')\n  process.exit(1)\n}\n\nvar server = http.createServer(function(request, response){\n  var parsedUrl = url.parse(request.url, true)\n  var path = request.url\n  var query = ''\n  if(path.indexOf('?') >= 0){ query = path.substring(path.indexOf('?')) }\n  var pathNoQuery = parsedUrl.pathname\n  var queryObject = parsedUrl.query\n  var method = request.method\n\n  /******** 从这里开始看，上面不要看 ************/\n\n  if (path === '/') {\n    var string = fs.readFileSync('./index.html','utf8')\n    var account = fs.readFileSync('./db','utf8') //100\n    string=string.replace('$$money$$',account)\n    response.setHeader('Content-Type','text/html','charset=utf-8')\n    response.write(string)\n    response.end()\n  }else if(pathNoQuery === '/pay' && method.toUpperCase() ==='GET' ){\n    var account = fs.readFileSync('./db','utf8')\n    var newaccount = account -1\n    fs.writeFileSync('./db',newaccount)\n    response.setHeader('Content-Type','application/javascript')\n    response.write(`\n      ${queryObject.callback}.call(undefined,{\n        'success':true,\n        'money':`+newaccount+ `\n      })\n    `)\n    response.end()\n  }else{\n    response.statusCode = 404\n    response.write('网页走丢了')\n    response.end()\n  }\n\n  /******** 代码结束，下面不要看 ************/\n\n})\n\nserver.listen(port)\nconsole.log('127.0.0.1:'+port)\n\n```\n","source":"_posts/什么是JSONP.md","raw":"---\ntitle: 什么是JSONP\ndate: 2018-12-18 00:00:00\nupdated: 2018-12-18 00:00:00\ntags:\n  - JSONP\n---\n\n### 什么是 JSONP\n\n请求方：浏览器（前端）\n\n响应方：服务器（后端）\n\n<!-- more -->\n\n1. 浏览器动态创建`<script>`标签， src 指向响应方，并插入到`<body>`中，同时传一个查询参数（ url?callback=funcName ），查询值默认为 callback；\n2. 响应方根据查询的参数，构造形如`xxx.call(undefined,'数据')`的内容，并响应给浏览器；\n3. 浏览器接收到响应，会自动解析请求到`script`里的数据，执行`xxx.call(undefined,'数据')`，就得到想要的数据；\n4. 请求完成或请求失败，都会删除生成`<script>`标签和构建的`xxx`全局函数。\n\n### 两个约定：\n\n1. 默认查询参数的值`callback=funcName`；\n2. funcName 使用随机数，例如 func123456。\n\n### JSONP demo\n\n- html 页面\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-Hans\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>JSONP-demo</title>\n  </head>\n\n  <body>\n    <p>你还有<span id=\"money\">$$money$$</span>块钱</p>\n    <button id=\"btn\">扣1块钱</button>\n    <script>\n      btn.addEventListener('click', function () {\n        func = 'func' + parseInt(Math.random() * 10000, 10)\n\n        window[func] = function (respones) {\n          if (respones.success) {\n            money.innerText = respones.money\n          }\n        }\n        var script = document.createElement('script')\n        script.src = 'http://jack.com:8888/pay?callback=' + func\n        document.body.appendChild(script)\n        script.onload = function (e) {\n          e.currentTarget.remove()\n          delete window[func]\n        }\n        script.onerror = function (e) {\n          e.currentTarget.remove()\n          alert('failed')\n          delete window[func]\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n\n- server.js\n\n```\n\nvar http = require('http')\nvar fs = require('fs')\nvar url = require('url')\nvar port = process.argv[2]\n\nif(!port){\n  console.log('请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？')\n  process.exit(1)\n}\n\nvar server = http.createServer(function(request, response){\n  var parsedUrl = url.parse(request.url, true)\n  var path = request.url\n  var query = ''\n  if(path.indexOf('?') >= 0){ query = path.substring(path.indexOf('?')) }\n  var pathNoQuery = parsedUrl.pathname\n  var queryObject = parsedUrl.query\n  var method = request.method\n\n  /******** 从这里开始看，上面不要看 ************/\n\n  if (path === '/') {\n    var string = fs.readFileSync('./index.html','utf8')\n    var account = fs.readFileSync('./db','utf8') //100\n    string=string.replace('$$money$$',account)\n    response.setHeader('Content-Type','text/html','charset=utf-8')\n    response.write(string)\n    response.end()\n  }else if(pathNoQuery === '/pay' && method.toUpperCase() ==='GET' ){\n    var account = fs.readFileSync('./db','utf8')\n    var newaccount = account -1\n    fs.writeFileSync('./db',newaccount)\n    response.setHeader('Content-Type','application/javascript')\n    response.write(`\n      ${queryObject.callback}.call(undefined,{\n        'success':true,\n        'money':`+newaccount+ `\n      })\n    `)\n    response.end()\n  }else{\n    response.statusCode = 404\n    response.write('网页走丢了')\n    response.end()\n  }\n\n  /******** 代码结束，下面不要看 ************/\n\n})\n\nserver.listen(port)\nconsole.log('127.0.0.1:'+port)\n\n```\n","slug":"什么是JSONP","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxm001tk4u9gug15kfk","content":"<h3 id=\"什么是-JSONP\"><a href=\"#什么是-JSONP\" class=\"headerlink\" title=\"什么是 JSONP\"></a>什么是 JSONP</h3><p>请求方：浏览器（前端）</p>\n<p>响应方：服务器（后端）</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>浏览器动态创建<code>&lt;script&gt;</code>标签， src 指向响应方，并插入到<code>&lt;body&gt;</code>中，同时传一个查询参数（ url?callback=funcName ），查询值默认为 callback；</li>\n<li>响应方根据查询的参数，构造形如<code>xxx.call(undefined,&#39;数据&#39;)</code>的内容，并响应给浏览器；</li>\n<li>浏览器接收到响应，会自动解析请求到<code>script</code>里的数据，执行<code>xxx.call(undefined,&#39;数据&#39;)</code>，就得到想要的数据；</li>\n<li>请求完成或请求失败，都会删除生成<code>&lt;script&gt;</code>标签和构建的<code>xxx</code>全局函数。</li>\n</ol>\n<h3 id=\"两个约定：\"><a href=\"#两个约定：\" class=\"headerlink\" title=\"两个约定：\"></a>两个约定：</h3><ol>\n<li>默认查询参数的值<code>callback=funcName</code>；</li>\n<li>funcName 使用随机数，例如 func123456。</li>\n</ol>\n<h3 id=\"JSONP-demo\"><a href=\"#JSONP-demo\" class=\"headerlink\" title=\"JSONP demo\"></a>JSONP demo</h3><ul>\n<li>html 页面</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-Hans&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JSONP-demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你还有<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;money&quot;</span>&gt;</span>$$money$$<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>块钱<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>扣1块钱<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        func = <span class=\"string\">&#x27;func&#x27;</span> + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10000</span>, <span class=\"number\">10</span>)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>[func] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">respones</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (respones.success) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            money.innerText = respones.money</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        script.src = <span class=\"string\">&#x27;http://jack.com:8888/pay?callback=&#x27;</span> + func</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.body.appendChild(script)</span></span><br><span class=\"line\"><span class=\"javascript\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          e.currentTarget.remove()</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[func]</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        script.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          e.currentTarget.remove()</span></span><br><span class=\"line\"><span class=\"javascript\">          alert(<span class=\"string\">&#x27;failed&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[func]</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>server.js</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var http = require(&#x27;http&#x27;)</span><br><span class=\"line\">var fs = require(&#x27;fs&#x27;)</span><br><span class=\"line\">var url = require(&#x27;url&#x27;)</span><br><span class=\"line\">var port = process.argv[2]</span><br><span class=\"line\"></span><br><span class=\"line\">if(!port)&#123;</span><br><span class=\"line\">  console.log(&#x27;请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？&#x27;)</span><br><span class=\"line\">  process.exit(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var server = http.createServer(function(request, response)&#123;</span><br><span class=\"line\">  var parsedUrl = url.parse(request.url, true)</span><br><span class=\"line\">  var path = request.url</span><br><span class=\"line\">  var query = &#x27;&#x27;</span><br><span class=\"line\">  if(path.indexOf(&#x27;?&#x27;) &gt;= 0)&#123; query = path.substring(path.indexOf(&#x27;?&#x27;)) &#125;</span><br><span class=\"line\">  var pathNoQuery = parsedUrl.pathname</span><br><span class=\"line\">  var queryObject = parsedUrl.query</span><br><span class=\"line\">  var method = request.method</span><br><span class=\"line\"></span><br><span class=\"line\">  /******** 从这里开始看，上面不要看 ************/</span><br><span class=\"line\"></span><br><span class=\"line\">  if (path === &#x27;/&#x27;) &#123;</span><br><span class=\"line\">    var string = fs.readFileSync(&#x27;./index.html&#x27;,&#x27;utf8&#x27;)</span><br><span class=\"line\">    var account = fs.readFileSync(&#x27;./db&#x27;,&#x27;utf8&#x27;) //100</span><br><span class=\"line\">    string=string.replace(&#x27;$$money$$&#x27;,account)</span><br><span class=\"line\">    response.setHeader(&#x27;Content-Type&#x27;,&#x27;text/html&#x27;,&#x27;charset=utf-8&#x27;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;else if(pathNoQuery === &#x27;/pay&#x27; &amp;&amp; method.toUpperCase() ===&#x27;GET&#x27; )&#123;</span><br><span class=\"line\">    var account = fs.readFileSync(&#x27;./db&#x27;,&#x27;utf8&#x27;)</span><br><span class=\"line\">    var newaccount = account -1</span><br><span class=\"line\">    fs.writeFileSync(&#x27;./db&#x27;,newaccount)</span><br><span class=\"line\">    response.setHeader(&#x27;Content-Type&#x27;,&#x27;application/javascript&#x27;)</span><br><span class=\"line\">    response.write(`</span><br><span class=\"line\">      $&#123;queryObject.callback&#125;.call(undefined,&#123;</span><br><span class=\"line\">        &#x27;success&#x27;:true,</span><br><span class=\"line\">        &#x27;money&#x27;:`+newaccount+ `</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    `)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    response.statusCode = 404</span><br><span class=\"line\">    response.write(&#x27;网页走丢了&#x27;)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /******** 代码结束，下面不要看 ************/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port)</span><br><span class=\"line\">console.log(&#x27;127.0.0.1:&#x27;+port)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是-JSONP\"><a href=\"#什么是-JSONP\" class=\"headerlink\" title=\"什么是 JSONP\"></a>什么是 JSONP</h3><p>请求方：浏览器（前端）</p>\n<p>响应方：服务器（后端）</p>","more":"<ol>\n<li>浏览器动态创建<code>&lt;script&gt;</code>标签， src 指向响应方，并插入到<code>&lt;body&gt;</code>中，同时传一个查询参数（ url?callback=funcName ），查询值默认为 callback；</li>\n<li>响应方根据查询的参数，构造形如<code>xxx.call(undefined,&#39;数据&#39;)</code>的内容，并响应给浏览器；</li>\n<li>浏览器接收到响应，会自动解析请求到<code>script</code>里的数据，执行<code>xxx.call(undefined,&#39;数据&#39;)</code>，就得到想要的数据；</li>\n<li>请求完成或请求失败，都会删除生成<code>&lt;script&gt;</code>标签和构建的<code>xxx</code>全局函数。</li>\n</ol>\n<h3 id=\"两个约定：\"><a href=\"#两个约定：\" class=\"headerlink\" title=\"两个约定：\"></a>两个约定：</h3><ol>\n<li>默认查询参数的值<code>callback=funcName</code>；</li>\n<li>funcName 使用随机数，例如 func123456。</li>\n</ol>\n<h3 id=\"JSONP-demo\"><a href=\"#JSONP-demo\" class=\"headerlink\" title=\"JSONP demo\"></a>JSONP demo</h3><ul>\n<li>html 页面</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-Hans&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JSONP-demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你还有<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;money&quot;</span>&gt;</span>$$money$$<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>块钱<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>扣1块钱<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        func = <span class=\"string\">&#x27;func&#x27;</span> + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10000</span>, <span class=\"number\">10</span>)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>[func] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">respones</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (respones.success) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            money.innerText = respones.money</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        script.src = <span class=\"string\">&#x27;http://jack.com:8888/pay?callback=&#x27;</span> + func</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.body.appendChild(script)</span></span><br><span class=\"line\"><span class=\"javascript\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          e.currentTarget.remove()</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[func]</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        script.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          e.currentTarget.remove()</span></span><br><span class=\"line\"><span class=\"javascript\">          alert(<span class=\"string\">&#x27;failed&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[func]</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>server.js</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var http = require(&#x27;http&#x27;)</span><br><span class=\"line\">var fs = require(&#x27;fs&#x27;)</span><br><span class=\"line\">var url = require(&#x27;url&#x27;)</span><br><span class=\"line\">var port = process.argv[2]</span><br><span class=\"line\"></span><br><span class=\"line\">if(!port)&#123;</span><br><span class=\"line\">  console.log(&#x27;请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？&#x27;)</span><br><span class=\"line\">  process.exit(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var server = http.createServer(function(request, response)&#123;</span><br><span class=\"line\">  var parsedUrl = url.parse(request.url, true)</span><br><span class=\"line\">  var path = request.url</span><br><span class=\"line\">  var query = &#x27;&#x27;</span><br><span class=\"line\">  if(path.indexOf(&#x27;?&#x27;) &gt;= 0)&#123; query = path.substring(path.indexOf(&#x27;?&#x27;)) &#125;</span><br><span class=\"line\">  var pathNoQuery = parsedUrl.pathname</span><br><span class=\"line\">  var queryObject = parsedUrl.query</span><br><span class=\"line\">  var method = request.method</span><br><span class=\"line\"></span><br><span class=\"line\">  /******** 从这里开始看，上面不要看 ************/</span><br><span class=\"line\"></span><br><span class=\"line\">  if (path === &#x27;/&#x27;) &#123;</span><br><span class=\"line\">    var string = fs.readFileSync(&#x27;./index.html&#x27;,&#x27;utf8&#x27;)</span><br><span class=\"line\">    var account = fs.readFileSync(&#x27;./db&#x27;,&#x27;utf8&#x27;) //100</span><br><span class=\"line\">    string=string.replace(&#x27;$$money$$&#x27;,account)</span><br><span class=\"line\">    response.setHeader(&#x27;Content-Type&#x27;,&#x27;text/html&#x27;,&#x27;charset=utf-8&#x27;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;else if(pathNoQuery === &#x27;/pay&#x27; &amp;&amp; method.toUpperCase() ===&#x27;GET&#x27; )&#123;</span><br><span class=\"line\">    var account = fs.readFileSync(&#x27;./db&#x27;,&#x27;utf8&#x27;)</span><br><span class=\"line\">    var newaccount = account -1</span><br><span class=\"line\">    fs.writeFileSync(&#x27;./db&#x27;,newaccount)</span><br><span class=\"line\">    response.setHeader(&#x27;Content-Type&#x27;,&#x27;application/javascript&#x27;)</span><br><span class=\"line\">    response.write(`</span><br><span class=\"line\">      $&#123;queryObject.callback&#125;.call(undefined,&#123;</span><br><span class=\"line\">        &#x27;success&#x27;:true,</span><br><span class=\"line\">        &#x27;money&#x27;:`+newaccount+ `</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    `)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    response.statusCode = 404</span><br><span class=\"line\">    response.write(&#x27;网页走丢了&#x27;)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /******** 代码结束，下面不要看 ************/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port)</span><br><span class=\"line\">console.log(&#x27;127.0.0.1:&#x27;+port)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"使用 Vue directives 封装 clipboard","date":"2022-01-21T16:00:00.000Z","updated":"2022-01-21T16:00:00.000Z","_content":"\n最近在使用 clipboard 实现复制到剪切板的功能，发现在 Vue 中使用不是那么丝滑，想着怎么封装一下。\n\n<!-- more -->\n\n查看 clipboard 的文档，发现该插件是通过操作 DOM，来实现复制剪切板的功能。而 Vue 也贴心的提供了 directives 方便我们对普通 DOM 元素进行底层操作。\n\n### 初步使用\n\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 初步使用\" src=\"https://codepen.io/quietdw/embed/zYEQMVr?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/zYEQMVr\">\n  directives 初步使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n当我们点击复制按钮的的时候，控制台打印 `复制成功: Welcome to Vue!`。但是当我们更改 input 里面的内容时，点击复制按钮，控制台还是打印 `复制成功: Welcome to Vue!`，并没有按照我们希望的方式更新剪切板的内容。\n\n### 进阶使用\n\n我们希望在 input 的值更新时，点击复制按钮，剪切板的值也能更新。directives 有 update 钩子函数，可以更新值。我们把 new 出来的 `cbd` 保存到 `el` 上，这样我们在 update 钩子函数中也能通过 `cbd` 更新剪切板的内容。不使用了的时候，需要在 unbind 钩子中摧毁实例。\n\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 进阶使用\" src=\"https://codepen.io/quietdw/embed/MWEdZEy?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/MWEdZEy\">\n  directives 进阶使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n### 再加一点点\n\n有时复制失败，或者复制成功后想要做一些操作，clipboard 有这两种回调函数，我们需要在 directives 中保留一下。通过给指令传参数，我们可以绑定多个值。\n\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 进阶使用\" src=\"https://codepen.io/quietdw/embed/LYzoMXm?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/LYzoMXm\">\n  directives 进阶使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n> 引用\n\n- [clipboard.js](https://clipboardjs.com/#example-target)\n- [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n","source":"_posts/使用 Vue directives 封装 clipboard.md.md","raw":"---\ntitle: 使用 Vue directives 封装 clipboard\ndate: 2022-01-22 00:00:00\nupdated: 2022-01-22 00:00:00\ntags:\n  - Vue\n  - directives\n  - clipboard\n---\n\n最近在使用 clipboard 实现复制到剪切板的功能，发现在 Vue 中使用不是那么丝滑，想着怎么封装一下。\n\n<!-- more -->\n\n查看 clipboard 的文档，发现该插件是通过操作 DOM，来实现复制剪切板的功能。而 Vue 也贴心的提供了 directives 方便我们对普通 DOM 元素进行底层操作。\n\n### 初步使用\n\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 初步使用\" src=\"https://codepen.io/quietdw/embed/zYEQMVr?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/zYEQMVr\">\n  directives 初步使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n当我们点击复制按钮的的时候，控制台打印 `复制成功: Welcome to Vue!`。但是当我们更改 input 里面的内容时，点击复制按钮，控制台还是打印 `复制成功: Welcome to Vue!`，并没有按照我们希望的方式更新剪切板的内容。\n\n### 进阶使用\n\n我们希望在 input 的值更新时，点击复制按钮，剪切板的值也能更新。directives 有 update 钩子函数，可以更新值。我们把 new 出来的 `cbd` 保存到 `el` 上，这样我们在 update 钩子函数中也能通过 `cbd` 更新剪切板的内容。不使用了的时候，需要在 unbind 钩子中摧毁实例。\n\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 进阶使用\" src=\"https://codepen.io/quietdw/embed/MWEdZEy?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/MWEdZEy\">\n  directives 进阶使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n### 再加一点点\n\n有时复制失败，或者复制成功后想要做一些操作，clipboard 有这两种回调函数，我们需要在 directives 中保留一下。通过给指令传参数，我们可以绑定多个值。\n\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 进阶使用\" src=\"https://codepen.io/quietdw/embed/LYzoMXm?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/LYzoMXm\">\n  directives 进阶使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n> 引用\n\n- [clipboard.js](https://clipboardjs.com/#example-target)\n- [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n","slug":"使用 Vue directives 封装 clipboard.md","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxm001vk4u951jaezit","content":"<p>最近在使用 clipboard 实现复制到剪切板的功能，发现在 Vue 中使用不是那么丝滑，想着怎么封装一下。</p>\n<span id=\"more\"></span>\n\n<p>查看 clipboard 的文档，发现该插件是通过操作 DOM，来实现复制剪切板的功能。而 Vue 也贴心的提供了 directives 方便我们对普通 DOM 元素进行底层操作。</p>\n<h3 id=\"初步使用\"><a href=\"#初步使用\" class=\"headerlink\" title=\"初步使用\"></a>初步使用</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 初步使用\" src=\"https://codepen.io/quietdw/embed/zYEQMVr?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/zYEQMVr\">\n  directives 初步使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<p>当我们点击复制按钮的的时候，控制台打印 <code>复制成功: Welcome to Vue!</code>。但是当我们更改 input 里面的内容时，点击复制按钮，控制台还是打印 <code>复制成功: Welcome to Vue!</code>，并没有按照我们希望的方式更新剪切板的内容。</p>\n<h3 id=\"进阶使用\"><a href=\"#进阶使用\" class=\"headerlink\" title=\"进阶使用\"></a>进阶使用</h3><p>我们希望在 input 的值更新时，点击复制按钮，剪切板的值也能更新。directives 有 update 钩子函数，可以更新值。我们把 new 出来的 <code>cbd</code> 保存到 <code>el</code> 上，这样我们在 update 钩子函数中也能通过 <code>cbd</code> 更新剪切板的内容。不使用了的时候，需要在 unbind 钩子中摧毁实例。</p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 进阶使用\" src=\"https://codepen.io/quietdw/embed/MWEdZEy?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/MWEdZEy\">\n  directives 进阶使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h3 id=\"再加一点点\"><a href=\"#再加一点点\" class=\"headerlink\" title=\"再加一点点\"></a>再加一点点</h3><p>有时复制失败，或者复制成功后想要做一些操作，clipboard 有这两种回调函数，我们需要在 directives 中保留一下。通过给指令传参数，我们可以绑定多个值。</p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 进阶使用\" src=\"https://codepen.io/quietdw/embed/LYzoMXm?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/LYzoMXm\">\n  directives 进阶使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://clipboardjs.com/#example-target\">clipboard.js</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">自定义指令</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近在使用 clipboard 实现复制到剪切板的功能，发现在 Vue 中使用不是那么丝滑，想着怎么封装一下。</p>","more":"<p>查看 clipboard 的文档，发现该插件是通过操作 DOM，来实现复制剪切板的功能。而 Vue 也贴心的提供了 directives 方便我们对普通 DOM 元素进行底层操作。</p>\n<h3 id=\"初步使用\"><a href=\"#初步使用\" class=\"headerlink\" title=\"初步使用\"></a>初步使用</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 初步使用\" src=\"https://codepen.io/quietdw/embed/zYEQMVr?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/zYEQMVr\">\n  directives 初步使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<p>当我们点击复制按钮的的时候，控制台打印 <code>复制成功: Welcome to Vue!</code>。但是当我们更改 input 里面的内容时，点击复制按钮，控制台还是打印 <code>复制成功: Welcome to Vue!</code>，并没有按照我们希望的方式更新剪切板的内容。</p>\n<h3 id=\"进阶使用\"><a href=\"#进阶使用\" class=\"headerlink\" title=\"进阶使用\"></a>进阶使用</h3><p>我们希望在 input 的值更新时，点击复制按钮，剪切板的值也能更新。directives 有 update 钩子函数，可以更新值。我们把 new 出来的 <code>cbd</code> 保存到 <code>el</code> 上，这样我们在 update 钩子函数中也能通过 <code>cbd</code> 更新剪切板的内容。不使用了的时候，需要在 unbind 钩子中摧毁实例。</p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 进阶使用\" src=\"https://codepen.io/quietdw/embed/MWEdZEy?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/MWEdZEy\">\n  directives 进阶使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h3 id=\"再加一点点\"><a href=\"#再加一点点\" class=\"headerlink\" title=\"再加一点点\"></a>再加一点点</h3><p>有时复制失败，或者复制成功后想要做一些操作，clipboard 有这两种回调函数，我们需要在 directives 中保留一下。通过给指令传参数，我们可以绑定多个值。</p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"directives 进阶使用\" src=\"https://codepen.io/quietdw/embed/LYzoMXm?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/quietdw/pen/LYzoMXm\">\n  directives 进阶使用</a> by jiang (<a href=\"https://codepen.io/quietdw\">@quietdw</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://clipboardjs.com/#example-target\">clipboard.js</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">自定义指令</a></li>\n</ul>"},{"title":"使用new后到底发生了什么？","date":"2018-12-26T16:00:00.000Z","updated":"2018-12-26T16:00:00.000Z","_content":"\n当代码 new Foo(...) 执行时，会发生以下事情：\n\n1. 首先新建一个空对象，空对象的 `__proto__` ，指向该构造函数的 `prototype`;\n2. 构造函数的内部的 `this` 指向上面的空对象\n3. 如果该函数没有返回对象，则返回 `this`\n\n<!-- more -->\n\n用代码表示，就是以下过程\n\n```javascript\nfunction Foo(){\n// var temp={}\n// this = temp\n// this.__proto__ = Foo.prototype\nthis.xxx=xxx\n...\n//return this\n}\n```\n\n模拟一下 new\n\n```javascript\nfunction _new(fn, ...arg) {\n  const obj = Object.create(fn.prototype)\n  const ret = fn.apply(obj, arg)\n  return ret instanceof Object ? ret : obj // 如果该函数没有返回对象，则返回obj\n}\n```\n\nnew 的作用，就是省那么几行代码。（也就是所谓的语法糖）\n\n> 引用\n\n- [JS 的 new 到底是干什么的？](https://zhuanlan.zhihu.com/p/23987456)\n- https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new\n","source":"_posts/使用new后到底发生了什么？.md","raw":"---\ntitle: 使用new后到底发生了什么？\ndate: 2018-12-27 00:00:00\nupdated: 2018-12-27 00:00:00\ntags:\n  - new\n  - JavaScript\n---\n\n当代码 new Foo(...) 执行时，会发生以下事情：\n\n1. 首先新建一个空对象，空对象的 `__proto__` ，指向该构造函数的 `prototype`;\n2. 构造函数的内部的 `this` 指向上面的空对象\n3. 如果该函数没有返回对象，则返回 `this`\n\n<!-- more -->\n\n用代码表示，就是以下过程\n\n```javascript\nfunction Foo(){\n// var temp={}\n// this = temp\n// this.__proto__ = Foo.prototype\nthis.xxx=xxx\n...\n//return this\n}\n```\n\n模拟一下 new\n\n```javascript\nfunction _new(fn, ...arg) {\n  const obj = Object.create(fn.prototype)\n  const ret = fn.apply(obj, arg)\n  return ret instanceof Object ? ret : obj // 如果该函数没有返回对象，则返回obj\n}\n```\n\nnew 的作用，就是省那么几行代码。（也就是所谓的语法糖）\n\n> 引用\n\n- [JS 的 new 到底是干什么的？](https://zhuanlan.zhihu.com/p/23987456)\n- https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new\n","slug":"使用new后到底发生了什么？","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxn001yk4u906o586k6","content":"<p>当代码 new Foo(…) 执行时，会发生以下事情：</p>\n<ol>\n<li>首先新建一个空对象，空对象的 <code>__proto__</code> ，指向该构造函数的 <code>prototype</code>;</li>\n<li>构造函数的内部的 <code>this</code> 指向上面的空对象</li>\n<li>如果该函数没有返回对象，则返回 <code>this</code></li>\n</ol>\n<span id=\"more\"></span>\n\n<p>用代码表示，就是以下过程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// var temp=&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// this = temp</span></span><br><span class=\"line\"><span class=\"comment\">// this.__proto__ = Foo.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.xxx=xxx</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//return this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模拟一下 new</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_new</span>(<span class=\"params\">fn, ...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(fn.prototype)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ret = fn.apply(obj, arg)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> ? ret : obj <span class=\"comment\">// 如果该函数没有返回对象，则返回obj</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>new 的作用，就是省那么几行代码。（也就是所谓的语法糖）</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/23987456\">JS 的 new 到底是干什么的？</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>当代码 new Foo(…) 执行时，会发生以下事情：</p>\n<ol>\n<li>首先新建一个空对象，空对象的 <code>__proto__</code> ，指向该构造函数的 <code>prototype</code>;</li>\n<li>构造函数的内部的 <code>this</code> 指向上面的空对象</li>\n<li>如果该函数没有返回对象，则返回 <code>this</code></li>\n</ol>","more":"<p>用代码表示，就是以下过程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// var temp=&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// this = temp</span></span><br><span class=\"line\"><span class=\"comment\">// this.__proto__ = Foo.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.xxx=xxx</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//return this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模拟一下 new</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_new</span>(<span class=\"params\">fn, ...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(fn.prototype)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ret = fn.apply(obj, arg)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> ? ret : obj <span class=\"comment\">// 如果该函数没有返回对象，则返回obj</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>new 的作用，就是省那么几行代码。（也就是所谓的语法糖）</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/23987456\">JS 的 new 到底是干什么的？</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new</a></li>\n</ul>"},{"title":"函数节流","date":"2019-03-16T16:00:00.000Z","updated":"2019-03-16T16:00:00.000Z","_content":"\n有些事件，如 `onresize` 事件，高频更改可能导致浏览器崩溃。为了绕开这个问题，可以使用定时器对该函数进行节流。\n\n<!-- more -->\n\n# 屯着一起送\n\n举个例子，小明去送外卖，收到订单后，不会马上去送，而是等个 1 分钟，5 分钟内如果又有订单，就再等着，直到 5 分钟内没有新的订单。\n\n用代码表示就是这样：\n\n```html\n<button id=\"xxx\">送外卖</button>\n```\n\n```javascript\nvar debounce = function (callback, delay) {\n  var timer = null\n  return function () {\n    if (timer) {\n      console.log(1)\n      clearTimeout(timer)\n    }\n\n    timer = setTimeout(function () {\n      console.log(2)\n      callback()\n      timer = null\n    }, delay)\n  }\n}\n\nfunction delivery() {\n  console.log('我去送外卖了')\n}\n\nxxx.onclick = debounce(delivery, 1000)\n```\n\n# 技能 CD\n\n依旧举个例子，lol 中某英雄的技能 CD 是 10s，ta 至少每隔 10 秒才能放同一个技能。\n\n用代码表示就是这样的\n\n```html\n<button id=\"xxx\">施放 Q 技能</button>\n```\n\n```javascript\nvar throttle = function (callback, delay) {\n  var fired = false\n  return function () {\n    if (!fired) {\n      fired = true\n      callback()\n      var timer = setTimeout(() => {\n        fired = false\n      }, delay)\n    }\n  }\n}\n\nfunction fire() {\n  console.log('施放了 Q 技能')\n}\n\nxxx.onclick = throttle(fire, 10000)\n```\n\n两种方式都使用了闭包，但只是简单的实现，目前 lodash 和 underscore 这两个 js 库都对以上方法进行了封装，功能也更完善。\n","source":"_posts/函数节流.md","raw":"---\ntitle: 函数节流\ndate: 2019-03-17 00:00:00\nupdated: 2019-03-17 00:00:00\ntags:\n  - 函数节流\n---\n\n有些事件，如 `onresize` 事件，高频更改可能导致浏览器崩溃。为了绕开这个问题，可以使用定时器对该函数进行节流。\n\n<!-- more -->\n\n# 屯着一起送\n\n举个例子，小明去送外卖，收到订单后，不会马上去送，而是等个 1 分钟，5 分钟内如果又有订单，就再等着，直到 5 分钟内没有新的订单。\n\n用代码表示就是这样：\n\n```html\n<button id=\"xxx\">送外卖</button>\n```\n\n```javascript\nvar debounce = function (callback, delay) {\n  var timer = null\n  return function () {\n    if (timer) {\n      console.log(1)\n      clearTimeout(timer)\n    }\n\n    timer = setTimeout(function () {\n      console.log(2)\n      callback()\n      timer = null\n    }, delay)\n  }\n}\n\nfunction delivery() {\n  console.log('我去送外卖了')\n}\n\nxxx.onclick = debounce(delivery, 1000)\n```\n\n# 技能 CD\n\n依旧举个例子，lol 中某英雄的技能 CD 是 10s，ta 至少每隔 10 秒才能放同一个技能。\n\n用代码表示就是这样的\n\n```html\n<button id=\"xxx\">施放 Q 技能</button>\n```\n\n```javascript\nvar throttle = function (callback, delay) {\n  var fired = false\n  return function () {\n    if (!fired) {\n      fired = true\n      callback()\n      var timer = setTimeout(() => {\n        fired = false\n      }, delay)\n    }\n  }\n}\n\nfunction fire() {\n  console.log('施放了 Q 技能')\n}\n\nxxx.onclick = throttle(fire, 10000)\n```\n\n两种方式都使用了闭包，但只是简单的实现，目前 lodash 和 underscore 这两个 js 库都对以上方法进行了封装，功能也更完善。\n","slug":"函数节流","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxo001zk4u9a8ubhsbn","content":"<p>有些事件，如 <code>onresize</code> 事件，高频更改可能导致浏览器崩溃。为了绕开这个问题，可以使用定时器对该函数进行节流。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"屯着一起送\"><a href=\"#屯着一起送\" class=\"headerlink\" title=\"屯着一起送\"></a>屯着一起送</h1><p>举个例子，小明去送外卖，收到订单后，不会马上去送，而是等个 1 分钟，5 分钟内如果又有订单，就再等着，直到 5 分钟内没有新的订单。</p>\n<p>用代码表示就是这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;xxx&quot;</span>&gt;</span>送外卖<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">      callback()</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delivery</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我去送外卖了&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xxx.onclick = debounce(delivery, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"技能-CD\"><a href=\"#技能-CD\" class=\"headerlink\" title=\"技能 CD\"></a>技能 CD</h1><p>依旧举个例子，lol 中某英雄的技能 CD 是 10s，ta 至少每隔 10 秒才能放同一个技能。</p>\n<p>用代码表示就是这样的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;xxx&quot;</span>&gt;</span>施放 Q 技能<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fired = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fired) &#123;</span><br><span class=\"line\">      fired = <span class=\"literal\">true</span></span><br><span class=\"line\">      callback()</span><br><span class=\"line\">      <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        fired = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fire</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;施放了 Q 技能&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xxx.onclick = throttle(fire, <span class=\"number\">10000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>两种方式都使用了闭包，但只是简单的实现，目前 lodash 和 underscore 这两个 js 库都对以上方法进行了封装，功能也更完善。</p>\n","site":{"data":{}},"excerpt":"<p>有些事件，如 <code>onresize</code> 事件，高频更改可能导致浏览器崩溃。为了绕开这个问题，可以使用定时器对该函数进行节流。</p>","more":"<h1 id=\"屯着一起送\"><a href=\"#屯着一起送\" class=\"headerlink\" title=\"屯着一起送\"></a>屯着一起送</h1><p>举个例子，小明去送外卖，收到订单后，不会马上去送，而是等个 1 分钟，5 分钟内如果又有订单，就再等着，直到 5 分钟内没有新的订单。</p>\n<p>用代码表示就是这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;xxx&quot;</span>&gt;</span>送外卖<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">      callback()</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delivery</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我去送外卖了&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xxx.onclick = debounce(delivery, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"技能-CD\"><a href=\"#技能-CD\" class=\"headerlink\" title=\"技能 CD\"></a>技能 CD</h1><p>依旧举个例子，lol 中某英雄的技能 CD 是 10s，ta 至少每隔 10 秒才能放同一个技能。</p>\n<p>用代码表示就是这样的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;xxx&quot;</span>&gt;</span>施放 Q 技能<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fired = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fired) &#123;</span><br><span class=\"line\">      fired = <span class=\"literal\">true</span></span><br><span class=\"line\">      callback()</span><br><span class=\"line\">      <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        fired = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fire</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;施放了 Q 技能&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xxx.onclick = throttle(fire, <span class=\"number\">10000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>两种方式都使用了闭包，但只是简单的实现，目前 lodash 和 underscore 这两个 js 库都对以上方法进行了封装，功能也更完善。</p>"},{"title":"初识jQuery","date":"2018-12-10T16:00:00.000Z","updated":"2018-12-10T16:00:00.000Z","_content":"\njQuery 的思路：\n\n1. 接收一个选择器\n2. 将选择的元素封装成一个伪数组\n3. 对伪数组封装了几个 API\n4. 返回这个伪数组\n\n<!-- more -->\n\n版本一\n\n```javascript\n<div>内容</div>\n<div>内容</div>\n<div>内容</div>\n<div>内容</div>\n<div>内容</div>\n\n<script>\nwindow.jQuery = function(node){\n  var nodes = document.querySelectorAll(node)//nodes是个伪数组，用户以为操作的是node，其实是伪数组nodes\n\n  return {//返回addClass、setText两个方法\n    addClass: function(cls){\n      nodes.forEach(function(value,key){\n       nodes[key].classList.add(cls)\n      })//nodes和函数形成了一个闭包\n    },\n    setText: function(text){\n    nodes.forEach(function(value,key){\n       nodes[key].textContent = text\n      })\n    }\n  }\n}\nwindow.$ = jQuery //全局可以使用$符号\n\nvar $div = $('div')//$div就有addClass、setText两个方法\n$div.addClass('red') // 可将所有 div 的 class 添加一个 red\n$div.setText('hi') // 可将所有 div 的 textContent 变为 hi\n\n</script>\n```\n\n版本二\n\n将方法绑定在 nodes 上，返回一个 nodes\n\n```javascript\nwindow.jQuery = function (node) {\n  var nodes = document.querySelectorAll(node)\n\n  nodes.addClass = function (cls) {\n    nodes.forEach(function (value, key) {\n      nodes[key].classList.add(cls)\n    })\n  }\n\n  nodes.setText = function (text) {\n    nodes.forEach(function (value, key) {\n      nodes[key].textContent = text\n    })\n  }\n\n  return nodes\n}\n```\n\n> 引用\n\n[JS 中的闭包是什么？](https://zhuanlan.zhihu.com/p/22486908)\n","source":"_posts/初识JQuery.md","raw":"---\ntitle: 初识jQuery\ndate: 2018-12-11 00:00:00\nupdated: 2018-12-11 00:00:00\ntags:\n  - jQuery\n---\n\njQuery 的思路：\n\n1. 接收一个选择器\n2. 将选择的元素封装成一个伪数组\n3. 对伪数组封装了几个 API\n4. 返回这个伪数组\n\n<!-- more -->\n\n版本一\n\n```javascript\n<div>内容</div>\n<div>内容</div>\n<div>内容</div>\n<div>内容</div>\n<div>内容</div>\n\n<script>\nwindow.jQuery = function(node){\n  var nodes = document.querySelectorAll(node)//nodes是个伪数组，用户以为操作的是node，其实是伪数组nodes\n\n  return {//返回addClass、setText两个方法\n    addClass: function(cls){\n      nodes.forEach(function(value,key){\n       nodes[key].classList.add(cls)\n      })//nodes和函数形成了一个闭包\n    },\n    setText: function(text){\n    nodes.forEach(function(value,key){\n       nodes[key].textContent = text\n      })\n    }\n  }\n}\nwindow.$ = jQuery //全局可以使用$符号\n\nvar $div = $('div')//$div就有addClass、setText两个方法\n$div.addClass('red') // 可将所有 div 的 class 添加一个 red\n$div.setText('hi') // 可将所有 div 的 textContent 变为 hi\n\n</script>\n```\n\n版本二\n\n将方法绑定在 nodes 上，返回一个 nodes\n\n```javascript\nwindow.jQuery = function (node) {\n  var nodes = document.querySelectorAll(node)\n\n  nodes.addClass = function (cls) {\n    nodes.forEach(function (value, key) {\n      nodes[key].classList.add(cls)\n    })\n  }\n\n  nodes.setText = function (text) {\n    nodes.forEach(function (value, key) {\n      nodes[key].textContent = text\n    })\n  }\n\n  return nodes\n}\n```\n\n> 引用\n\n[JS 中的闭包是什么？](https://zhuanlan.zhihu.com/p/22486908)\n","slug":"初识JQuery","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxo0021k4u9fp3n5wnd","content":"<p>jQuery 的思路：</p>\n<ol>\n<li>接收一个选择器</li>\n<li>将选择的元素封装成一个伪数组</li>\n<li>对伪数组封装了几个 API</li>\n<li>返回这个伪数组</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>版本一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;内容&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"built_in\">window</span>.jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(node)<span class=\"comment\">//nodes是个伪数组，用户以为操作的是node，其实是伪数组nodes</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">return</span> &#123;<span class=\"comment\">//返回addClass、setText两个方法</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">addClass</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      nodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,key</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       nodes[key].classList.add(cls)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;)<span class=\"comment\">//nodes和函数形成了一个闭包</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">setText</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    nodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,key</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       nodes[key].textContent = text</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"built_in\">window</span>.$ = jQuery <span class=\"comment\">//全局可以使用$符号</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> $div = $(<span class=\"string\">&#x27;div&#x27;</span>)<span class=\"comment\">//$div就有addClass、setText两个方法</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">$div.addClass(<span class=\"string\">&#x27;red&#x27;</span>) <span class=\"comment\">// 可将所有 div 的 class 添加一个 red</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">$div.setText(<span class=\"string\">&#x27;hi&#x27;</span>) <span class=\"comment\">// 可将所有 div 的 textContent 变为 hi</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>版本二</p>\n<p>将方法绑定在 nodes 上，返回一个 nodes</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.jQuery = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(node)</span><br><span class=\"line\"></span><br><span class=\"line\">  nodes.addClass = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\">    nodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">      nodes[key].classList.add(cls)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  nodes.setText = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    nodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">      nodes[key].textContent = text</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/22486908\">JS 中的闭包是什么？</a></p>\n","site":{"data":{}},"excerpt":"<p>jQuery 的思路：</p>\n<ol>\n<li>接收一个选择器</li>\n<li>将选择的元素封装成一个伪数组</li>\n<li>对伪数组封装了几个 API</li>\n<li>返回这个伪数组</li>\n</ol>","more":"<p>版本一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;内容&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"built_in\">window</span>.jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(node)<span class=\"comment\">//nodes是个伪数组，用户以为操作的是node，其实是伪数组nodes</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">return</span> &#123;<span class=\"comment\">//返回addClass、setText两个方法</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">addClass</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      nodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,key</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       nodes[key].classList.add(cls)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;)<span class=\"comment\">//nodes和函数形成了一个闭包</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">setText</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    nodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,key</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       nodes[key].textContent = text</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"built_in\">window</span>.$ = jQuery <span class=\"comment\">//全局可以使用$符号</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> $div = $(<span class=\"string\">&#x27;div&#x27;</span>)<span class=\"comment\">//$div就有addClass、setText两个方法</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">$div.addClass(<span class=\"string\">&#x27;red&#x27;</span>) <span class=\"comment\">// 可将所有 div 的 class 添加一个 red</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">$div.setText(<span class=\"string\">&#x27;hi&#x27;</span>) <span class=\"comment\">// 可将所有 div 的 textContent 变为 hi</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>版本二</p>\n<p>将方法绑定在 nodes 上，返回一个 nodes</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.jQuery = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(node)</span><br><span class=\"line\"></span><br><span class=\"line\">  nodes.addClass = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\">    nodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">      nodes[key].classList.add(cls)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  nodes.setText = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    nodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">      nodes[key].textContent = text</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/22486908\">JS 中的闭包是什么？</a></p>"},{"title":"原型与原型链","date":"2018-11-27T16:00:00.000Z","updated":"2018-11-27T16:00:00.000Z","_content":"\n# 什么是原型\n\n在 javascript 中，全局函数`Number`、`String`、`Boolean`、`Object`等，都有`toSting()`、`valueOf()`等方法，倘若每个函数都独自定义这些相同的属性和方法，势必对内存造成极大的浪费。因此这些相同的属性和方法，都被集合到一起，对象可通过`__proto__`属性访问这些共用属性`prototype`，比如：\n\n<!-- more -->\n\n```javascript\nvar n = new Number(1)\nvar obj = {}\nobj.__proto__ === Object.prototype //true obj共用Object的属性\nn.__proto__ === Number.prototype //true，n共用Number的属性\nNumber.prototype.__proto__ === Object.prototype //true，Number.prototype 本身也是个对象，共用Object的属性\nvar s = new String('hi')\ns.__proto__ === String.prototype //true\n```\n\n有几点需要注意：\n\n`var 对象 = new 函数()`\n\n`对象.__proto__ === 对象的构造函数.prototype`\n\n```javascript\nNumber.__proto__ === Function.prototype // true,因为 Number 是 Function 的实例\nObject.__proto__ === Function.prototype // true,因为 Object 是 Function 的实例\nFunction.__proto__ === Function.prototye // true,因为 Function 是 Function 的实例！\nObject.__proto__ === Function.__proto__ // true,因为 Function.__proto__ === Function.prototye\n```\n\n# 什么是原型链\n\n每个实例对象（object ）都有一个私有属性（称之为**proto**）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象(**proto**) ，层层向上直到一个对象的原型对象为 null。这种链式结构，称之为原型链\n\n![原型链](https://jiangnana.fun/test/%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg)\n","source":"_posts/原型与原型链.md","raw":"---\ntitle: 原型与原型链\ndate: 2018-11-28 00:00:00\nupdated: 2018-11-28 00:00:00\ntags:\n  - JavaScript\n  - 原型链\n  - 原型\n---\n\n# 什么是原型\n\n在 javascript 中，全局函数`Number`、`String`、`Boolean`、`Object`等，都有`toSting()`、`valueOf()`等方法，倘若每个函数都独自定义这些相同的属性和方法，势必对内存造成极大的浪费。因此这些相同的属性和方法，都被集合到一起，对象可通过`__proto__`属性访问这些共用属性`prototype`，比如：\n\n<!-- more -->\n\n```javascript\nvar n = new Number(1)\nvar obj = {}\nobj.__proto__ === Object.prototype //true obj共用Object的属性\nn.__proto__ === Number.prototype //true，n共用Number的属性\nNumber.prototype.__proto__ === Object.prototype //true，Number.prototype 本身也是个对象，共用Object的属性\nvar s = new String('hi')\ns.__proto__ === String.prototype //true\n```\n\n有几点需要注意：\n\n`var 对象 = new 函数()`\n\n`对象.__proto__ === 对象的构造函数.prototype`\n\n```javascript\nNumber.__proto__ === Function.prototype // true,因为 Number 是 Function 的实例\nObject.__proto__ === Function.prototype // true,因为 Object 是 Function 的实例\nFunction.__proto__ === Function.prototye // true,因为 Function 是 Function 的实例！\nObject.__proto__ === Function.__proto__ // true,因为 Function.__proto__ === Function.prototye\n```\n\n# 什么是原型链\n\n每个实例对象（object ）都有一个私有属性（称之为**proto**）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象(**proto**) ，层层向上直到一个对象的原型对象为 null。这种链式结构，称之为原型链\n\n![原型链](https://jiangnana.fun/test/%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg)\n","slug":"原型与原型链","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxq0023k4u95ugb5me2","content":"<h1 id=\"什么是原型\"><a href=\"#什么是原型\" class=\"headerlink\" title=\"什么是原型\"></a>什么是原型</h1><p>在 javascript 中，全局函数<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Object</code>等，都有<code>toSting()</code>、<code>valueOf()</code>等方法，倘若每个函数都独自定义这些相同的属性和方法，势必对内存造成极大的浪费。因此这些相同的属性和方法，都被集合到一起，对象可通过<code>__proto__</code>属性访问这些共用属性<code>prototype</code>，比如：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">obj.__proto__ === <span class=\"built_in\">Object</span>.prototype <span class=\"comment\">//true obj共用Object的属性</span></span><br><span class=\"line\">n.__proto__ === <span class=\"built_in\">Number</span>.prototype <span class=\"comment\">//true，n共用Number的属性</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype <span class=\"comment\">//true，Number.prototype 本身也是个对象，共用Object的属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;hi&#x27;</span>)</span><br><span class=\"line\">s.__proto__ === <span class=\"built_in\">String</span>.prototype <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>有几点需要注意：</p>\n<p><code>var 对象 = new 函数()</code></p>\n<p><code>对象.__proto__ === 对象的构造函数.prototype</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype <span class=\"comment\">// true,因为 Number 是 Function 的实例</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype <span class=\"comment\">// true,因为 Object 是 Function 的实例</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.__proto__ === <span class=\"built_in\">Function</span>.prototye <span class=\"comment\">// true,因为 Function 是 Function 的实例！</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.__proto__ <span class=\"comment\">// true,因为 Function.__proto__ === Function.prototye</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"什么是原型链\"><a href=\"#什么是原型链\" class=\"headerlink\" title=\"什么是原型链\"></a>什么是原型链</h1><p>每个实例对象（object ）都有一个私有属性（称之为<strong>proto</strong>）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象(<strong>proto</strong>) ，层层向上直到一个对象的原型对象为 null。这种链式结构，称之为原型链</p>\n<p><img src=\"https://jiangnana.fun/test/%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg\" alt=\"原型链\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是原型\"><a href=\"#什么是原型\" class=\"headerlink\" title=\"什么是原型\"></a>什么是原型</h1><p>在 javascript 中，全局函数<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Object</code>等，都有<code>toSting()</code>、<code>valueOf()</code>等方法，倘若每个函数都独自定义这些相同的属性和方法，势必对内存造成极大的浪费。因此这些相同的属性和方法，都被集合到一起，对象可通过<code>__proto__</code>属性访问这些共用属性<code>prototype</code>，比如：</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">obj.__proto__ === <span class=\"built_in\">Object</span>.prototype <span class=\"comment\">//true obj共用Object的属性</span></span><br><span class=\"line\">n.__proto__ === <span class=\"built_in\">Number</span>.prototype <span class=\"comment\">//true，n共用Number的属性</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype <span class=\"comment\">//true，Number.prototype 本身也是个对象，共用Object的属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;hi&#x27;</span>)</span><br><span class=\"line\">s.__proto__ === <span class=\"built_in\">String</span>.prototype <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>有几点需要注意：</p>\n<p><code>var 对象 = new 函数()</code></p>\n<p><code>对象.__proto__ === 对象的构造函数.prototype</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype <span class=\"comment\">// true,因为 Number 是 Function 的实例</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype <span class=\"comment\">// true,因为 Object 是 Function 的实例</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.__proto__ === <span class=\"built_in\">Function</span>.prototye <span class=\"comment\">// true,因为 Function 是 Function 的实例！</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.__proto__ <span class=\"comment\">// true,因为 Function.__proto__ === Function.prototye</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"什么是原型链\"><a href=\"#什么是原型链\" class=\"headerlink\" title=\"什么是原型链\"></a>什么是原型链</h1><p>每个实例对象（object ）都有一个私有属性（称之为<strong>proto</strong>）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象(<strong>proto</strong>) ，层层向上直到一个对象的原型对象为 null。这种链式结构，称之为原型链</p>\n<p><img src=\"https://jiangnana.fun/test/%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg\" alt=\"原型链\"></p>"},{"title":"堆排序代码分析","date":"2018-10-31T16:00:00.000Z","updated":"2018-10-31T16:00:00.000Z","_content":"\n```javascript\nfunction heapSort(array) {\n  //交换i，j的位置\n  function swap(array, i, j) {\n    var temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n  }\n  //比较当前节点与子节点的大小，形成一个最大堆\n  function maxHeapify(array, index, heapSize) {\n    var iMax, iLeft, iRight\n    while (true) {\n      iMax = index //默认父元素最大\n      iLeft = 2 * index + 1 //根据父节点的索引，计算出左子节点的索引\n      iRight = 2 * (index + 1)\n      if (iLeft < heapSize && array[index] < array[iLeft]) {\n        //iLeft < heapSize说明还未到叶节点，然后才比较值的大小\n        iMax = iLeft\n      }\n      if (iRight < heapSize && array[iMax] < array[iRight]) {\n        iMax = iRight\n      }\n      //如果最大值的索引发生了改变，则交换二者的位置，使符合最大堆定义，因为子节点的值发生了改变，子节点下面的值需要重新排序。\n      if (iMax != index) {\n        swap(array, iMax, index)\n        index = iMax\n      } else {\n        break\n      }\n    }\n  }\n  //将数组构造成最大堆\n  function buildMaxHeap(array) {\n    var i,\n      iParent = Math.floor(array.length / 2) - 1 //根据传来数组，计算最后一个元素其父节点的位置\n    for (i = iParent; i >= 0; i--) {\n      //从下往上，构造最大堆；\n      maxHeapify(array, i, array.length)\n    }\n  }\n  //\n  function sort(array) {\n    buildMaxHeap(array)\n    for (var i = array.length - 1; i > 0; i--) {\n      swap(array, 0, i) //将第一项和最后一项交换位置\n      maxHeapify(array, 0, i) //因为根节点元素发生了改变，重新构造最大堆,0-i,后面是排好序的元素\n    }\n    return array\n  }\n  //返回排序好的数组\n  return sort(array)\n}\n```\n\n<!-- more -->\n\n> 引用\n\n- [常见排序算法 - 堆排序 (Heap Sort)](http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/)\n","source":"_posts/堆排序代码分析.md","raw":"---\ntitle: 堆排序代码分析\ndate: 2018-11-01 00:00:00\nupdated: 2018-11-01 00:00:00\ntags:\n  - 算法\n  - 排序\n  - JavaScript\n---\n\n```javascript\nfunction heapSort(array) {\n  //交换i，j的位置\n  function swap(array, i, j) {\n    var temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n  }\n  //比较当前节点与子节点的大小，形成一个最大堆\n  function maxHeapify(array, index, heapSize) {\n    var iMax, iLeft, iRight\n    while (true) {\n      iMax = index //默认父元素最大\n      iLeft = 2 * index + 1 //根据父节点的索引，计算出左子节点的索引\n      iRight = 2 * (index + 1)\n      if (iLeft < heapSize && array[index] < array[iLeft]) {\n        //iLeft < heapSize说明还未到叶节点，然后才比较值的大小\n        iMax = iLeft\n      }\n      if (iRight < heapSize && array[iMax] < array[iRight]) {\n        iMax = iRight\n      }\n      //如果最大值的索引发生了改变，则交换二者的位置，使符合最大堆定义，因为子节点的值发生了改变，子节点下面的值需要重新排序。\n      if (iMax != index) {\n        swap(array, iMax, index)\n        index = iMax\n      } else {\n        break\n      }\n    }\n  }\n  //将数组构造成最大堆\n  function buildMaxHeap(array) {\n    var i,\n      iParent = Math.floor(array.length / 2) - 1 //根据传来数组，计算最后一个元素其父节点的位置\n    for (i = iParent; i >= 0; i--) {\n      //从下往上，构造最大堆；\n      maxHeapify(array, i, array.length)\n    }\n  }\n  //\n  function sort(array) {\n    buildMaxHeap(array)\n    for (var i = array.length - 1; i > 0; i--) {\n      swap(array, 0, i) //将第一项和最后一项交换位置\n      maxHeapify(array, 0, i) //因为根节点元素发生了改变，重新构造最大堆,0-i,后面是排好序的元素\n    }\n    return array\n  }\n  //返回排序好的数组\n  return sort(array)\n}\n```\n\n<!-- more -->\n\n> 引用\n\n- [常见排序算法 - 堆排序 (Heap Sort)](http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/)\n","slug":"堆排序代码分析","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxs0025k4u9ffohcyv3","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//交换i，j的位置</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">array, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = array[i]</span><br><span class=\"line\">    array[i] = array[j]</span><br><span class=\"line\">    array[j] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//比较当前节点与子节点的大小，形成一个最大堆</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxHeapify</span>(<span class=\"params\">array, index, heapSize</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iMax, iLeft, iRight</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      iMax = index <span class=\"comment\">//默认父元素最大</span></span><br><span class=\"line\">      iLeft = <span class=\"number\">2</span> * index + <span class=\"number\">1</span> <span class=\"comment\">//根据父节点的索引，计算出左子节点的索引</span></span><br><span class=\"line\">      iRight = <span class=\"number\">2</span> * (index + <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (iLeft &lt; heapSize &amp;&amp; array[index] &lt; array[iLeft]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//iLeft &lt; heapSize说明还未到叶节点，然后才比较值的大小</span></span><br><span class=\"line\">        iMax = iLeft</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (iRight &lt; heapSize &amp;&amp; array[iMax] &lt; array[iRight]) &#123;</span><br><span class=\"line\">        iMax = iRight</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//如果最大值的索引发生了改变，则交换二者的位置，使符合最大堆定义，因为子节点的值发生了改变，子节点下面的值需要重新排序。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (iMax != index) &#123;</span><br><span class=\"line\">        swap(array, iMax, index)</span><br><span class=\"line\">        index = iMax</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//将数组构造成最大堆</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMaxHeap</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i,</span><br><span class=\"line\">      iParent = <span class=\"built_in\">Math</span>.floor(array.length / <span class=\"number\">2</span>) - <span class=\"number\">1</span> <span class=\"comment\">//根据传来数组，计算最后一个元素其父节点的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = iParent; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//从下往上，构造最大堆；</span></span><br><span class=\"line\">      maxHeapify(array, i, array.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    buildMaxHeap(array)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = array.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      swap(array, <span class=\"number\">0</span>, i) <span class=\"comment\">//将第一项和最后一项交换位置</span></span><br><span class=\"line\">      maxHeapify(array, <span class=\"number\">0</span>, i) <span class=\"comment\">//因为根节点元素发生了改变，重新构造最大堆,0-i,后面是排好序的元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//返回排序好的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sort(array)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/\">常见排序算法 - 堆排序 (Heap Sort)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//交换i，j的位置</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">array, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = array[i]</span><br><span class=\"line\">    array[i] = array[j]</span><br><span class=\"line\">    array[j] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//比较当前节点与子节点的大小，形成一个最大堆</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxHeapify</span>(<span class=\"params\">array, index, heapSize</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iMax, iLeft, iRight</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      iMax = index <span class=\"comment\">//默认父元素最大</span></span><br><span class=\"line\">      iLeft = <span class=\"number\">2</span> * index + <span class=\"number\">1</span> <span class=\"comment\">//根据父节点的索引，计算出左子节点的索引</span></span><br><span class=\"line\">      iRight = <span class=\"number\">2</span> * (index + <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (iLeft &lt; heapSize &amp;&amp; array[index] &lt; array[iLeft]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//iLeft &lt; heapSize说明还未到叶节点，然后才比较值的大小</span></span><br><span class=\"line\">        iMax = iLeft</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (iRight &lt; heapSize &amp;&amp; array[iMax] &lt; array[iRight]) &#123;</span><br><span class=\"line\">        iMax = iRight</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//如果最大值的索引发生了改变，则交换二者的位置，使符合最大堆定义，因为子节点的值发生了改变，子节点下面的值需要重新排序。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (iMax != index) &#123;</span><br><span class=\"line\">        swap(array, iMax, index)</span><br><span class=\"line\">        index = iMax</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//将数组构造成最大堆</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMaxHeap</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i,</span><br><span class=\"line\">      iParent = <span class=\"built_in\">Math</span>.floor(array.length / <span class=\"number\">2</span>) - <span class=\"number\">1</span> <span class=\"comment\">//根据传来数组，计算最后一个元素其父节点的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = iParent; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//从下往上，构造最大堆；</span></span><br><span class=\"line\">      maxHeapify(array, i, array.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    buildMaxHeap(array)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = array.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      swap(array, <span class=\"number\">0</span>, i) <span class=\"comment\">//将第一项和最后一项交换位置</span></span><br><span class=\"line\">      maxHeapify(array, <span class=\"number\">0</span>, i) <span class=\"comment\">//因为根节点元素发生了改变，重新构造最大堆,0-i,后面是排好序的元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//返回排序好的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sort(array)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/\">常见排序算法 - 堆排序 (Heap Sort)</a></li>\n</ul>"},{"title":"多个迭代器","date":"2021-02-18T16:00:00.000Z","updated":"2021-02-18T16:00:00.000Z","_content":"\n多个迭代器彼此交替运行的时候，不同的顺序，`yield` 的位置，都可能有不同的输出。\n\n<!-- more -->\n\n先知道生成器里的两个概念，方便我们理解计算下面几个例子：\n\n    1. yield 表达式本身没有返回值，或者说总是返回 undefined；\n    2. next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n\n《你不知道的 JavaScript（中卷）》有个例子：\n\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器1\" src=\"https://codepen.io/quietdw/embed/wvoeEgp?height=412&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/wvoeEgp'>多个生成器1</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n自己算，结果出来了，很快啊。\n\n然后第二个例子：\n\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器2\" src=\"https://codepen.io/quietdw/embed/yLVXxrd?height=416&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/yLVXxrd'>多个生成器2</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n最后一次输出怎么是 `12, 18` 呢，不是 `12, 24` 吗？\n\n发现有一行代码 `b = a * (yield 2)`\n\n> 大胆猜测：会不会是因为这里的 `a` 此时还是之前运行到这一步已近确定结果的 `a` 呢？\n\n我们把代码再改一下，验证一下：\n\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器3\" src=\"https://codepen.io/quietdw/embed/XWNgxrX?height=411&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/XWNgxrX'>多个生成器3</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n发现果然如此！\n","source":"_posts/多个迭代器.md","raw":"---\ntitle: 多个迭代器\ndate: 2021-02-19 00:00:00\nupdated: 2021-02-19 00:00:00\ntags:\n  - 迭代器\n---\n\n多个迭代器彼此交替运行的时候，不同的顺序，`yield` 的位置，都可能有不同的输出。\n\n<!-- more -->\n\n先知道生成器里的两个概念，方便我们理解计算下面几个例子：\n\n    1. yield 表达式本身没有返回值，或者说总是返回 undefined；\n    2. next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n\n《你不知道的 JavaScript（中卷）》有个例子：\n\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器1\" src=\"https://codepen.io/quietdw/embed/wvoeEgp?height=412&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/wvoeEgp'>多个生成器1</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n自己算，结果出来了，很快啊。\n\n然后第二个例子：\n\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器2\" src=\"https://codepen.io/quietdw/embed/yLVXxrd?height=416&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/yLVXxrd'>多个生成器2</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n最后一次输出怎么是 `12, 18` 呢，不是 `12, 24` 吗？\n\n发现有一行代码 `b = a * (yield 2)`\n\n> 大胆猜测：会不会是因为这里的 `a` 此时还是之前运行到这一步已近确定结果的 `a` 呢？\n\n我们把代码再改一下，验证一下：\n\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器3\" src=\"https://codepen.io/quietdw/embed/XWNgxrX?height=411&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/XWNgxrX'>多个生成器3</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n发现果然如此！\n","slug":"多个迭代器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxt0027k4u99qhbdjcb","content":"<p>多个迭代器彼此交替运行的时候，不同的顺序，<code>yield</code> 的位置，都可能有不同的输出。</p>\n<span id=\"more\"></span>\n\n<p>先知道生成器里的两个概念，方便我们理解计算下面几个例子：</p>\n<pre><code>1. yield 表达式本身没有返回值，或者说总是返回 undefined；\n2. next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n</code></pre>\n<p>《你不知道的 JavaScript（中卷）》有个例子：</p>\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器1\" src=\"https://codepen.io/quietdw/embed/wvoeEgp?height=412&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/wvoeEgp'>多个生成器1</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<p>自己算，结果出来了，很快啊。</p>\n<p>然后第二个例子：</p>\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器2\" src=\"https://codepen.io/quietdw/embed/yLVXxrd?height=416&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/yLVXxrd'>多个生成器2</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<p>最后一次输出怎么是 <code>12, 18</code> 呢，不是 <code>12, 24</code> 吗？</p>\n<p>发现有一行代码 <code>b = a * (yield 2)</code></p>\n<blockquote>\n<p>大胆猜测：会不会是因为这里的 <code>a</code> 此时还是之前运行到这一步已近确定结果的 <code>a</code> 呢？</p>\n</blockquote>\n<p>我们把代码再改一下，验证一下：</p>\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器3\" src=\"https://codepen.io/quietdw/embed/XWNgxrX?height=411&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/XWNgxrX'>多个生成器3</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<p>发现果然如此！</p>\n","site":{"data":{}},"excerpt":"<p>多个迭代器彼此交替运行的时候，不同的顺序，<code>yield</code> 的位置，都可能有不同的输出。</p>","more":"<p>先知道生成器里的两个概念，方便我们理解计算下面几个例子：</p>\n<pre><code>1. yield 表达式本身没有返回值，或者说总是返回 undefined；\n2. next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n</code></pre>\n<p>《你不知道的 JavaScript（中卷）》有个例子：</p>\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器1\" src=\"https://codepen.io/quietdw/embed/wvoeEgp?height=412&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/wvoeEgp'>多个生成器1</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<p>自己算，结果出来了，很快啊。</p>\n<p>然后第二个例子：</p>\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器2\" src=\"https://codepen.io/quietdw/embed/yLVXxrd?height=416&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/yLVXxrd'>多个生成器2</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<p>最后一次输出怎么是 <code>12, 18</code> 呢，不是 <code>12, 24</code> 吗？</p>\n<p>发现有一行代码 <code>b = a * (yield 2)</code></p>\n<blockquote>\n<p>大胆猜测：会不会是因为这里的 <code>a</code> 此时还是之前运行到这一步已近确定结果的 <code>a</code> 呢？</p>\n</blockquote>\n<p>我们把代码再改一下，验证一下：</p>\n<iframe height=\"415\" style=\"width: 100%;\" scrolling=\"no\" title=\"多个生成器3\" src=\"https://codepen.io/quietdw/embed/XWNgxrX?height=411&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/quietdw/pen/XWNgxrX'>多个生成器3</a> by jiang\n  (<a href='https://codepen.io/quietdw'>@quietdw</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<p>发现果然如此！</p>"},{"title":"如何发布npm包","date":"2019-03-26T16:00:00.000Z","updated":"2019-03-26T16:00:00.000Z","_content":"\n最近在造轮子的过程中，需要将本地的代码发布到 npm 上，方便他人使用。写一篇博客方便以后查阅。\n\n<!-- more -->\n\n# 发布\n\n1. 在根目录建立 index.js 的文件，需与 package.json 中 main 的值一致。\n\n2. 将写好的组件导入到 index.js 中，形如：\n\n```JavaScript\nimport Component from \"dist\"\n```\n\n3. 如报错提示不支持 import 的语法， 可在使用 parcel\n   `mpx parcel build index.js --no-minify --no-cache` 将文件转移成兼容版本。\n\n4. 上传\n\n- 第一次发布前需要使用 `npm adduser` 添加在 npm 上注册的用户名；\n- `npm publish` 发布。\n\n# 测试包\n\n在包发布以后，每次包升级，需要测试。如果每次上传，都本地安装测试，会比较麻烦，而且不利于用户使用。\n\n1. 在项目处使用 `npm link`；\n\n2. 测试目录使用 `npm link 包的名字`。\n","source":"_posts/如何发布npm包.md","raw":"---\ntitle: 如何发布npm包\ndate: 2019-03-27 00:00:00\nupdated: 2019-03-27 00:00:00\ntags:\n  - npm\n---\n\n最近在造轮子的过程中，需要将本地的代码发布到 npm 上，方便他人使用。写一篇博客方便以后查阅。\n\n<!-- more -->\n\n# 发布\n\n1. 在根目录建立 index.js 的文件，需与 package.json 中 main 的值一致。\n\n2. 将写好的组件导入到 index.js 中，形如：\n\n```JavaScript\nimport Component from \"dist\"\n```\n\n3. 如报错提示不支持 import 的语法， 可在使用 parcel\n   `mpx parcel build index.js --no-minify --no-cache` 将文件转移成兼容版本。\n\n4. 上传\n\n- 第一次发布前需要使用 `npm adduser` 添加在 npm 上注册的用户名；\n- `npm publish` 发布。\n\n# 测试包\n\n在包发布以后，每次包升级，需要测试。如果每次上传，都本地安装测试，会比较麻烦，而且不利于用户使用。\n\n1. 在项目处使用 `npm link`；\n\n2. 测试目录使用 `npm link 包的名字`。\n","slug":"如何发布npm包","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxu0028k4u9f9lm4xkp","content":"<p>最近在造轮子的过程中，需要将本地的代码发布到 npm 上，方便他人使用。写一篇博客方便以后查阅。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><ol>\n<li><p>在根目录建立 index.js 的文件，需与 package.json 中 main 的值一致。</p>\n</li>\n<li><p>将写好的组件导入到 index.js 中，形如：</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">&quot;dist&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>如报错提示不支持 import 的语法， 可在使用 parcel<br><code>mpx parcel build index.js --no-minify --no-cache</code> 将文件转移成兼容版本。</p>\n</li>\n<li><p>上传</p>\n</li>\n</ol>\n<ul>\n<li>第一次发布前需要使用 <code>npm adduser</code> 添加在 npm 上注册的用户名；</li>\n<li><code>npm publish</code> 发布。</li>\n</ul>\n<h1 id=\"测试包\"><a href=\"#测试包\" class=\"headerlink\" title=\"测试包\"></a>测试包</h1><p>在包发布以后，每次包升级，需要测试。如果每次上传，都本地安装测试，会比较麻烦，而且不利于用户使用。</p>\n<ol>\n<li><p>在项目处使用 <code>npm link</code>；</p>\n</li>\n<li><p>测试目录使用 <code>npm link 包的名字</code>。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>最近在造轮子的过程中，需要将本地的代码发布到 npm 上，方便他人使用。写一篇博客方便以后查阅。</p>","more":"<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><ol>\n<li><p>在根目录建立 index.js 的文件，需与 package.json 中 main 的值一致。</p>\n</li>\n<li><p>将写好的组件导入到 index.js 中，形如：</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">&quot;dist&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>如报错提示不支持 import 的语法， 可在使用 parcel<br><code>mpx parcel build index.js --no-minify --no-cache</code> 将文件转移成兼容版本。</p>\n</li>\n<li><p>上传</p>\n</li>\n</ol>\n<ul>\n<li>第一次发布前需要使用 <code>npm adduser</code> 添加在 npm 上注册的用户名；</li>\n<li><code>npm publish</code> 发布。</li>\n</ul>\n<h1 id=\"测试包\"><a href=\"#测试包\" class=\"headerlink\" title=\"测试包\"></a>测试包</h1><p>在包发布以后，每次包升级，需要测试。如果每次上传，都本地安装测试，会比较麻烦，而且不利于用户使用。</p>\n<ol>\n<li><p>在项目处使用 <code>npm link</code>；</p>\n</li>\n<li><p>测试目录使用 <code>npm link 包的名字</code>。</p>\n</li>\n</ol>"},{"title":"如何调试手机页面","date":"2019-02-20T16:00:00.000Z","updated":"2019-02-20T16:00:00.000Z","_content":"\n如何在手机端调试的时候输出报错信息呢？\n\n我这儿先写两种比较方便的方法。\n\n<!-- more -->\n\n# 处在同一个局域网\n\n手机连接和电脑同一个局域网的网络，如同一个路由器\n\n# 访问 PC 提供的 HTTP 服务\n\n如 http-server\n\n# 两种方法\n\n首先手机端是没 F12 可以按的，而且手机端也没控制台这个东西的。。\n\n有两种简单方法可以让程序员获取调试信息。\n\n## 使用`alert()`\n\n    手机端没有控制台，因而查看不到输出的信息。可用`alert()`直接弹出信息。\n\n## 重写`console`\n\n    重写`console`函数，简单的例子：\n\n```html\n<div id=\"consoleData\"></div>\n<script>\n  window.console = {\n    log(e) {\n      let p = document.createElement('p')\n      p.innerText = e\n      consoleData.appendChild(p)\n    }\n  }\n  window.onerror = function (message, file, row) {\n    console.log(message)\n    console.log(file)\n    console.log(row)\n  }\n</script>\n```\n\n    上面的例子通过重写console函数，将调试信息加载到页面中，同时也劫持了`window.onerror`函数，将页面的报错信息通过重写后的console.log()渲染到页面中，这样调试者也能看到调试信息\n\n    当然，肯定早有人知道这种方法，并且写的还贼好的。比如腾讯的[vconsole](https://github.com/Tencent/vConsole)，使用方法也非常简单，只要在页面中添加如下代码：\n\n```javascript\n   <script src=\"path/to/vconsole.min.js\"></script>\n   <script>\n   var vConsole = new VConsole();\n   </script>\n```\n\n# 注意事项！\n\n    记得调试后把调试代码都清理掉！！\n","source":"_posts/如何调试手机页面.md","raw":"---\ntitle: 如何调试手机页面\ndate: 2019-02-21 00:00:00\nupdated: 2019-02-21 00:00:00\ntags:\n  - console\n  - 手机端\n  - 调试\n---\n\n如何在手机端调试的时候输出报错信息呢？\n\n我这儿先写两种比较方便的方法。\n\n<!-- more -->\n\n# 处在同一个局域网\n\n手机连接和电脑同一个局域网的网络，如同一个路由器\n\n# 访问 PC 提供的 HTTP 服务\n\n如 http-server\n\n# 两种方法\n\n首先手机端是没 F12 可以按的，而且手机端也没控制台这个东西的。。\n\n有两种简单方法可以让程序员获取调试信息。\n\n## 使用`alert()`\n\n    手机端没有控制台，因而查看不到输出的信息。可用`alert()`直接弹出信息。\n\n## 重写`console`\n\n    重写`console`函数，简单的例子：\n\n```html\n<div id=\"consoleData\"></div>\n<script>\n  window.console = {\n    log(e) {\n      let p = document.createElement('p')\n      p.innerText = e\n      consoleData.appendChild(p)\n    }\n  }\n  window.onerror = function (message, file, row) {\n    console.log(message)\n    console.log(file)\n    console.log(row)\n  }\n</script>\n```\n\n    上面的例子通过重写console函数，将调试信息加载到页面中，同时也劫持了`window.onerror`函数，将页面的报错信息通过重写后的console.log()渲染到页面中，这样调试者也能看到调试信息\n\n    当然，肯定早有人知道这种方法，并且写的还贼好的。比如腾讯的[vconsole](https://github.com/Tencent/vConsole)，使用方法也非常简单，只要在页面中添加如下代码：\n\n```javascript\n   <script src=\"path/to/vconsole.min.js\"></script>\n   <script>\n   var vConsole = new VConsole();\n   </script>\n```\n\n# 注意事项！\n\n    记得调试后把调试代码都清理掉！！\n","slug":"如何调试手机页面","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxx002ak4u98tksdz0z","content":"<p>如何在手机端调试的时候输出报错信息呢？</p>\n<p>我这儿先写两种比较方便的方法。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"处在同一个局域网\"><a href=\"#处在同一个局域网\" class=\"headerlink\" title=\"处在同一个局域网\"></a>处在同一个局域网</h1><p>手机连接和电脑同一个局域网的网络，如同一个路由器</p>\n<h1 id=\"访问-PC-提供的-HTTP-服务\"><a href=\"#访问-PC-提供的-HTTP-服务\" class=\"headerlink\" title=\"访问 PC 提供的 HTTP 服务\"></a>访问 PC 提供的 HTTP 服务</h1><p>如 http-server</p>\n<h1 id=\"两种方法\"><a href=\"#两种方法\" class=\"headerlink\" title=\"两种方法\"></a>两种方法</h1><p>首先手机端是没 F12 可以按的，而且手机端也没控制台这个东西的。。</p>\n<p>有两种简单方法可以让程序员获取调试信息。</p>\n<h2 id=\"使用alert\"><a href=\"#使用alert\" class=\"headerlink\" title=\"使用alert()\"></a>使用<code>alert()</code></h2><pre><code>手机端没有控制台，因而查看不到输出的信息。可用`alert()`直接弹出信息。\n</code></pre>\n<h2 id=\"重写console\"><a href=\"#重写console\" class=\"headerlink\" title=\"重写console\"></a>重写<code>console</code></h2><pre><code>重写`console`函数，简单的例子：\n</code></pre>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;consoleData&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.console = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">log</span>(<span class=\"params\">e</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      p.innerText = e</span></span><br><span class=\"line\"><span class=\"javascript\">      consoleData.appendChild(p)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message, file, row</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(message)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(file)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(row)</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>上面的例子通过重写console函数，将调试信息加载到页面中，同时也劫持了`window.onerror`函数，将页面的报错信息通过重写后的console.log()渲染到页面中，这样调试者也能看到调试信息\n\n当然，肯定早有人知道这种方法，并且写的还贼好的。比如腾讯的[vconsole](https://github.com/Tencent/vConsole)，使用方法也非常简单，只要在页面中添加如下代码：\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;path/to/vconsole.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> vConsole = <span class=\"keyword\">new</span> VConsole();</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"注意事项！\"><a href=\"#注意事项！\" class=\"headerlink\" title=\"注意事项！\"></a>注意事项！</h1><pre><code>记得调试后把调试代码都清理掉！！\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>如何在手机端调试的时候输出报错信息呢？</p>\n<p>我这儿先写两种比较方便的方法。</p>","more":"<h1 id=\"处在同一个局域网\"><a href=\"#处在同一个局域网\" class=\"headerlink\" title=\"处在同一个局域网\"></a>处在同一个局域网</h1><p>手机连接和电脑同一个局域网的网络，如同一个路由器</p>\n<h1 id=\"访问-PC-提供的-HTTP-服务\"><a href=\"#访问-PC-提供的-HTTP-服务\" class=\"headerlink\" title=\"访问 PC 提供的 HTTP 服务\"></a>访问 PC 提供的 HTTP 服务</h1><p>如 http-server</p>\n<h1 id=\"两种方法\"><a href=\"#两种方法\" class=\"headerlink\" title=\"两种方法\"></a>两种方法</h1><p>首先手机端是没 F12 可以按的，而且手机端也没控制台这个东西的。。</p>\n<p>有两种简单方法可以让程序员获取调试信息。</p>\n<h2 id=\"使用alert\"><a href=\"#使用alert\" class=\"headerlink\" title=\"使用alert()\"></a>使用<code>alert()</code></h2><pre><code>手机端没有控制台，因而查看不到输出的信息。可用`alert()`直接弹出信息。\n</code></pre>\n<h2 id=\"重写console\"><a href=\"#重写console\" class=\"headerlink\" title=\"重写console\"></a>重写<code>console</code></h2><pre><code>重写`console`函数，简单的例子：\n</code></pre>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;consoleData&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.console = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">log</span>(<span class=\"params\">e</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      p.innerText = e</span></span><br><span class=\"line\"><span class=\"javascript\">      consoleData.appendChild(p)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message, file, row</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(message)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(file)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(row)</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>上面的例子通过重写console函数，将调试信息加载到页面中，同时也劫持了`window.onerror`函数，将页面的报错信息通过重写后的console.log()渲染到页面中，这样调试者也能看到调试信息\n\n当然，肯定早有人知道这种方法，并且写的还贼好的。比如腾讯的[vconsole](https://github.com/Tencent/vConsole)，使用方法也非常简单，只要在页面中添加如下代码：\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;path/to/vconsole.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> vConsole = <span class=\"keyword\">new</span> VConsole();</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"注意事项！\"><a href=\"#注意事项！\" class=\"headerlink\" title=\"注意事项！\"></a>注意事项！</h1><pre><code>记得调试后把调试代码都清理掉！！\n</code></pre>"},{"title":"实现极简版reactive","date":"2020-06-21T16:00:00.000Z","updated":"2020-06-21T16:00:00.000Z","_content":"\nVue3.0 出来有一段是时间了，趁着有点空，跟着大佬一起学习一下新的响应式系统。\n\n<!-- more -->\n\n为了收集数据依赖、以及在数据变化时更新视图，Vue2 通过 defineProperty 劫持 set 和 get 属性访问描述符。\n\ndefineProperty 存在一些问题，最常见的问题就是无法监听对象以及数组动态添加的属性，即使 Vue2 重写了数组原型相关方法，但仍旧无法监听到`arr[1]=xxx`这种形式。\n\nVue3 使用了 ES6 新增的 Proxy 接口来替代 defineProperty。\n\nProxy 对象用于定义基本操作的自定义行为\n\n```\nconst p = new Proxy(target, handler)\n```\n\n其中 handler 对象是一个容纳一批特定属性的占位符对象，它包含有 Proxy 的各个捕获器 trap，如 set、get`等\n\nMap 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。\n\nSet 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。\n\n- set 方法应该返回一个布尔值，在严格模式下，如果 set 方法返回 falsish(包括 undefined、false 等)，会抛出异常，这些细节比较麻烦，可以通过 Reflect 来处理\n\n- 如果代理对象是数组，当调用 push、pop 等方法时，不仅会改变数组元素，也会改变 length 等属性，此时如果代理了 set，则会被触发多次。\n\n```\nlet arr = [100,200,300]\nlet p = new Proxy(arr, {\n  get(target, key) {\n    return target[key]\n  },\n  set(target, key, value, receiver) {\n    console.log('set value', key)\n    target[key] = value\n    return true\n  }\n})\n\np.push(400)\n// set value 3 第一次data[3] = 400\n// set value length 第二次 data.length = 4\n```\n\n60 行代码实现简易的 reactive\n\n`index.js`\n\n```\nlet activeEffect\nlet targetMap = new Map()\n\nfunction reactive(obj){\n    return new Proxy(obj, {\n        get(target, key){\n            track(target, key)\n            return target[key]\n        },\n        set(target, key, value){\n            target[key] = value\n            trigger(target, key)\n            return true\n        }\n    })\n}\n\nfunction track(target, key){\n    let depMap = targetMap.get(target) // 获取 key 是 target 对象的值，感觉是对象的地址\n    if(!depMap) { // 如果没有，就新增加一个，target 相关联的值初始化程一个Map\n        targetMap.set(target, (depMap = new Map()))\n    }\n    let dep = depMap.get(key) // 获取 key 的相关联的数据\n    if(!dep) { // 没有就初始化成一个 Set\n        depMap.set(key, ( dep = new Set()))\n    }\n\n     // 给 key 添加 activeEffect，值变动了会执行trigger函数，执行该函数\n    if(!dep.has(activeEffect)){\n        dep.add(activeEffect)\n    }\n}\n\nfunction watchEffect(cb){\n    activeEffect = cb\n    cb()\n}\n\nfunction trigger(target, key){\n\n    let depMap = targetMap.get(target)\n    if(!depMap) return\n    let effects =  depMap.get(key)\n    if(!effects) return\n\n    effects.forEach((effect)=>{\n        effect()\n    })\n}\n```\n\n`index.html`\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <script src=\"./index.js\"></script>\n    <script>\n      let state = reactive({\n        x: 100,\n      })\n\n      function render() {\n        let msg = `render template with state.x = ${state.x}`\n        console.log(msg)\n      }\n\n      watchEffect(render)\n\n      setTimeout(() => {\n        state.x = 200\n      }, 1000)\n    </script>\n  </body>\n</html>\n```\n\n> 引用\n\n- [Proxy - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n- [Vue3 源码分析——数据侦测](https://juejin.im/post/5ec68bc8518825434980044e#heading-10)\n- [vue-next](https://github.com/vuejs/vue-next)\n","source":"_posts/实现极简版reactive.md","raw":"---\ntitle: 实现极简版reactive\ndate: 2020-06-22 00:00:00\nupdated: 2020-06-22 00:00:00\ntags:\n  - Vue3\n  - Proxy\n---\n\nVue3.0 出来有一段是时间了，趁着有点空，跟着大佬一起学习一下新的响应式系统。\n\n<!-- more -->\n\n为了收集数据依赖、以及在数据变化时更新视图，Vue2 通过 defineProperty 劫持 set 和 get 属性访问描述符。\n\ndefineProperty 存在一些问题，最常见的问题就是无法监听对象以及数组动态添加的属性，即使 Vue2 重写了数组原型相关方法，但仍旧无法监听到`arr[1]=xxx`这种形式。\n\nVue3 使用了 ES6 新增的 Proxy 接口来替代 defineProperty。\n\nProxy 对象用于定义基本操作的自定义行为\n\n```\nconst p = new Proxy(target, handler)\n```\n\n其中 handler 对象是一个容纳一批特定属性的占位符对象，它包含有 Proxy 的各个捕获器 trap，如 set、get`等\n\nMap 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。\n\nSet 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。\n\n- set 方法应该返回一个布尔值，在严格模式下，如果 set 方法返回 falsish(包括 undefined、false 等)，会抛出异常，这些细节比较麻烦，可以通过 Reflect 来处理\n\n- 如果代理对象是数组，当调用 push、pop 等方法时，不仅会改变数组元素，也会改变 length 等属性，此时如果代理了 set，则会被触发多次。\n\n```\nlet arr = [100,200,300]\nlet p = new Proxy(arr, {\n  get(target, key) {\n    return target[key]\n  },\n  set(target, key, value, receiver) {\n    console.log('set value', key)\n    target[key] = value\n    return true\n  }\n})\n\np.push(400)\n// set value 3 第一次data[3] = 400\n// set value length 第二次 data.length = 4\n```\n\n60 行代码实现简易的 reactive\n\n`index.js`\n\n```\nlet activeEffect\nlet targetMap = new Map()\n\nfunction reactive(obj){\n    return new Proxy(obj, {\n        get(target, key){\n            track(target, key)\n            return target[key]\n        },\n        set(target, key, value){\n            target[key] = value\n            trigger(target, key)\n            return true\n        }\n    })\n}\n\nfunction track(target, key){\n    let depMap = targetMap.get(target) // 获取 key 是 target 对象的值，感觉是对象的地址\n    if(!depMap) { // 如果没有，就新增加一个，target 相关联的值初始化程一个Map\n        targetMap.set(target, (depMap = new Map()))\n    }\n    let dep = depMap.get(key) // 获取 key 的相关联的数据\n    if(!dep) { // 没有就初始化成一个 Set\n        depMap.set(key, ( dep = new Set()))\n    }\n\n     // 给 key 添加 activeEffect，值变动了会执行trigger函数，执行该函数\n    if(!dep.has(activeEffect)){\n        dep.add(activeEffect)\n    }\n}\n\nfunction watchEffect(cb){\n    activeEffect = cb\n    cb()\n}\n\nfunction trigger(target, key){\n\n    let depMap = targetMap.get(target)\n    if(!depMap) return\n    let effects =  depMap.get(key)\n    if(!effects) return\n\n    effects.forEach((effect)=>{\n        effect()\n    })\n}\n```\n\n`index.html`\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <script src=\"./index.js\"></script>\n    <script>\n      let state = reactive({\n        x: 100,\n      })\n\n      function render() {\n        let msg = `render template with state.x = ${state.x}`\n        console.log(msg)\n      }\n\n      watchEffect(render)\n\n      setTimeout(() => {\n        state.x = 200\n      }, 1000)\n    </script>\n  </body>\n</html>\n```\n\n> 引用\n\n- [Proxy - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n- [Vue3 源码分析——数据侦测](https://juejin.im/post/5ec68bc8518825434980044e#heading-10)\n- [vue-next](https://github.com/vuejs/vue-next)\n","slug":"实现极简版reactive","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxy002bk4u96voy5sou","content":"<p>Vue3.0 出来有一段是时间了，趁着有点空，跟着大佬一起学习一下新的响应式系统。</p>\n<span id=\"more\"></span>\n\n<p>为了收集数据依赖、以及在数据变化时更新视图，Vue2 通过 defineProperty 劫持 set 和 get 属性访问描述符。</p>\n<p>defineProperty 存在一些问题，最常见的问题就是无法监听对象以及数组动态添加的属性，即使 Vue2 重写了数组原型相关方法，但仍旧无法监听到<code>arr[1]=xxx</code>这种形式。</p>\n<p>Vue3 使用了 ES6 新增的 Proxy 接口来替代 defineProperty。</p>\n<p>Proxy 对象用于定义基本操作的自定义行为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p = new Proxy(target, handler)</span><br></pre></td></tr></table></figure>\n\n<p>其中 handler 对象是一个容纳一批特定属性的占位符对象，它包含有 Proxy 的各个捕获器 trap，如 set、get`等</p>\n<p>Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。</p>\n<p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p>\n<ul>\n<li><p>set 方法应该返回一个布尔值，在严格模式下，如果 set 方法返回 falsish(包括 undefined、false 等)，会抛出异常，这些细节比较麻烦，可以通过 Reflect 来处理</p>\n</li>\n<li><p>如果代理对象是数组，当调用 push、pop 等方法时，不仅会改变数组元素，也会改变 length 等属性，此时如果代理了 set，则会被触发多次。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [100,200,300]</span><br><span class=\"line\">let p = new Proxy(arr, &#123;</span><br><span class=\"line\">  get(target, key) &#123;</span><br><span class=\"line\">    return target[key]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set(target, key, value, receiver) &#123;</span><br><span class=\"line\">    console.log(&#x27;set value&#x27;, key)</span><br><span class=\"line\">    target[key] = value</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">p.push(400)</span><br><span class=\"line\">// set value 3 第一次data[3] = 400</span><br><span class=\"line\">// set value length 第二次 data.length = 4</span><br></pre></td></tr></table></figure>\n\n<p>60 行代码实现简易的 reactive</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let activeEffect</span><br><span class=\"line\">let targetMap = new Map()</span><br><span class=\"line\"></span><br><span class=\"line\">function reactive(obj)&#123;</span><br><span class=\"line\">    return new Proxy(obj, &#123;</span><br><span class=\"line\">        get(target, key)&#123;</span><br><span class=\"line\">            track(target, key)</span><br><span class=\"line\">            return target[key]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set(target, key, value)&#123;</span><br><span class=\"line\">            target[key] = value</span><br><span class=\"line\">            trigger(target, key)</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function track(target, key)&#123;</span><br><span class=\"line\">    let depMap = targetMap.get(target) // 获取 key 是 target 对象的值，感觉是对象的地址</span><br><span class=\"line\">    if(!depMap) &#123; // 如果没有，就新增加一个，target 相关联的值初始化程一个Map</span><br><span class=\"line\">        targetMap.set(target, (depMap = new Map()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let dep = depMap.get(key) // 获取 key 的相关联的数据</span><br><span class=\"line\">    if(!dep) &#123; // 没有就初始化成一个 Set</span><br><span class=\"line\">        depMap.set(key, ( dep = new Set()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     // 给 key 添加 activeEffect，值变动了会执行trigger函数，执行该函数</span><br><span class=\"line\">    if(!dep.has(activeEffect))&#123;</span><br><span class=\"line\">        dep.add(activeEffect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function watchEffect(cb)&#123;</span><br><span class=\"line\">    activeEffect = cb</span><br><span class=\"line\">    cb()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function trigger(target, key)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    let depMap = targetMap.get(target)</span><br><span class=\"line\">    if(!depMap) return</span><br><span class=\"line\">    let effects =  depMap.get(key)</span><br><span class=\"line\">    if(!effects) return</span><br><span class=\"line\"></span><br><span class=\"line\">    effects.forEach((effect)=&gt;&#123;</span><br><span class=\"line\">        effect()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.html</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      let state = reactive(&#123;</span><br><span class=\"line\">        x: 100,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      function render() &#123;</span><br><span class=\"line\">        let msg = `render template with state.x = $&#123;state.x&#125;`</span><br><span class=\"line\">        console.log(msg)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      watchEffect(render)</span><br><span class=\"line\"></span><br><span class=\"line\">      setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        state.x = 200</span><br><span class=\"line\">      &#125;, 1000)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy - MDN</a></li>\n<li><a href=\"https://juejin.im/post/5ec68bc8518825434980044e#heading-10\">Vue3 源码分析——数据侦测</a></li>\n<li><a href=\"https://github.com/vuejs/vue-next\">vue-next</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Vue3.0 出来有一段是时间了，趁着有点空，跟着大佬一起学习一下新的响应式系统。</p>","more":"<p>为了收集数据依赖、以及在数据变化时更新视图，Vue2 通过 defineProperty 劫持 set 和 get 属性访问描述符。</p>\n<p>defineProperty 存在一些问题，最常见的问题就是无法监听对象以及数组动态添加的属性，即使 Vue2 重写了数组原型相关方法，但仍旧无法监听到<code>arr[1]=xxx</code>这种形式。</p>\n<p>Vue3 使用了 ES6 新增的 Proxy 接口来替代 defineProperty。</p>\n<p>Proxy 对象用于定义基本操作的自定义行为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p = new Proxy(target, handler)</span><br></pre></td></tr></table></figure>\n\n<p>其中 handler 对象是一个容纳一批特定属性的占位符对象，它包含有 Proxy 的各个捕获器 trap，如 set、get`等</p>\n<p>Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。</p>\n<p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p>\n<ul>\n<li><p>set 方法应该返回一个布尔值，在严格模式下，如果 set 方法返回 falsish(包括 undefined、false 等)，会抛出异常，这些细节比较麻烦，可以通过 Reflect 来处理</p>\n</li>\n<li><p>如果代理对象是数组，当调用 push、pop 等方法时，不仅会改变数组元素，也会改变 length 等属性，此时如果代理了 set，则会被触发多次。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [100,200,300]</span><br><span class=\"line\">let p = new Proxy(arr, &#123;</span><br><span class=\"line\">  get(target, key) &#123;</span><br><span class=\"line\">    return target[key]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set(target, key, value, receiver) &#123;</span><br><span class=\"line\">    console.log(&#x27;set value&#x27;, key)</span><br><span class=\"line\">    target[key] = value</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">p.push(400)</span><br><span class=\"line\">// set value 3 第一次data[3] = 400</span><br><span class=\"line\">// set value length 第二次 data.length = 4</span><br></pre></td></tr></table></figure>\n\n<p>60 行代码实现简易的 reactive</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let activeEffect</span><br><span class=\"line\">let targetMap = new Map()</span><br><span class=\"line\"></span><br><span class=\"line\">function reactive(obj)&#123;</span><br><span class=\"line\">    return new Proxy(obj, &#123;</span><br><span class=\"line\">        get(target, key)&#123;</span><br><span class=\"line\">            track(target, key)</span><br><span class=\"line\">            return target[key]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set(target, key, value)&#123;</span><br><span class=\"line\">            target[key] = value</span><br><span class=\"line\">            trigger(target, key)</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function track(target, key)&#123;</span><br><span class=\"line\">    let depMap = targetMap.get(target) // 获取 key 是 target 对象的值，感觉是对象的地址</span><br><span class=\"line\">    if(!depMap) &#123; // 如果没有，就新增加一个，target 相关联的值初始化程一个Map</span><br><span class=\"line\">        targetMap.set(target, (depMap = new Map()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let dep = depMap.get(key) // 获取 key 的相关联的数据</span><br><span class=\"line\">    if(!dep) &#123; // 没有就初始化成一个 Set</span><br><span class=\"line\">        depMap.set(key, ( dep = new Set()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     // 给 key 添加 activeEffect，值变动了会执行trigger函数，执行该函数</span><br><span class=\"line\">    if(!dep.has(activeEffect))&#123;</span><br><span class=\"line\">        dep.add(activeEffect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function watchEffect(cb)&#123;</span><br><span class=\"line\">    activeEffect = cb</span><br><span class=\"line\">    cb()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function trigger(target, key)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    let depMap = targetMap.get(target)</span><br><span class=\"line\">    if(!depMap) return</span><br><span class=\"line\">    let effects =  depMap.get(key)</span><br><span class=\"line\">    if(!effects) return</span><br><span class=\"line\"></span><br><span class=\"line\">    effects.forEach((effect)=&gt;&#123;</span><br><span class=\"line\">        effect()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.html</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      let state = reactive(&#123;</span><br><span class=\"line\">        x: 100,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      function render() &#123;</span><br><span class=\"line\">        let msg = `render template with state.x = $&#123;state.x&#125;`</span><br><span class=\"line\">        console.log(msg)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      watchEffect(render)</span><br><span class=\"line\"></span><br><span class=\"line\">      setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        state.x = 200</span><br><span class=\"line\">      &#125;, 1000)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy - MDN</a></li>\n<li><a href=\"https://juejin.im/post/5ec68bc8518825434980044e#heading-10\">Vue3 源码分析——数据侦测</a></li>\n<li><a href=\"https://github.com/vuejs/vue-next\">vue-next</a></li>\n</ul>"},{"title":"对类的初步认识","date":"2018-12-25T16:00:00.000Z","updated":"2018-12-25T16:00:00.000Z","_content":"\n之前的 [MVC](https://jiangnana.fun/2018/12/26/什么是MVC) 案例，初步认识了 MVC 是什么。但是当项目中，有多个模块，每个模块都初始化 MVC，就显得非常冗余。这时需要将相同的代码提出来，声明一个函数，以后每次要声明 MVC 时，就调用这个函数。\n\n<!-- more -->\n\n### View\n\n```javascript\nwindow.View = function (selector) {\n  return document.querySelectorAll(selector)\n}\n```\n\n### Model\n\n```javascript\nwindow.Model = function (options) {\n  let resouceName = options.resouceName\n\n  return {\n    init: function () {\n      var APP_ID = 'KMOXV4q9U0oDj41GjcqDuFe0-gzGzoHsz'\n      var APP_KEY = 'vt42FiDltVxEsHYopyyLvLDj'\n      AV.init({\n        appId: APP_ID,\n        appKey: APP_KEY\n      })\n    },\n    fetch: function () {\n      var query = new AV.Query(resouceName)\n      return query.find()\n    },\n    save: function (object) {\n      var X = AV.Object.extend(resouceName)\n      var x = new X()\n      return x.save(object)\n    }\n  }\n}\n```\n\n### Controller\n\n```javascript\n//  controller = Controller({\n//     ...\n// })\n// controller.init(view,model)\nwindow.Controller = function (options) {\n  var init = options.init\n\n  var object = {\n    view: null,\n    model: null,\n    init: function (view, model) {\n      this.view = view\n      this.model = model\n      this.model.init()\n      init.call(this, view, model) //options的init，this是object。因遍历了options，所以object里也有option自带的属性\n      this.bindEvents()\n    },\n    bindEvents: function () {}\n  }\n\n  for (key in options) {\n    if (key !== 'init') {\n      object[key] = options[key]\n    }\n  } // 将options上个性化的属性添加到object，并返回object\n\n  return object\n}\n```\n","source":"_posts/对类的初步认识.md","raw":"---\ntitle: 对类的初步认识\ndate: 2018-12-26 00:00:00\nupdated: 2018-12-26 00:00:00\ntags:\n  - 面向对象\n  - 类\n---\n\n之前的 [MVC](https://jiangnana.fun/2018/12/26/什么是MVC) 案例，初步认识了 MVC 是什么。但是当项目中，有多个模块，每个模块都初始化 MVC，就显得非常冗余。这时需要将相同的代码提出来，声明一个函数，以后每次要声明 MVC 时，就调用这个函数。\n\n<!-- more -->\n\n### View\n\n```javascript\nwindow.View = function (selector) {\n  return document.querySelectorAll(selector)\n}\n```\n\n### Model\n\n```javascript\nwindow.Model = function (options) {\n  let resouceName = options.resouceName\n\n  return {\n    init: function () {\n      var APP_ID = 'KMOXV4q9U0oDj41GjcqDuFe0-gzGzoHsz'\n      var APP_KEY = 'vt42FiDltVxEsHYopyyLvLDj'\n      AV.init({\n        appId: APP_ID,\n        appKey: APP_KEY\n      })\n    },\n    fetch: function () {\n      var query = new AV.Query(resouceName)\n      return query.find()\n    },\n    save: function (object) {\n      var X = AV.Object.extend(resouceName)\n      var x = new X()\n      return x.save(object)\n    }\n  }\n}\n```\n\n### Controller\n\n```javascript\n//  controller = Controller({\n//     ...\n// })\n// controller.init(view,model)\nwindow.Controller = function (options) {\n  var init = options.init\n\n  var object = {\n    view: null,\n    model: null,\n    init: function (view, model) {\n      this.view = view\n      this.model = model\n      this.model.init()\n      init.call(this, view, model) //options的init，this是object。因遍历了options，所以object里也有option自带的属性\n      this.bindEvents()\n    },\n    bindEvents: function () {}\n  }\n\n  for (key in options) {\n    if (key !== 'init') {\n      object[key] = options[key]\n    }\n  } // 将options上个性化的属性添加到object，并返回object\n\n  return object\n}\n```\n","slug":"对类的初步认识","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpxz002dk4u90x2rhr4q","content":"<p>之前的 <a href=\"https://jiangnana.fun/2018/12/26/%E4%BB%80%E4%B9%88%E6%98%AFMVC\">MVC</a> 案例，初步认识了 MVC 是什么。但是当项目中，有多个模块，每个模块都初始化 MVC，就显得非常冗余。这时需要将相同的代码提出来，声明一个函数，以后每次要声明 MVC 时，就调用这个函数。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.View = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelectorAll(selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Model = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resouceName = options.resouceName</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> APP_ID = <span class=\"string\">&#x27;KMOXV4q9U0oDj41GjcqDuFe0-gzGzoHsz&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> APP_KEY = <span class=\"string\">&#x27;vt42FiDltVxEsHYopyyLvLDj&#x27;</span></span><br><span class=\"line\">      AV.init(&#123;</span><br><span class=\"line\">        <span class=\"attr\">appId</span>: APP_ID,</span><br><span class=\"line\">        <span class=\"attr\">appKey</span>: APP_KEY</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">fetch</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> AV.Query(resouceName)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> query.find()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">save</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> X = AV.Object.extend(resouceName)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> X()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x.save(object)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  controller = Controller(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     ...</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// controller.init(view,model)</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.Controller = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> init = options.init</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">view</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">model</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view, model</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.view = view</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model = model</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model.init()</span><br><span class=\"line\">      init.call(<span class=\"built_in\">this</span>, view, model) <span class=\"comment\">//options的init，this是object。因遍历了options，所以object里也有option自带的属性</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.bindEvents()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">bindEvents</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key !== <span class=\"string\">&#x27;init&#x27;</span>) &#123;</span><br><span class=\"line\">      object[key] = options[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"comment\">// 将options上个性化的属性添加到object，并返回object</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>之前的 <a href=\"https://jiangnana.fun/2018/12/26/%E4%BB%80%E4%B9%88%E6%98%AFMVC\">MVC</a> 案例，初步认识了 MVC 是什么。但是当项目中，有多个模块，每个模块都初始化 MVC，就显得非常冗余。这时需要将相同的代码提出来，声明一个函数，以后每次要声明 MVC 时，就调用这个函数。</p>","more":"<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.View = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelectorAll(selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Model = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resouceName = options.resouceName</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> APP_ID = <span class=\"string\">&#x27;KMOXV4q9U0oDj41GjcqDuFe0-gzGzoHsz&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> APP_KEY = <span class=\"string\">&#x27;vt42FiDltVxEsHYopyyLvLDj&#x27;</span></span><br><span class=\"line\">      AV.init(&#123;</span><br><span class=\"line\">        <span class=\"attr\">appId</span>: APP_ID,</span><br><span class=\"line\">        <span class=\"attr\">appKey</span>: APP_KEY</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">fetch</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> AV.Query(resouceName)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> query.find()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">save</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> X = AV.Object.extend(resouceName)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> X()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x.save(object)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  controller = Controller(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     ...</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// controller.init(view,model)</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.Controller = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> init = options.init</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">view</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">model</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view, model</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.view = view</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model = model</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.model.init()</span><br><span class=\"line\">      init.call(<span class=\"built_in\">this</span>, view, model) <span class=\"comment\">//options的init，this是object。因遍历了options，所以object里也有option自带的属性</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.bindEvents()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">bindEvents</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key !== <span class=\"string\">&#x27;init&#x27;</span>) &#123;</span><br><span class=\"line\">      object[key] = options[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"comment\">// 将options上个性化的属性添加到object，并返回object</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"常见网站攻击","date":"2019-03-12T16:00:00.000Z","updated":"2019-03-12T16:00:00.000Z","_content":"\n网站安全是每个开发者都必须要了解的事情。本人从前端开发的角度，简单说一下几种常见的攻击手段以及如何防止这类攻击。\n\n<!-- more -->\n\n# XSS 跨站脚本攻击\n\nXSS 全称是 Cross-site scripting ，是一种漏洞，攻击者可以利用这种漏洞在网站上注入恶意脚本代码。这些恶意内容通常包括 JavaScript，但有时包括 HTML，Flash 或浏览器可以执行的任何其他代码。当被攻击者打开网站时就会自动运行这些恶意代码，这些脚本就会获取用户在该网站下保留的任意敏感信息。\n\n举个例子：\n\n某网站有个评论系统，攻击者评论时输入类如：\n\n`<script>alert('我是恶意代码')</script>`\n\n或者\n\n`<img src=\"http://url.to.file.which/not.exist\" onerror=alert(document.cookie);>`\n\n那么当其他用户登陆评论时，就会自动执行这些代码。\n\n## 如何防止 XSS 攻击\n\n坚持一条准则：永远不要相信用户输入的数据。\n\n在后端，可以将可疑的符号转码，比如 `&`，`<`，`>`，`\"`，`'` ，在响应头中设置 cookie HttpOnly。\n\n在前端，不使用 html(),innerHTml(),eval()等 API，使用安全的 innerText().\n\n# CSRF 跨站请求伪造\n\nCSRF 的全称是 Cross-Site Request Forgery，是一种欺骗受害者提交恶意请求的攻击。它拥有受害用户的身份信息，然后跨站伪造用户的请求。\n\n打个比方，比如 a 向 b 转 100 块钱是类似这样的请求：\n\n`http://alipay.com/send?acct=b&amount=100`\n\nb 在 a 登陆网银的时候，诱导 a 打开一个页面，通常是一封包含 html 的邮件或者植入在页面中的链接类似：\n\n`<a href=\"http://alipay.com/send?acct=b&amount=100\">View my Pictures!</a>`\n\n或\n\n`<img src=\"http://alipay.com/send?acct=b&amount=100\" width=\"0\" height=\"0\" border=\"0\">`\n\n当用户打开这个邮件时，a 不会看到任何东西，但是浏览器依然会发送这个请求给 alipay.com。\n\n## 如何防止 CSRF 攻击\n\n可以采用 `anti-csrf-token` 方案\n\n具体方案如下：\n\n1. 服务端在接收到用户请求时，会生成一个随机数 `_csrf_token`，并在渲染页面的时候埋入页面中，一般是 form 表单中；\n2. 服务端设置 setCookie，把 `_csrf_token` 作为 cookie 或者 session 种入到用户浏览器；\n3. 用户在发送请求时都会带上 `_csrf_token` 的参数；\n4. 后台在处理用户请求时，会对照 cookie 和 form 表单中的 `_csrf_token` 值，如果一样则表示请求时合法的。\n\n有几点要注意：\n\n1. token 放在 session 中，倘若用户打开了很多页面，新的页面是用新的 token ，而之前的页面的 token 还未更新，旧的页面用户就无法提交；\n2. 尽量少用 get，倘若攻击者在网站上传了一张图片，用户加载图片的时候会向攻击者的服务器发送请求，并且请求带有的 referer 表示当前图片所造页面的 url ，因 get 的参数在 url 中，攻击者就能获取 url 中的 token 参数。\n\n> 引用\n\n- [Cross-Site Request Forgery (CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29)\n- [Cross-site Scripting (XSS)](<https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)>)\n","source":"_posts/常见网站攻击.md","raw":"---\ntitle: 常见网站攻击\ndate: 2019-03-13 00:00:00\nupdated: 2019-03-13 00:00:00\ntags:\n  - XSS\n  - CSRF\n---\n\n网站安全是每个开发者都必须要了解的事情。本人从前端开发的角度，简单说一下几种常见的攻击手段以及如何防止这类攻击。\n\n<!-- more -->\n\n# XSS 跨站脚本攻击\n\nXSS 全称是 Cross-site scripting ，是一种漏洞，攻击者可以利用这种漏洞在网站上注入恶意脚本代码。这些恶意内容通常包括 JavaScript，但有时包括 HTML，Flash 或浏览器可以执行的任何其他代码。当被攻击者打开网站时就会自动运行这些恶意代码，这些脚本就会获取用户在该网站下保留的任意敏感信息。\n\n举个例子：\n\n某网站有个评论系统，攻击者评论时输入类如：\n\n`<script>alert('我是恶意代码')</script>`\n\n或者\n\n`<img src=\"http://url.to.file.which/not.exist\" onerror=alert(document.cookie);>`\n\n那么当其他用户登陆评论时，就会自动执行这些代码。\n\n## 如何防止 XSS 攻击\n\n坚持一条准则：永远不要相信用户输入的数据。\n\n在后端，可以将可疑的符号转码，比如 `&`，`<`，`>`，`\"`，`'` ，在响应头中设置 cookie HttpOnly。\n\n在前端，不使用 html(),innerHTml(),eval()等 API，使用安全的 innerText().\n\n# CSRF 跨站请求伪造\n\nCSRF 的全称是 Cross-Site Request Forgery，是一种欺骗受害者提交恶意请求的攻击。它拥有受害用户的身份信息，然后跨站伪造用户的请求。\n\n打个比方，比如 a 向 b 转 100 块钱是类似这样的请求：\n\n`http://alipay.com/send?acct=b&amount=100`\n\nb 在 a 登陆网银的时候，诱导 a 打开一个页面，通常是一封包含 html 的邮件或者植入在页面中的链接类似：\n\n`<a href=\"http://alipay.com/send?acct=b&amount=100\">View my Pictures!</a>`\n\n或\n\n`<img src=\"http://alipay.com/send?acct=b&amount=100\" width=\"0\" height=\"0\" border=\"0\">`\n\n当用户打开这个邮件时，a 不会看到任何东西，但是浏览器依然会发送这个请求给 alipay.com。\n\n## 如何防止 CSRF 攻击\n\n可以采用 `anti-csrf-token` 方案\n\n具体方案如下：\n\n1. 服务端在接收到用户请求时，会生成一个随机数 `_csrf_token`，并在渲染页面的时候埋入页面中，一般是 form 表单中；\n2. 服务端设置 setCookie，把 `_csrf_token` 作为 cookie 或者 session 种入到用户浏览器；\n3. 用户在发送请求时都会带上 `_csrf_token` 的参数；\n4. 后台在处理用户请求时，会对照 cookie 和 form 表单中的 `_csrf_token` 值，如果一样则表示请求时合法的。\n\n有几点要注意：\n\n1. token 放在 session 中，倘若用户打开了很多页面，新的页面是用新的 token ，而之前的页面的 token 还未更新，旧的页面用户就无法提交；\n2. 尽量少用 get，倘若攻击者在网站上传了一张图片，用户加载图片的时候会向攻击者的服务器发送请求，并且请求带有的 referer 表示当前图片所造页面的 url ，因 get 的参数在 url 中，攻击者就能获取 url 中的 token 参数。\n\n> 引用\n\n- [Cross-Site Request Forgery (CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29)\n- [Cross-site Scripting (XSS)](<https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)>)\n","slug":"常见网站攻击","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpy0002fk4u924a29mwv","content":"<p>网站安全是每个开发者都必须要了解的事情。本人从前端开发的角度，简单说一下几种常见的攻击手段以及如何防止这类攻击。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"XSS-跨站脚本攻击\"><a href=\"#XSS-跨站脚本攻击\" class=\"headerlink\" title=\"XSS 跨站脚本攻击\"></a>XSS 跨站脚本攻击</h1><p>XSS 全称是 Cross-site scripting ，是一种漏洞，攻击者可以利用这种漏洞在网站上注入恶意脚本代码。这些恶意内容通常包括 JavaScript，但有时包括 HTML，Flash 或浏览器可以执行的任何其他代码。当被攻击者打开网站时就会自动运行这些恶意代码，这些脚本就会获取用户在该网站下保留的任意敏感信息。</p>\n<p>举个例子：</p>\n<p>某网站有个评论系统，攻击者评论时输入类如：</p>\n<p><code>&lt;script&gt;alert(&#39;我是恶意代码&#39;)&lt;/script&gt;</code></p>\n<p>或者</p>\n<p><code>&lt;img src=&quot;http://url.to.file.which/not.exist&quot; onerror=alert(document.cookie);&gt;</code></p>\n<p>那么当其他用户登陆评论时，就会自动执行这些代码。</p>\n<h2 id=\"如何防止-XSS-攻击\"><a href=\"#如何防止-XSS-攻击\" class=\"headerlink\" title=\"如何防止 XSS 攻击\"></a>如何防止 XSS 攻击</h2><p>坚持一条准则：永远不要相信用户输入的数据。</p>\n<p>在后端，可以将可疑的符号转码，比如 <code>&amp;</code>，<code>&lt;</code>，<code>&gt;</code>，<code>&quot;</code>，<code>&#39;</code> ，在响应头中设置 cookie HttpOnly。</p>\n<p>在前端，不使用 html(),innerHTml(),eval()等 API，使用安全的 innerText().</p>\n<h1 id=\"CSRF-跨站请求伪造\"><a href=\"#CSRF-跨站请求伪造\" class=\"headerlink\" title=\"CSRF 跨站请求伪造\"></a>CSRF 跨站请求伪造</h1><p>CSRF 的全称是 Cross-Site Request Forgery，是一种欺骗受害者提交恶意请求的攻击。它拥有受害用户的身份信息，然后跨站伪造用户的请求。</p>\n<p>打个比方，比如 a 向 b 转 100 块钱是类似这样的请求：</p>\n<p><code>http://alipay.com/send?acct=b&amp;amount=100</code></p>\n<p>b 在 a 登陆网银的时候，诱导 a 打开一个页面，通常是一封包含 html 的邮件或者植入在页面中的链接类似：</p>\n<p><code>&lt;a href=&quot;http://alipay.com/send?acct=b&amp;amount=100&quot;&gt;View my Pictures!&lt;/a&gt;</code></p>\n<p>或</p>\n<p><code>&lt;img src=&quot;http://alipay.com/send?acct=b&amp;amount=100&quot; width=&quot;0&quot; height=&quot;0&quot; border=&quot;0&quot;&gt;</code></p>\n<p>当用户打开这个邮件时，a 不会看到任何东西，但是浏览器依然会发送这个请求给 alipay.com。</p>\n<h2 id=\"如何防止-CSRF-攻击\"><a href=\"#如何防止-CSRF-攻击\" class=\"headerlink\" title=\"如何防止 CSRF 攻击\"></a>如何防止 CSRF 攻击</h2><p>可以采用 <code>anti-csrf-token</code> 方案</p>\n<p>具体方案如下：</p>\n<ol>\n<li>服务端在接收到用户请求时，会生成一个随机数 <code>_csrf_token</code>，并在渲染页面的时候埋入页面中，一般是 form 表单中；</li>\n<li>服务端设置 setCookie，把 <code>_csrf_token</code> 作为 cookie 或者 session 种入到用户浏览器；</li>\n<li>用户在发送请求时都会带上 <code>_csrf_token</code> 的参数；</li>\n<li>后台在处理用户请求时，会对照 cookie 和 form 表单中的 <code>_csrf_token</code> 值，如果一样则表示请求时合法的。</li>\n</ol>\n<p>有几点要注意：</p>\n<ol>\n<li>token 放在 session 中，倘若用户打开了很多页面，新的页面是用新的 token ，而之前的页面的 token 还未更新，旧的页面用户就无法提交；</li>\n<li>尽量少用 get，倘若攻击者在网站上传了一张图片，用户加载图片的时候会向攻击者的服务器发送请求，并且请求带有的 referer 表示当前图片所造页面的 url ，因 get 的参数在 url 中，攻击者就能获取 url 中的 token 参数。</li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">Cross-Site Request Forgery (CSRF)</a></li>\n<li><a href=\"https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\">Cross-site Scripting (XSS)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>网站安全是每个开发者都必须要了解的事情。本人从前端开发的角度，简单说一下几种常见的攻击手段以及如何防止这类攻击。</p>","more":"<h1 id=\"XSS-跨站脚本攻击\"><a href=\"#XSS-跨站脚本攻击\" class=\"headerlink\" title=\"XSS 跨站脚本攻击\"></a>XSS 跨站脚本攻击</h1><p>XSS 全称是 Cross-site scripting ，是一种漏洞，攻击者可以利用这种漏洞在网站上注入恶意脚本代码。这些恶意内容通常包括 JavaScript，但有时包括 HTML，Flash 或浏览器可以执行的任何其他代码。当被攻击者打开网站时就会自动运行这些恶意代码，这些脚本就会获取用户在该网站下保留的任意敏感信息。</p>\n<p>举个例子：</p>\n<p>某网站有个评论系统，攻击者评论时输入类如：</p>\n<p><code>&lt;script&gt;alert(&#39;我是恶意代码&#39;)&lt;/script&gt;</code></p>\n<p>或者</p>\n<p><code>&lt;img src=&quot;http://url.to.file.which/not.exist&quot; onerror=alert(document.cookie);&gt;</code></p>\n<p>那么当其他用户登陆评论时，就会自动执行这些代码。</p>\n<h2 id=\"如何防止-XSS-攻击\"><a href=\"#如何防止-XSS-攻击\" class=\"headerlink\" title=\"如何防止 XSS 攻击\"></a>如何防止 XSS 攻击</h2><p>坚持一条准则：永远不要相信用户输入的数据。</p>\n<p>在后端，可以将可疑的符号转码，比如 <code>&amp;</code>，<code>&lt;</code>，<code>&gt;</code>，<code>&quot;</code>，<code>&#39;</code> ，在响应头中设置 cookie HttpOnly。</p>\n<p>在前端，不使用 html(),innerHTml(),eval()等 API，使用安全的 innerText().</p>\n<h1 id=\"CSRF-跨站请求伪造\"><a href=\"#CSRF-跨站请求伪造\" class=\"headerlink\" title=\"CSRF 跨站请求伪造\"></a>CSRF 跨站请求伪造</h1><p>CSRF 的全称是 Cross-Site Request Forgery，是一种欺骗受害者提交恶意请求的攻击。它拥有受害用户的身份信息，然后跨站伪造用户的请求。</p>\n<p>打个比方，比如 a 向 b 转 100 块钱是类似这样的请求：</p>\n<p><code>http://alipay.com/send?acct=b&amp;amount=100</code></p>\n<p>b 在 a 登陆网银的时候，诱导 a 打开一个页面，通常是一封包含 html 的邮件或者植入在页面中的链接类似：</p>\n<p><code>&lt;a href=&quot;http://alipay.com/send?acct=b&amp;amount=100&quot;&gt;View my Pictures!&lt;/a&gt;</code></p>\n<p>或</p>\n<p><code>&lt;img src=&quot;http://alipay.com/send?acct=b&amp;amount=100&quot; width=&quot;0&quot; height=&quot;0&quot; border=&quot;0&quot;&gt;</code></p>\n<p>当用户打开这个邮件时，a 不会看到任何东西，但是浏览器依然会发送这个请求给 alipay.com。</p>\n<h2 id=\"如何防止-CSRF-攻击\"><a href=\"#如何防止-CSRF-攻击\" class=\"headerlink\" title=\"如何防止 CSRF 攻击\"></a>如何防止 CSRF 攻击</h2><p>可以采用 <code>anti-csrf-token</code> 方案</p>\n<p>具体方案如下：</p>\n<ol>\n<li>服务端在接收到用户请求时，会生成一个随机数 <code>_csrf_token</code>，并在渲染页面的时候埋入页面中，一般是 form 表单中；</li>\n<li>服务端设置 setCookie，把 <code>_csrf_token</code> 作为 cookie 或者 session 种入到用户浏览器；</li>\n<li>用户在发送请求时都会带上 <code>_csrf_token</code> 的参数；</li>\n<li>后台在处理用户请求时，会对照 cookie 和 form 表单中的 <code>_csrf_token</code> 值，如果一样则表示请求时合法的。</li>\n</ol>\n<p>有几点要注意：</p>\n<ol>\n<li>token 放在 session 中，倘若用户打开了很多页面，新的页面是用新的 token ，而之前的页面的 token 还未更新，旧的页面用户就无法提交；</li>\n<li>尽量少用 get，倘若攻击者在网站上传了一张图片，用户加载图片的时候会向攻击者的服务器发送请求，并且请求带有的 referer 表示当前图片所造页面的 url ，因 get 的参数在 url 中，攻击者就能获取 url 中的 token 参数。</li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">Cross-Site Request Forgery (CSRF)</a></li>\n<li><a href=\"https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\">Cross-site Scripting (XSS)</a></li>\n</ul>"},{"title":"巧用 Git 分支","date":"2020-08-18T16:00:00.000Z","updated":"2020-08-18T16:00:00.000Z","_content":"\n写代码不出 bug 这个事情呢，不能强求的，有时候在新分支（b0）开发新版本开发到一半，线上版本（master）忽然冒出一个 bug 或者功能急需变更，这时就要切换到 master，紧急修复，然后再切回 b0 继续开发；\n\n<!-- more -->\n\n具体要怎么操作呢？\n\n我们要建立分支 b0，在上面开发新版本\n\n```javascript\ngit checkout -b b0\n\n// 上面是下面两句的简写\n//git branch b0 新建分支b0\n//git checkout b0 切换到分支b0\n```\n\n然后线上版本 bug 了，切回线上版本，新建分支 b1 紧急修复\n\n```javascript\ngit checkout master\ngit checkout -b b1\n```\n\n修复成功后合并 b1，并删除 b1 分支\n\n```javascript\ngit checkout master\ngit merge b1\ngit branch -d b1\n```\n\n然后再愉快切回一开始开发的分支 b0 上，此时 b0 分支上是没有 b1 修改的东西，因为创建 b0 分支在 b1 分支前面，可以使用 git merge master 命令将 master 分支合并入 b0 分支，或者你也可以等到 b0 分支完成其使命，再将其合并回 master 分支。\n\nmerge 过程中，可能会存在冲突导致合并失败，就要老老实实一个一个手动选择合并了。\n\n至此，一个修复流程就走完毕了。\n\n> 引用\n\n- [ Git 分支 - 分支的新建与合并](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6)\n","source":"_posts/巧用 Git 分支.md","raw":"---\ntitle: 巧用 Git 分支\ndate: 2020-08-19 00:00:00\nupdated: 2020-08-19 00:00:00\ntags:\n  - Git\n---\n\n写代码不出 bug 这个事情呢，不能强求的，有时候在新分支（b0）开发新版本开发到一半，线上版本（master）忽然冒出一个 bug 或者功能急需变更，这时就要切换到 master，紧急修复，然后再切回 b0 继续开发；\n\n<!-- more -->\n\n具体要怎么操作呢？\n\n我们要建立分支 b0，在上面开发新版本\n\n```javascript\ngit checkout -b b0\n\n// 上面是下面两句的简写\n//git branch b0 新建分支b0\n//git checkout b0 切换到分支b0\n```\n\n然后线上版本 bug 了，切回线上版本，新建分支 b1 紧急修复\n\n```javascript\ngit checkout master\ngit checkout -b b1\n```\n\n修复成功后合并 b1，并删除 b1 分支\n\n```javascript\ngit checkout master\ngit merge b1\ngit branch -d b1\n```\n\n然后再愉快切回一开始开发的分支 b0 上，此时 b0 分支上是没有 b1 修改的东西，因为创建 b0 分支在 b1 分支前面，可以使用 git merge master 命令将 master 分支合并入 b0 分支，或者你也可以等到 b0 分支完成其使命，再将其合并回 master 分支。\n\nmerge 过程中，可能会存在冲突导致合并失败，就要老老实实一个一个手动选择合并了。\n\n至此，一个修复流程就走完毕了。\n\n> 引用\n\n- [ Git 分支 - 分支的新建与合并](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6)\n","slug":"巧用 Git 分支","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpy1002ik4u9gr3t4koz","content":"<p>写代码不出 bug 这个事情呢，不能强求的，有时候在新分支（b0）开发新版本开发到一半，线上版本（master）忽然冒出一个 bug 或者功能急需变更，这时就要切换到 master，紧急修复，然后再切回 b0 继续开发；</p>\n<span id=\"more\"></span>\n\n<p>具体要怎么操作呢？</p>\n<p>我们要建立分支 b0，在上面开发新版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b b0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面是下面两句的简写</span></span><br><span class=\"line\"><span class=\"comment\">//git branch b0 新建分支b0</span></span><br><span class=\"line\"><span class=\"comment\">//git checkout b0 切换到分支b0</span></span><br></pre></td></tr></table></figure>\n\n<p>然后线上版本 bug 了，切回线上版本，新建分支 b1 紧急修复</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git checkout -b b1</span><br></pre></td></tr></table></figure>\n\n<p>修复成功后合并 b1，并删除 b1 分支</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge b1</span><br><span class=\"line\">git branch -d b1</span><br></pre></td></tr></table></figure>\n\n<p>然后再愉快切回一开始开发的分支 b0 上，此时 b0 分支上是没有 b1 修改的东西，因为创建 b0 分支在 b1 分支前面，可以使用 git merge master 命令将 master 分支合并入 b0 分支，或者你也可以等到 b0 分支完成其使命，再将其合并回 master 分支。</p>\n<p>merge 过程中，可能会存在冲突导致合并失败，就要老老实实一个一个手动选择合并了。</p>\n<p>至此，一个修复流程就走完毕了。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6\"> Git 分支 - 分支的新建与合并</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>写代码不出 bug 这个事情呢，不能强求的，有时候在新分支（b0）开发新版本开发到一半，线上版本（master）忽然冒出一个 bug 或者功能急需变更，这时就要切换到 master，紧急修复，然后再切回 b0 继续开发；</p>","more":"<p>具体要怎么操作呢？</p>\n<p>我们要建立分支 b0，在上面开发新版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b b0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面是下面两句的简写</span></span><br><span class=\"line\"><span class=\"comment\">//git branch b0 新建分支b0</span></span><br><span class=\"line\"><span class=\"comment\">//git checkout b0 切换到分支b0</span></span><br></pre></td></tr></table></figure>\n\n<p>然后线上版本 bug 了，切回线上版本，新建分支 b1 紧急修复</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git checkout -b b1</span><br></pre></td></tr></table></figure>\n\n<p>修复成功后合并 b1，并删除 b1 分支</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge b1</span><br><span class=\"line\">git branch -d b1</span><br></pre></td></tr></table></figure>\n\n<p>然后再愉快切回一开始开发的分支 b0 上，此时 b0 分支上是没有 b1 修改的东西，因为创建 b0 分支在 b1 分支前面，可以使用 git merge master 命令将 master 分支合并入 b0 分支，或者你也可以等到 b0 分支完成其使命，再将其合并回 master 分支。</p>\n<p>merge 过程中，可能会存在冲突导致合并失败，就要老老实实一个一个手动选择合并了。</p>\n<p>至此，一个修复流程就走完毕了。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6\"> Git 分支 - 分支的新建与合并</a></li>\n</ul>"},{"title":"弄懂 JavaScript 执行机制","date":"2019-03-10T16:00:00.000Z","updated":"2019-03-10T16:00:00.000Z","_content":"\n以前以为 JavaScript 是按照语句执行顺序执行的，直到现在被打脸了\n\n<!-- more -->\n\n举个的例子：\n\n```javascript\nconsole.log('script start')\n\nsetTimeout(function () {\n  console.log('setTimeout')\n}, 0)\n\nPromise.resolve()\n  .then(function () {\n    console.log('promise1')\n  })\n  .then(function () {\n    console.log('promise2')\n  })\n\nconsole.log('script end')\n```\n\n按照以前的思路，运行结果应该是\n\n```javascript\nscript start\nsetTimeout\npromise1\npromise2\nscript end\n```\n\n去 Chrome 浏览器里验证了一下\n\n```javascript\nscript start\nscript end\npromise1\npromise2\nsetTimeout\n```\n\n而且令人抓狂的是，不同浏览器输出的结果也不尽相同，下文的结果均以 Chrome 的为例。\n\n要了解为什么会输出这样的结果，我们需要了解 JavaScript 运行机制。\n\n首先我们要了解 event loop 是怎么处理 macrotasks 和 microtasks 。\n\nJavaScript 是单线程的，这个 event loop 是持续的运行，而且有许多 macrotasks 在队列等待被执行，但是是浏览器选择怎么执行的。一次鼠标点击事件的回调需要一次 macrotasks ，同样包括解析 HTML， 也包括 setTimeout。\n\nsetTimeout 等待当前 macrotasks 结束，才能执行。这也解释 为什么 setTimeout 在 script end 后面，因为输出 script end 也是第一个 macrotasks 部分之一。\n\n**macrotasks 执行完后不会马上执行下一个 macrotasks，而是会处理当前 macrotasks 产生的 microtasks 队列，然后才会执行下一个 macrotasks。microtasks 一般是异步的操作，比如回调什么的。在处理 microtasks 时产生的 microtasks 也会被加到当前 macrotasks 队列中，最终也会被执行。**\n\n除了广义的同步任务和异步任务，我们对任务有更精细的定义：\n\n**macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval**\n\n**micro-task(微任务)：Promise，process.nextTick**\n\n这样我们就能解释上面代码为什么会出现那样的结果了\n\n首先解析 JavaScript 是第一个 macrotasks。\n\n从上往下执行，先打印 `script start`\n\n遇到 setTimeout，不执行，扔到下一个 macrotasks；\n\n遇到 promise ，是异步的，不执行，扔到当前 macrotasks 的 microtasks 中；\n\n到最后一行，打印 `script end`；\n\n然后再去 microtasks 看看有没有事情要做；\n\n然后 打印 `promise1` 和 `promise1`，promise 返回 undefined；\n\n然后再到下一个 macrotasks，发现是 setTimeout，打印 `setTimeout`。\n\n关于 setTimeout 要补充的是：即便主线程为空，0 毫秒实际上也是达不到的。根据 HTML 的标准，最低是 4 毫秒。有兴趣的同学可以自行了解。\n\n觉得自己弄懂了吗？\n\n做个小例子\n\n```javascript\nconsole.log('1')\nasync function func1() {\n  await func2()\n  //以下所有内容都被放置微任务中\n  console.log('a')\n}\nasync function func2() {\n  console.log('b')\n}\nfunc1()\nsetTimeout(function () {\n  console.log('2')\n  Promise.resolve().then(function () {\n    console.log('3')\n  })\n  new Promise(function (resolve) {\n    console.log('4')\n    resolve()\n  }).then(function () {\n    console.log('5')\n  })\n})\nPromise.resolve().then(function () {\n  console.log('6')\n})\nnew Promise(function (resolve) {\n  console.log('7')\n  resolve()\n}).then(function () {\n  console.log('8')\n})\n\nsetTimeout(function () {\n  console.log('9')\n  Promise.resolve().then(function () {\n    console.log('10')\n  })\n  new Promise(function (resolve) {\n    console.log('11')\n    resolve()\n  }).then(function () {\n    console.log('12')\n  })\n})\n```\n\n在 Chrome 输出结果是：1,b,7,a,6,8,2,4,3,5,9,11,10,12\n\n> 引用\n\n- [这一次，彻底弄懂 JavaScript 执行机制](https://juejin.im/post/59e85eebf265da430d571f89#heading-4)\n- [Tasks, microtasks, queues and schedules](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n","source":"_posts/弄懂 JavaScript 执行机制.md","raw":"---\ntitle: 弄懂 JavaScript 执行机制\ndate: 2019-03-11 00:00:00\nupdated: 2019-03-11 00:00:00\ntags:\n  - macroTask\n  - microTask\n  - 宏任务\n  - 微任务\n  - JavaScript\n---\n\n以前以为 JavaScript 是按照语句执行顺序执行的，直到现在被打脸了\n\n<!-- more -->\n\n举个的例子：\n\n```javascript\nconsole.log('script start')\n\nsetTimeout(function () {\n  console.log('setTimeout')\n}, 0)\n\nPromise.resolve()\n  .then(function () {\n    console.log('promise1')\n  })\n  .then(function () {\n    console.log('promise2')\n  })\n\nconsole.log('script end')\n```\n\n按照以前的思路，运行结果应该是\n\n```javascript\nscript start\nsetTimeout\npromise1\npromise2\nscript end\n```\n\n去 Chrome 浏览器里验证了一下\n\n```javascript\nscript start\nscript end\npromise1\npromise2\nsetTimeout\n```\n\n而且令人抓狂的是，不同浏览器输出的结果也不尽相同，下文的结果均以 Chrome 的为例。\n\n要了解为什么会输出这样的结果，我们需要了解 JavaScript 运行机制。\n\n首先我们要了解 event loop 是怎么处理 macrotasks 和 microtasks 。\n\nJavaScript 是单线程的，这个 event loop 是持续的运行，而且有许多 macrotasks 在队列等待被执行，但是是浏览器选择怎么执行的。一次鼠标点击事件的回调需要一次 macrotasks ，同样包括解析 HTML， 也包括 setTimeout。\n\nsetTimeout 等待当前 macrotasks 结束，才能执行。这也解释 为什么 setTimeout 在 script end 后面，因为输出 script end 也是第一个 macrotasks 部分之一。\n\n**macrotasks 执行完后不会马上执行下一个 macrotasks，而是会处理当前 macrotasks 产生的 microtasks 队列，然后才会执行下一个 macrotasks。microtasks 一般是异步的操作，比如回调什么的。在处理 microtasks 时产生的 microtasks 也会被加到当前 macrotasks 队列中，最终也会被执行。**\n\n除了广义的同步任务和异步任务，我们对任务有更精细的定义：\n\n**macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval**\n\n**micro-task(微任务)：Promise，process.nextTick**\n\n这样我们就能解释上面代码为什么会出现那样的结果了\n\n首先解析 JavaScript 是第一个 macrotasks。\n\n从上往下执行，先打印 `script start`\n\n遇到 setTimeout，不执行，扔到下一个 macrotasks；\n\n遇到 promise ，是异步的，不执行，扔到当前 macrotasks 的 microtasks 中；\n\n到最后一行，打印 `script end`；\n\n然后再去 microtasks 看看有没有事情要做；\n\n然后 打印 `promise1` 和 `promise1`，promise 返回 undefined；\n\n然后再到下一个 macrotasks，发现是 setTimeout，打印 `setTimeout`。\n\n关于 setTimeout 要补充的是：即便主线程为空，0 毫秒实际上也是达不到的。根据 HTML 的标准，最低是 4 毫秒。有兴趣的同学可以自行了解。\n\n觉得自己弄懂了吗？\n\n做个小例子\n\n```javascript\nconsole.log('1')\nasync function func1() {\n  await func2()\n  //以下所有内容都被放置微任务中\n  console.log('a')\n}\nasync function func2() {\n  console.log('b')\n}\nfunc1()\nsetTimeout(function () {\n  console.log('2')\n  Promise.resolve().then(function () {\n    console.log('3')\n  })\n  new Promise(function (resolve) {\n    console.log('4')\n    resolve()\n  }).then(function () {\n    console.log('5')\n  })\n})\nPromise.resolve().then(function () {\n  console.log('6')\n})\nnew Promise(function (resolve) {\n  console.log('7')\n  resolve()\n}).then(function () {\n  console.log('8')\n})\n\nsetTimeout(function () {\n  console.log('9')\n  Promise.resolve().then(function () {\n    console.log('10')\n  })\n  new Promise(function (resolve) {\n    console.log('11')\n    resolve()\n  }).then(function () {\n    console.log('12')\n  })\n})\n```\n\n在 Chrome 输出结果是：1,b,7,a,6,8,2,4,3,5,9,11,10,12\n\n> 引用\n\n- [这一次，彻底弄懂 JavaScript 执行机制](https://juejin.im/post/59e85eebf265da430d571f89#heading-4)\n- [Tasks, microtasks, queues and schedules](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n","slug":"弄懂 JavaScript 执行机制","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpy2002kk4u9anlfgq8f","content":"<p>以前以为 JavaScript 是按照语句执行顺序执行的，直到现在被打脸了</p>\n<span id=\"more\"></span>\n\n<p>举个的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>按照以前的思路，运行结果应该是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script start</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br><span class=\"line\">promise1</span><br><span class=\"line\">promise2</span><br><span class=\"line\">script end</span><br></pre></td></tr></table></figure>\n\n<p>去 Chrome 浏览器里验证了一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script start</span><br><span class=\"line\">script end</span><br><span class=\"line\">promise1</span><br><span class=\"line\">promise2</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<p>而且令人抓狂的是，不同浏览器输出的结果也不尽相同，下文的结果均以 Chrome 的为例。</p>\n<p>要了解为什么会输出这样的结果，我们需要了解 JavaScript 运行机制。</p>\n<p>首先我们要了解 event loop 是怎么处理 macrotasks 和 microtasks 。</p>\n<p>JavaScript 是单线程的，这个 event loop 是持续的运行，而且有许多 macrotasks 在队列等待被执行，但是是浏览器选择怎么执行的。一次鼠标点击事件的回调需要一次 macrotasks ，同样包括解析 HTML， 也包括 setTimeout。</p>\n<p>setTimeout 等待当前 macrotasks 结束，才能执行。这也解释 为什么 setTimeout 在 script end 后面，因为输出 script end 也是第一个 macrotasks 部分之一。</p>\n<p><strong>macrotasks 执行完后不会马上执行下一个 macrotasks，而是会处理当前 macrotasks 产生的 microtasks 队列，然后才会执行下一个 macrotasks。microtasks 一般是异步的操作，比如回调什么的。在处理 microtasks 时产生的 microtasks 也会被加到当前 macrotasks 队列中，最终也会被执行。</strong></p>\n<p>除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p>\n<p><strong>macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval</strong></p>\n<p><strong>micro-task(微任务)：Promise，process.nextTick</strong></p>\n<p>这样我们就能解释上面代码为什么会出现那样的结果了</p>\n<p>首先解析 JavaScript 是第一个 macrotasks。</p>\n<p>从上往下执行，先打印 <code>script start</code></p>\n<p>遇到 setTimeout，不执行，扔到下一个 macrotasks；</p>\n<p>遇到 promise ，是异步的，不执行，扔到当前 macrotasks 的 microtasks 中；</p>\n<p>到最后一行，打印 <code>script end</code>；</p>\n<p>然后再去 microtasks 看看有没有事情要做；</p>\n<p>然后 打印 <code>promise1</code> 和 <code>promise1</code>，promise 返回 undefined；</p>\n<p>然后再到下一个 macrotasks，发现是 setTimeout，打印 <code>setTimeout</code>。</p>\n<p>关于 setTimeout 要补充的是：即便主线程为空，0 毫秒实际上也是达不到的。根据 HTML 的标准，最低是 4 毫秒。有兴趣的同学可以自行了解。</p>\n<p>觉得自己弄懂了吗？</p>\n<p>做个小例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> func2()</span><br><span class=\"line\">  <span class=\"comment\">//以下所有内容都被放置微任务中</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1()</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;11&#x27;</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 Chrome 输出结果是：1,b,7,a,6,8,2,4,3,5,9,11,10,12</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/59e85eebf265da430d571f89#heading-4\">这一次，彻底弄懂 JavaScript 执行机制</a></li>\n<li><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">Tasks, microtasks, queues and schedules</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>以前以为 JavaScript 是按照语句执行顺序执行的，直到现在被打脸了</p>","more":"<p>举个的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>按照以前的思路，运行结果应该是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script start</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br><span class=\"line\">promise1</span><br><span class=\"line\">promise2</span><br><span class=\"line\">script end</span><br></pre></td></tr></table></figure>\n\n<p>去 Chrome 浏览器里验证了一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script start</span><br><span class=\"line\">script end</span><br><span class=\"line\">promise1</span><br><span class=\"line\">promise2</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<p>而且令人抓狂的是，不同浏览器输出的结果也不尽相同，下文的结果均以 Chrome 的为例。</p>\n<p>要了解为什么会输出这样的结果，我们需要了解 JavaScript 运行机制。</p>\n<p>首先我们要了解 event loop 是怎么处理 macrotasks 和 microtasks 。</p>\n<p>JavaScript 是单线程的，这个 event loop 是持续的运行，而且有许多 macrotasks 在队列等待被执行，但是是浏览器选择怎么执行的。一次鼠标点击事件的回调需要一次 macrotasks ，同样包括解析 HTML， 也包括 setTimeout。</p>\n<p>setTimeout 等待当前 macrotasks 结束，才能执行。这也解释 为什么 setTimeout 在 script end 后面，因为输出 script end 也是第一个 macrotasks 部分之一。</p>\n<p><strong>macrotasks 执行完后不会马上执行下一个 macrotasks，而是会处理当前 macrotasks 产生的 microtasks 队列，然后才会执行下一个 macrotasks。microtasks 一般是异步的操作，比如回调什么的。在处理 microtasks 时产生的 microtasks 也会被加到当前 macrotasks 队列中，最终也会被执行。</strong></p>\n<p>除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p>\n<p><strong>macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval</strong></p>\n<p><strong>micro-task(微任务)：Promise，process.nextTick</strong></p>\n<p>这样我们就能解释上面代码为什么会出现那样的结果了</p>\n<p>首先解析 JavaScript 是第一个 macrotasks。</p>\n<p>从上往下执行，先打印 <code>script start</code></p>\n<p>遇到 setTimeout，不执行，扔到下一个 macrotasks；</p>\n<p>遇到 promise ，是异步的，不执行，扔到当前 macrotasks 的 microtasks 中；</p>\n<p>到最后一行，打印 <code>script end</code>；</p>\n<p>然后再去 microtasks 看看有没有事情要做；</p>\n<p>然后 打印 <code>promise1</code> 和 <code>promise1</code>，promise 返回 undefined；</p>\n<p>然后再到下一个 macrotasks，发现是 setTimeout，打印 <code>setTimeout</code>。</p>\n<p>关于 setTimeout 要补充的是：即便主线程为空，0 毫秒实际上也是达不到的。根据 HTML 的标准，最低是 4 毫秒。有兴趣的同学可以自行了解。</p>\n<p>觉得自己弄懂了吗？</p>\n<p>做个小例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> func2()</span><br><span class=\"line\">  <span class=\"comment\">//以下所有内容都被放置微任务中</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1()</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;11&#x27;</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 Chrome 输出结果是：1,b,7,a,6,8,2,4,3,5,9,11,10,12</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/59e85eebf265da430d571f89#heading-4\">这一次，彻底弄懂 JavaScript 执行机制</a></li>\n<li><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">Tasks, microtasks, queues and schedules</a></li>\n</ul>"},{"title":"弄懂 Promise 的 async 和 await","date":"2019-04-23T16:00:00.000Z","updated":"2019-04-23T16:00:00.000Z","_content":"\n在 MDN 中，关于 async function 是这么解释的：async function 声明用于定义一个返回 `AsyncFunction` 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 `Promise` 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数.\n\n<!-- more -->\n\n初读的时候一知半解，但大概了解 async 和 Promise 有关，是一个异步函数，但是像同步函数。\n\n通过例子更直观的了解一下，日常是这么使用 Promise 的：\n\n```javascript\nfunction fn() {\n  return new Promise((resolve, reject) => {\n    // 两个钩子\n    setTimeout(() => {\n      let a = 5\n      resolve(a)\n    }, 1000)\n  })\n}\n\nfn().then(x => {\n  // 注：这个函数和 resolve 不是同一个函数\n  console.log(x)\n})\n```\n\n可以 通过 async await 改写：\n\n```javascript\nfunction fn() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      let a = 5\n      resolve(a)\n    }, 1000)\n  })\n}\n\nasync function test() {\n  // 内部函数有异步操作，所以要用 async 标识\n  let n = await fn()\n  console.log(n)\n}\n\ntest()\n```\n\nawait 一定要和 async 一起使用，单独使用会报错。\n\n除了 resolve ，还要处理 reject ：\n\n```javascript\nfunction fn() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      let a = 5\n      if (a < 3) {\n        resolve(a)\n      } else {\n        reject(a) // 会执行这一步\n      }\n    }, 1000)\n  })\n}\n\nasync function test() {\n  try {\n    let n = await fn()\n    console.log(n)\n  } catch (error) {\n    console.log(`error:${error}`) // error:5\n  }\n}\n\ntest() // error:5\n```\n\n上面两个 await 的例子，可能没有 then 简洁，但是逻辑很“同步”，当有需要处理问题时，不会太容易出错。\n\nawait 后面只能跟一个 Promise，当需要处理多个 PRomise 时，请使用 Promise.all()\n\n> 引用\n\n- [async function\n  ](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function)\n","source":"_posts/弄懂 Promise 的 async 和 await.md","raw":"---\ntitle: 弄懂 Promise 的 async 和 await\ndate: 2019-04-24 00:00:00\nupdated: 2019-04-24 00:00:00\ntags:\n  - Promise\n  - async\n  - await\n---\n\n在 MDN 中，关于 async function 是这么解释的：async function 声明用于定义一个返回 `AsyncFunction` 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 `Promise` 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数.\n\n<!-- more -->\n\n初读的时候一知半解，但大概了解 async 和 Promise 有关，是一个异步函数，但是像同步函数。\n\n通过例子更直观的了解一下，日常是这么使用 Promise 的：\n\n```javascript\nfunction fn() {\n  return new Promise((resolve, reject) => {\n    // 两个钩子\n    setTimeout(() => {\n      let a = 5\n      resolve(a)\n    }, 1000)\n  })\n}\n\nfn().then(x => {\n  // 注：这个函数和 resolve 不是同一个函数\n  console.log(x)\n})\n```\n\n可以 通过 async await 改写：\n\n```javascript\nfunction fn() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      let a = 5\n      resolve(a)\n    }, 1000)\n  })\n}\n\nasync function test() {\n  // 内部函数有异步操作，所以要用 async 标识\n  let n = await fn()\n  console.log(n)\n}\n\ntest()\n```\n\nawait 一定要和 async 一起使用，单独使用会报错。\n\n除了 resolve ，还要处理 reject ：\n\n```javascript\nfunction fn() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      let a = 5\n      if (a < 3) {\n        resolve(a)\n      } else {\n        reject(a) // 会执行这一步\n      }\n    }, 1000)\n  })\n}\n\nasync function test() {\n  try {\n    let n = await fn()\n    console.log(n)\n  } catch (error) {\n    console.log(`error:${error}`) // error:5\n  }\n}\n\ntest() // error:5\n```\n\n上面两个 await 的例子，可能没有 then 简洁，但是逻辑很“同步”，当有需要处理问题时，不会太容易出错。\n\nawait 后面只能跟一个 Promise，当需要处理多个 PRomise 时，请使用 Promise.all()\n\n> 引用\n\n- [async function\n  ](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function)\n","slug":"弄懂 Promise 的 async 和 await","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpy3002mk4u9bwcrg8ij","content":"<p>在 MDN 中，关于 async function 是这么解释的：async function 声明用于定义一个返回 <code>AsyncFunction</code> 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 <code>Promise</code> 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数.</p>\n<span id=\"more\"></span>\n\n<p>初读的时候一知半解，但大概了解 async 和 Promise 有关，是一个异步函数，但是像同步函数。</p>\n<p>通过例子更直观的了解一下，日常是这么使用 Promise 的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 两个钩子</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> a = <span class=\"number\">5</span></span><br><span class=\"line\">      resolve(a)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn().then(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注：这个函数和 resolve 不是同一个函数</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以 通过 async await 改写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> a = <span class=\"number\">5</span></span><br><span class=\"line\">      resolve(a)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 内部函数有异步操作，所以要用 async 标识</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"keyword\">await</span> fn()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<p>await 一定要和 async 一起使用，单独使用会报错。</p>\n<p>除了 resolve ，还要处理 reject ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> a = <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        resolve(a)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(a) <span class=\"comment\">// 会执行这一步</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"keyword\">await</span> fn()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`error:<span class=\"subst\">$&#123;error&#125;</span>`</span>) <span class=\"comment\">// error:5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test() <span class=\"comment\">// error:5</span></span><br></pre></td></tr></table></figure>\n\n<p>上面两个 await 的例子，可能没有 then 简洁，但是逻辑很“同步”，当有需要处理问题时，不会太容易出错。</p>\n<p>await 后面只能跟一个 Promise，当需要处理多个 PRomise 时，请使用 Promise.all()</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function\">async function\n</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在 MDN 中，关于 async function 是这么解释的：async function 声明用于定义一个返回 <code>AsyncFunction</code> 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 <code>Promise</code> 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数.</p>","more":"<p>初读的时候一知半解，但大概了解 async 和 Promise 有关，是一个异步函数，但是像同步函数。</p>\n<p>通过例子更直观的了解一下，日常是这么使用 Promise 的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 两个钩子</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> a = <span class=\"number\">5</span></span><br><span class=\"line\">      resolve(a)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn().then(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注：这个函数和 resolve 不是同一个函数</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以 通过 async await 改写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> a = <span class=\"number\">5</span></span><br><span class=\"line\">      resolve(a)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 内部函数有异步操作，所以要用 async 标识</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"keyword\">await</span> fn()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<p>await 一定要和 async 一起使用，单独使用会报错。</p>\n<p>除了 resolve ，还要处理 reject ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> a = <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        resolve(a)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(a) <span class=\"comment\">// 会执行这一步</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"keyword\">await</span> fn()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`error:<span class=\"subst\">$&#123;error&#125;</span>`</span>) <span class=\"comment\">// error:5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test() <span class=\"comment\">// error:5</span></span><br></pre></td></tr></table></figure>\n\n<p>上面两个 await 的例子，可能没有 then 简洁，但是逻辑很“同步”，当有需要处理问题时，不会太容易出错。</p>\n<p>await 后面只能跟一个 Promise，当需要处理多个 PRomise 时，请使用 Promise.all()</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function\">async function\n</a></li>\n</ul>"},{"title":"手写 Promise","date":"2020-07-26T16:00:00.000Z","updated":"2020-07-26T16:00:00.000Z","_content":"\n现在前端面试越来越高深莫测了，居然还要手写 Promise。不会啊，怎么办！赶紧自己借鉴一下，手撸一个。\n\n<!-- more -->\n\n只实现基础功能和\n\n- Promise 肯定是一个类，同时还定义了 resolve 和 reject 方法 ;\n- Promise 有三个状态 `pending`、`fulfilled`、`rejected`;\n- Promise 的 prototype 上有 then 方法，then 方法会返回一个新的 Promise，可实现链式调用。\n\n```\nfunction Promise(executor) {\n  let self = this\n\n  // 初始的状态\n  self.status = 'pending'\n  // 成功后的值\n  self.value = undefined\n  // 失败的原因\n  self.reason = undefined\n\n  // 成功后的回调\n  self.onResolved = []\n  // 失败后的回调\n  self.onRejected = []\n\n  function resolve(value) {\n    if (self.status === 'pending') {\n      self.status = 'fullfilled'\n      self.value = value\n      self.onResolved.map((fn) => fn())\n    }\n  }\n  function reject(reason) {\n    if (self.status === 'pending') {\n      self.status = 'rejected'\n      self.reason = reason\n      self.onRejected.map((fn) => fn())\n    }\n  }\n\n  try {\n    // 会传2个参数（函数）\n    executor(resolve, reject)\n  } catch (error) {\n    reject(error)\n  }\n}\n\nPromise.prototype.then = function (onFullfilled, onRejected) {\n  let self = this\n  let promise2\n\n  onFullfilled =\n    typeof onFullfilled === 'function' ? onFullfilled : function () {}\n  onRejected = typeof onRejected === 'function' ? onRejected : function () {}\n\n  if (self.status === 'fullfilled') {\n    return (promise2 = new Promise(function (resolve, reject) {\n      // 异步调用\n      setTimeout(() => {\n        try {\n          var x = onFullfilled(self.value)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }))\n  }\n  if (self.status === 'rejected') {\n    return (promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        try {\n          var x = onRejected(self.reason)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }))\n  }\n  if (self.status === 'pending') {\n    return (promise2 = new Promise(function (resolve, reject) {\n      self.onResolved.push(function () {\n        try {\n          var x = onFullfilled(self.value)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n      })\n      self.onRejected.push(function () {\n        try {\n          var x = onRejected(self.reason)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }))\n  }\n  // 返回值不可预估， resolvePromise负责把各种稀奇古怪的 x 包装成一个正常的Promise\n  function resolvePromise(promise2, x, resolve, reject) {\n    if (promise2 === x) {\n      return reject(new TypeError('Chaining cycle detected for promise!'))\n    }\n    if (x instanceof Promise) {\n      x.then(\n        function (data) {\n          resolve(data)\n        },\n        function (e) {\n          reject(e)\n        }\n      )\n      return\n    }\n\n    if (x !== null && (typeof x === 'object' || typeof x === 'function')) {\n      try {\n        var then = x.then\n        var called\n        if (typeof then === 'function') {\n          then.call(\n            x,\n            (y) => {\n              if (called) {\n                return\n              }\n              called = true\n              return resolvePromise(promise2, y, resolve, reject)\n            },\n            (r) => {\n              if (called) {\n                return\n              }\n              called = true\n              return reject(r)\n            }\n          )\n        } else {\n          resolve(x)\n        }\n      } catch (e) {\n        if (called) {\n          return\n        }\n        return reject(e)\n      }\n    } else {\n      resolve(x)\n    }\n  }\n}\n```\n\n> 引用\n\n- [可能是目前最易理解的手写 promise](https://juejin.im/post/5dc383bdf265da4d2d1f6b23#heading-3)\n","source":"_posts/手写 Promise.md","raw":"---\ntitle: 手写 Promise\ndate: 2020-07-27 00:00:00\nupdated: 2020-07-27 00:00:00\ntags:\n  - Promise\n---\n\n现在前端面试越来越高深莫测了，居然还要手写 Promise。不会啊，怎么办！赶紧自己借鉴一下，手撸一个。\n\n<!-- more -->\n\n只实现基础功能和\n\n- Promise 肯定是一个类，同时还定义了 resolve 和 reject 方法 ;\n- Promise 有三个状态 `pending`、`fulfilled`、`rejected`;\n- Promise 的 prototype 上有 then 方法，then 方法会返回一个新的 Promise，可实现链式调用。\n\n```\nfunction Promise(executor) {\n  let self = this\n\n  // 初始的状态\n  self.status = 'pending'\n  // 成功后的值\n  self.value = undefined\n  // 失败的原因\n  self.reason = undefined\n\n  // 成功后的回调\n  self.onResolved = []\n  // 失败后的回调\n  self.onRejected = []\n\n  function resolve(value) {\n    if (self.status === 'pending') {\n      self.status = 'fullfilled'\n      self.value = value\n      self.onResolved.map((fn) => fn())\n    }\n  }\n  function reject(reason) {\n    if (self.status === 'pending') {\n      self.status = 'rejected'\n      self.reason = reason\n      self.onRejected.map((fn) => fn())\n    }\n  }\n\n  try {\n    // 会传2个参数（函数）\n    executor(resolve, reject)\n  } catch (error) {\n    reject(error)\n  }\n}\n\nPromise.prototype.then = function (onFullfilled, onRejected) {\n  let self = this\n  let promise2\n\n  onFullfilled =\n    typeof onFullfilled === 'function' ? onFullfilled : function () {}\n  onRejected = typeof onRejected === 'function' ? onRejected : function () {}\n\n  if (self.status === 'fullfilled') {\n    return (promise2 = new Promise(function (resolve, reject) {\n      // 异步调用\n      setTimeout(() => {\n        try {\n          var x = onFullfilled(self.value)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }))\n  }\n  if (self.status === 'rejected') {\n    return (promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        try {\n          var x = onRejected(self.reason)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }))\n  }\n  if (self.status === 'pending') {\n    return (promise2 = new Promise(function (resolve, reject) {\n      self.onResolved.push(function () {\n        try {\n          var x = onFullfilled(self.value)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n      })\n      self.onRejected.push(function () {\n        try {\n          var x = onRejected(self.reason)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }))\n  }\n  // 返回值不可预估， resolvePromise负责把各种稀奇古怪的 x 包装成一个正常的Promise\n  function resolvePromise(promise2, x, resolve, reject) {\n    if (promise2 === x) {\n      return reject(new TypeError('Chaining cycle detected for promise!'))\n    }\n    if (x instanceof Promise) {\n      x.then(\n        function (data) {\n          resolve(data)\n        },\n        function (e) {\n          reject(e)\n        }\n      )\n      return\n    }\n\n    if (x !== null && (typeof x === 'object' || typeof x === 'function')) {\n      try {\n        var then = x.then\n        var called\n        if (typeof then === 'function') {\n          then.call(\n            x,\n            (y) => {\n              if (called) {\n                return\n              }\n              called = true\n              return resolvePromise(promise2, y, resolve, reject)\n            },\n            (r) => {\n              if (called) {\n                return\n              }\n              called = true\n              return reject(r)\n            }\n          )\n        } else {\n          resolve(x)\n        }\n      } catch (e) {\n        if (called) {\n          return\n        }\n        return reject(e)\n      }\n    } else {\n      resolve(x)\n    }\n  }\n}\n```\n\n> 引用\n\n- [可能是目前最易理解的手写 promise](https://juejin.im/post/5dc383bdf265da4d2d1f6b23#heading-3)\n","slug":"手写 Promise","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpy4002ok4u9gbw5bgon","content":"<p>现在前端面试越来越高深莫测了，居然还要手写 Promise。不会啊，怎么办！赶紧自己借鉴一下，手撸一个。</p>\n<span id=\"more\"></span>\n\n<p>只实现基础功能和</p>\n<ul>\n<li>Promise 肯定是一个类，同时还定义了 resolve 和 reject 方法 ;</li>\n<li>Promise 有三个状态 <code>pending</code>、<code>fulfilled</code>、<code>rejected</code>;</li>\n<li>Promise 的 prototype 上有 then 方法，then 方法会返回一个新的 Promise，可实现链式调用。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Promise(executor) &#123;</span><br><span class=\"line\">  let self = this</span><br><span class=\"line\"></span><br><span class=\"line\">  // 初始的状态</span><br><span class=\"line\">  self.status = &#x27;pending&#x27;</span><br><span class=\"line\">  // 成功后的值</span><br><span class=\"line\">  self.value = undefined</span><br><span class=\"line\">  // 失败的原因</span><br><span class=\"line\">  self.reason = undefined</span><br><span class=\"line\"></span><br><span class=\"line\">  // 成功后的回调</span><br><span class=\"line\">  self.onResolved = []</span><br><span class=\"line\">  // 失败后的回调</span><br><span class=\"line\">  self.onRejected = []</span><br><span class=\"line\"></span><br><span class=\"line\">  function resolve(value) &#123;</span><br><span class=\"line\">    if (self.status === &#x27;pending&#x27;) &#123;</span><br><span class=\"line\">      self.status = &#x27;fullfilled&#x27;</span><br><span class=\"line\">      self.value = value</span><br><span class=\"line\">      self.onResolved.map((fn) =&gt; fn())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function reject(reason) &#123;</span><br><span class=\"line\">    if (self.status === &#x27;pending&#x27;) &#123;</span><br><span class=\"line\">      self.status = &#x27;rejected&#x27;</span><br><span class=\"line\">      self.reason = reason</span><br><span class=\"line\">      self.onRejected.map((fn) =&gt; fn())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    // 会传2个参数（函数）</span><br><span class=\"line\">    executor(resolve, reject)</span><br><span class=\"line\">  &#125; catch (error) &#123;</span><br><span class=\"line\">    reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.prototype.then = function (onFullfilled, onRejected) &#123;</span><br><span class=\"line\">  let self = this</span><br><span class=\"line\">  let promise2</span><br><span class=\"line\"></span><br><span class=\"line\">  onFullfilled =</span><br><span class=\"line\">    typeof onFullfilled === &#x27;function&#x27; ? onFullfilled : function () &#123;&#125;</span><br><span class=\"line\">  onRejected = typeof onRejected === &#x27;function&#x27; ? onRejected : function () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (self.status === &#x27;fullfilled&#x27;) &#123;</span><br><span class=\"line\">    return (promise2 = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">      // 异步调用</span><br><span class=\"line\">      setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x = onFullfilled(self.value)</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (self.status === &#x27;rejected&#x27;) &#123;</span><br><span class=\"line\">    return (promise2 = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">      setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x = onRejected(self.reason)</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (self.status === &#x27;pending&#x27;) &#123;</span><br><span class=\"line\">    return (promise2 = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">      self.onResolved.push(function () &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x = onFullfilled(self.value)</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      self.onRejected.push(function () &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x = onRejected(self.reason)</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 返回值不可预估， resolvePromise负责把各种稀奇古怪的 x 包装成一个正常的Promise</span><br><span class=\"line\">  function resolvePromise(promise2, x, resolve, reject) &#123;</span><br><span class=\"line\">    if (promise2 === x) &#123;</span><br><span class=\"line\">      return reject(new TypeError(&#x27;Chaining cycle detected for promise!&#x27;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (x instanceof Promise) &#123;</span><br><span class=\"line\">      x.then(</span><br><span class=\"line\">        function (data) &#123;</span><br><span class=\"line\">          resolve(data)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        function (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (x !== null &amp;&amp; (typeof x === &#x27;object&#x27; || typeof x === &#x27;function&#x27;)) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        var then = x.then</span><br><span class=\"line\">        var called</span><br><span class=\"line\">        if (typeof then === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">          then.call(</span><br><span class=\"line\">            x,</span><br><span class=\"line\">            (y) =&gt; &#123;</span><br><span class=\"line\">              if (called) &#123;</span><br><span class=\"line\">                return</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              called = true</span><br><span class=\"line\">              return resolvePromise(promise2, y, resolve, reject)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            (r) =&gt; &#123;</span><br><span class=\"line\">              if (called) &#123;</span><br><span class=\"line\">                return</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              called = true</span><br><span class=\"line\">              return reject(r)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (e) &#123;</span><br><span class=\"line\">        if (called) &#123;</span><br><span class=\"line\">          return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return reject(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      resolve(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/5dc383bdf265da4d2d1f6b23#heading-3\">可能是目前最易理解的手写 promise</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>现在前端面试越来越高深莫测了，居然还要手写 Promise。不会啊，怎么办！赶紧自己借鉴一下，手撸一个。</p>","more":"<p>只实现基础功能和</p>\n<ul>\n<li>Promise 肯定是一个类，同时还定义了 resolve 和 reject 方法 ;</li>\n<li>Promise 有三个状态 <code>pending</code>、<code>fulfilled</code>、<code>rejected</code>;</li>\n<li>Promise 的 prototype 上有 then 方法，then 方法会返回一个新的 Promise，可实现链式调用。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Promise(executor) &#123;</span><br><span class=\"line\">  let self = this</span><br><span class=\"line\"></span><br><span class=\"line\">  // 初始的状态</span><br><span class=\"line\">  self.status = &#x27;pending&#x27;</span><br><span class=\"line\">  // 成功后的值</span><br><span class=\"line\">  self.value = undefined</span><br><span class=\"line\">  // 失败的原因</span><br><span class=\"line\">  self.reason = undefined</span><br><span class=\"line\"></span><br><span class=\"line\">  // 成功后的回调</span><br><span class=\"line\">  self.onResolved = []</span><br><span class=\"line\">  // 失败后的回调</span><br><span class=\"line\">  self.onRejected = []</span><br><span class=\"line\"></span><br><span class=\"line\">  function resolve(value) &#123;</span><br><span class=\"line\">    if (self.status === &#x27;pending&#x27;) &#123;</span><br><span class=\"line\">      self.status = &#x27;fullfilled&#x27;</span><br><span class=\"line\">      self.value = value</span><br><span class=\"line\">      self.onResolved.map((fn) =&gt; fn())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function reject(reason) &#123;</span><br><span class=\"line\">    if (self.status === &#x27;pending&#x27;) &#123;</span><br><span class=\"line\">      self.status = &#x27;rejected&#x27;</span><br><span class=\"line\">      self.reason = reason</span><br><span class=\"line\">      self.onRejected.map((fn) =&gt; fn())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    // 会传2个参数（函数）</span><br><span class=\"line\">    executor(resolve, reject)</span><br><span class=\"line\">  &#125; catch (error) &#123;</span><br><span class=\"line\">    reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.prototype.then = function (onFullfilled, onRejected) &#123;</span><br><span class=\"line\">  let self = this</span><br><span class=\"line\">  let promise2</span><br><span class=\"line\"></span><br><span class=\"line\">  onFullfilled =</span><br><span class=\"line\">    typeof onFullfilled === &#x27;function&#x27; ? onFullfilled : function () &#123;&#125;</span><br><span class=\"line\">  onRejected = typeof onRejected === &#x27;function&#x27; ? onRejected : function () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (self.status === &#x27;fullfilled&#x27;) &#123;</span><br><span class=\"line\">    return (promise2 = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">      // 异步调用</span><br><span class=\"line\">      setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x = onFullfilled(self.value)</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (self.status === &#x27;rejected&#x27;) &#123;</span><br><span class=\"line\">    return (promise2 = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">      setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x = onRejected(self.reason)</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (self.status === &#x27;pending&#x27;) &#123;</span><br><span class=\"line\">    return (promise2 = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">      self.onResolved.push(function () &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x = onFullfilled(self.value)</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      self.onRejected.push(function () &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x = onRejected(self.reason)</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 返回值不可预估， resolvePromise负责把各种稀奇古怪的 x 包装成一个正常的Promise</span><br><span class=\"line\">  function resolvePromise(promise2, x, resolve, reject) &#123;</span><br><span class=\"line\">    if (promise2 === x) &#123;</span><br><span class=\"line\">      return reject(new TypeError(&#x27;Chaining cycle detected for promise!&#x27;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (x instanceof Promise) &#123;</span><br><span class=\"line\">      x.then(</span><br><span class=\"line\">        function (data) &#123;</span><br><span class=\"line\">          resolve(data)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        function (e) &#123;</span><br><span class=\"line\">          reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (x !== null &amp;&amp; (typeof x === &#x27;object&#x27; || typeof x === &#x27;function&#x27;)) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        var then = x.then</span><br><span class=\"line\">        var called</span><br><span class=\"line\">        if (typeof then === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">          then.call(</span><br><span class=\"line\">            x,</span><br><span class=\"line\">            (y) =&gt; &#123;</span><br><span class=\"line\">              if (called) &#123;</span><br><span class=\"line\">                return</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              called = true</span><br><span class=\"line\">              return resolvePromise(promise2, y, resolve, reject)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            (r) =&gt; &#123;</span><br><span class=\"line\">              if (called) &#123;</span><br><span class=\"line\">                return</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              called = true</span><br><span class=\"line\">              return reject(r)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (e) &#123;</span><br><span class=\"line\">        if (called) &#123;</span><br><span class=\"line\">          return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return reject(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      resolve(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/5dc383bdf265da4d2d1f6b23#heading-3\">可能是目前最易理解的手写 promise</a></li>\n</ul>"},{"title":"手写一个批量请求函数","date":"2021-06-08T16:00:00.000Z","updated":"2021-06-08T16:00:00.000Z","_content":"\n> 要求如下\n\n1. 要求最大并发数 maxNum;\n2. 每当有一个请求返回，就留下一个空位，可以增加新的请求;\n3. 所有请求完成后，结果按照 urls 里面的顺序依次打出。\n\n<!-- more -->\n\n```javascript\n// 这题如果maxNum 为无限大，其实就是在让你实现Promise.all\n// 如果是有一个失败就返回 就是Promise.race\nmultiRequest(urls, maxNum){\n  function multiRequest(urls = [], maxNum) {\n    const total = urls.length\n    const result = new Array(total).fill(false)\n    let count = 0 // 进行到第几个\n    return new Promise((resolve, reject) => {\n      while (count < maxNum) {\n        next()\n      }\n\n      function next() {\n        const current = count++\n        if (current >= total) {\n          !result.includes(false) && resolve(result)\n          return\n        }\n        fetch(urls[current]).finally((res) => {\n          result[current] = res\n          if (current < total) {\n            next()\n          }\n        })\n      }\n    })\n  }\n```\n\n> 引用\n\n- [第 153 题：实现一个批量请求函数](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/378)\n","source":"_posts/手写一个批量请求函数.md","raw":"---\ntitle: 手写一个批量请求函数\ndate: 2021-06-09 00:00:00\nupdated: 2021-06-09 00:00:00\ntags:\n  - JavaScript\n---\n\n> 要求如下\n\n1. 要求最大并发数 maxNum;\n2. 每当有一个请求返回，就留下一个空位，可以增加新的请求;\n3. 所有请求完成后，结果按照 urls 里面的顺序依次打出。\n\n<!-- more -->\n\n```javascript\n// 这题如果maxNum 为无限大，其实就是在让你实现Promise.all\n// 如果是有一个失败就返回 就是Promise.race\nmultiRequest(urls, maxNum){\n  function multiRequest(urls = [], maxNum) {\n    const total = urls.length\n    const result = new Array(total).fill(false)\n    let count = 0 // 进行到第几个\n    return new Promise((resolve, reject) => {\n      while (count < maxNum) {\n        next()\n      }\n\n      function next() {\n        const current = count++\n        if (current >= total) {\n          !result.includes(false) && resolve(result)\n          return\n        }\n        fetch(urls[current]).finally((res) => {\n          result[current] = res\n          if (current < total) {\n            next()\n          }\n        })\n      }\n    })\n  }\n```\n\n> 引用\n\n- [第 153 题：实现一个批量请求函数](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/378)\n","slug":"手写一个批量请求函数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpy5002rk4u92yjsb8vs","content":"<blockquote>\n<p>要求如下</p>\n</blockquote>\n<ol>\n<li>要求最大并发数 maxNum;</li>\n<li>每当有一个请求返回，就留下一个空位，可以增加新的请求;</li>\n<li>所有请求完成后，结果按照 urls 里面的顺序依次打出。</li>\n</ol>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这题如果maxNum 为无限大，其实就是在让你实现Promise.all</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是有一个失败就返回 就是Promise.race</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">multiRequest</span>(<span class=\"params\">urls, maxNum</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiRequest</span>(<span class=\"params\">urls = [], maxNum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> total = urls.length</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(total).fill(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span> <span class=\"comment\">// 进行到第几个</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (count &lt; maxNum) &#123;</span><br><span class=\"line\">        next()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> current = count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current &gt;= total) &#123;</span><br><span class=\"line\">          !result.includes(<span class=\"literal\">false</span>) &amp;&amp; resolve(result)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fetch(urls[current]).finally(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[current] = res</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (current &lt; total) &#123;</span><br><span class=\"line\">            next()</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/378\">第 153 题：实现一个批量请求函数</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>要求如下</p>\n</blockquote>\n<ol>\n<li>要求最大并发数 maxNum;</li>\n<li>每当有一个请求返回，就留下一个空位，可以增加新的请求;</li>\n<li>所有请求完成后，结果按照 urls 里面的顺序依次打出。</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这题如果maxNum 为无限大，其实就是在让你实现Promise.all</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是有一个失败就返回 就是Promise.race</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">multiRequest</span>(<span class=\"params\">urls, maxNum</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiRequest</span>(<span class=\"params\">urls = [], maxNum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> total = urls.length</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(total).fill(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span> <span class=\"comment\">// 进行到第几个</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (count &lt; maxNum) &#123;</span><br><span class=\"line\">        next()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> current = count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current &gt;= total) &#123;</span><br><span class=\"line\">          !result.includes(<span class=\"literal\">false</span>) &amp;&amp; resolve(result)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fetch(urls[current]).finally(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[current] = res</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (current &lt; total) &#123;</span><br><span class=\"line\">            next()</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/378\">第 153 题：实现一个批量请求函数</a></li>\n</ul>"},{"title":"插入排序代码分析","date":"2018-10-22T16:00:00.000Z","updated":"2018-10-22T16:00:00.000Z","_content":"\n### 直接插入排序 JavaScript 实现代码：\n\n<!-- more -->\n\n```javascript\nfunction insertionSort(array) {\n  //自定义函数，交换i和j的位置\n  function swap(array, i, j) {\n    var temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n  }\n\n  var length = array.length,\n    i, //从第二项开始，与前一项作比较\n    j //为了往前进行比较\n  for (i = 1; i < length; i++) {\n    for (j = i; j > 0; j--) {\n      //从第j项开始，与前一项比较大小，如果前项大于后项，则交换位置；如果前项小于等于后项，说明当前排序完成，跳出当前循环，i++进行下一项比较，直到最后一项。\n      if (array[j - 1] > array[j]) {\n        swap(array, j - 1, j)\n      } else {\n        break\n      }\n    }\n  }\n  return array\n}\n```\n\n### 直接插入排序 JavaScript 实现代码，减少交换次数：\n\n```javascript\nfunction insertionSort(array) {\n  var length = array.length,\n    i,\n    j,\n    temp //为了临时保存arr[i]\n  for (i = 1; i < length; i++) {\n    temp = array[i] //因为如果前一项比后一项大，则前一项要移到后一项，会覆盖第项的值，直到第j项时，j-1小于等于第j项，说明之前第i项的顺序在第j项\n    for (j = i; j >= 0; j--) {\n      if (array[j - 1] > temp) {\n        array[j] = array[j - 1]\n      } else {\n        array[j] = temp\n        break\n      }\n    }\n  }\n  return array\n}\n```\n\n### 直接插入排序 JavaScript 实现代码，二分查找排序\n\n```javascript\nfunction insertionSort2(array) {\n  function binarySearch(array, start, end, temp) {\n    var middle\n    while (start <= end) {\n      //向下取整，获得中间的坐标\n      middle = Math.floor((start + end) / 2)\n      if (array[middle] < temp) {\n        //说明temp在middle坐标后\n        if (temp <= array[middle + 1]) {\n          //说明第middle+1项刚大于middle项，返回middle+1\n          return middle + 1\n        } else {\n          //范围减1，再次进行while循环，直到找到temp顺序位置\n          start = middle + 1\n        }\n      } else {\n        //说明temp的顺序位置在middle之前\n        if (end === 0) {\n          //使用==的都使用===\n          //说明temp最小\n          return 0\n        } else {\n          //从0-middle开始找\n          end = middle\n        }\n      }\n    }\n  }\n  function binarySort(array) {\n    var length = array.length,\n      i,\n      j,\n      k,\n      temp\n    for (i = 1; i < length; i++) {\n      temp = array[i]\n      if (array[i - 1] <= temp) {\n        //前一项刚好小于等于第i项，不用再进行排序\n        k = i\n      } else {\n        //进行二分查找\n        k = binarySearch(array, 0, i - 1, temp)\n        //找到temp的坐标k，将坐标后的都往后移一位\n        for (j = i; j > k; j--) {\n          array[j] = array[j - 1]\n        }\n      }\n      array[k] = temp\n    }\n    return array\n  }\n  return binarySort(array)\n}\n```\n\n> 引用\n\n- [常见排序算法 - 插入排序 (Insertion Sort)](http://bubkoo.com/2014/01/14/sort-algorithm/insertion-sort/)\n- [为什么推荐使用 === 不推荐 ==](https://zhuanlan.zhihu.com/p/22745278)\n","source":"_posts/插入排序代码分析.md","raw":"---\ntitle: 插入排序代码分析\ndate: 2018-10-23 00:00:00\nupdated: 2018-10-23 00:00:00\ntags:\n  - 算法\n  - 排序\n  - JavaScript\n---\n\n### 直接插入排序 JavaScript 实现代码：\n\n<!-- more -->\n\n```javascript\nfunction insertionSort(array) {\n  //自定义函数，交换i和j的位置\n  function swap(array, i, j) {\n    var temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n  }\n\n  var length = array.length,\n    i, //从第二项开始，与前一项作比较\n    j //为了往前进行比较\n  for (i = 1; i < length; i++) {\n    for (j = i; j > 0; j--) {\n      //从第j项开始，与前一项比较大小，如果前项大于后项，则交换位置；如果前项小于等于后项，说明当前排序完成，跳出当前循环，i++进行下一项比较，直到最后一项。\n      if (array[j - 1] > array[j]) {\n        swap(array, j - 1, j)\n      } else {\n        break\n      }\n    }\n  }\n  return array\n}\n```\n\n### 直接插入排序 JavaScript 实现代码，减少交换次数：\n\n```javascript\nfunction insertionSort(array) {\n  var length = array.length,\n    i,\n    j,\n    temp //为了临时保存arr[i]\n  for (i = 1; i < length; i++) {\n    temp = array[i] //因为如果前一项比后一项大，则前一项要移到后一项，会覆盖第项的值，直到第j项时，j-1小于等于第j项，说明之前第i项的顺序在第j项\n    for (j = i; j >= 0; j--) {\n      if (array[j - 1] > temp) {\n        array[j] = array[j - 1]\n      } else {\n        array[j] = temp\n        break\n      }\n    }\n  }\n  return array\n}\n```\n\n### 直接插入排序 JavaScript 实现代码，二分查找排序\n\n```javascript\nfunction insertionSort2(array) {\n  function binarySearch(array, start, end, temp) {\n    var middle\n    while (start <= end) {\n      //向下取整，获得中间的坐标\n      middle = Math.floor((start + end) / 2)\n      if (array[middle] < temp) {\n        //说明temp在middle坐标后\n        if (temp <= array[middle + 1]) {\n          //说明第middle+1项刚大于middle项，返回middle+1\n          return middle + 1\n        } else {\n          //范围减1，再次进行while循环，直到找到temp顺序位置\n          start = middle + 1\n        }\n      } else {\n        //说明temp的顺序位置在middle之前\n        if (end === 0) {\n          //使用==的都使用===\n          //说明temp最小\n          return 0\n        } else {\n          //从0-middle开始找\n          end = middle\n        }\n      }\n    }\n  }\n  function binarySort(array) {\n    var length = array.length,\n      i,\n      j,\n      k,\n      temp\n    for (i = 1; i < length; i++) {\n      temp = array[i]\n      if (array[i - 1] <= temp) {\n        //前一项刚好小于等于第i项，不用再进行排序\n        k = i\n      } else {\n        //进行二分查找\n        k = binarySearch(array, 0, i - 1, temp)\n        //找到temp的坐标k，将坐标后的都往后移一位\n        for (j = i; j > k; j--) {\n          array[j] = array[j - 1]\n        }\n      }\n      array[k] = temp\n    }\n    return array\n  }\n  return binarySort(array)\n}\n```\n\n> 引用\n\n- [常见排序算法 - 插入排序 (Insertion Sort)](http://bubkoo.com/2014/01/14/sort-algorithm/insertion-sort/)\n- [为什么推荐使用 === 不推荐 ==](https://zhuanlan.zhihu.com/p/22745278)\n","slug":"插入排序代码分析","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpy7002tk4u94oob2448","content":"<h3 id=\"直接插入排序-JavaScript-实现代码：\"><a href=\"#直接插入排序-JavaScript-实现代码：\" class=\"headerlink\" title=\"直接插入排序 JavaScript 实现代码：\"></a>直接插入排序 JavaScript 实现代码：</h3><span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//自定义函数，交换i和j的位置</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">array, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = array[i]</span><br><span class=\"line\">    array[i] = array[j]</span><br><span class=\"line\">    array[j] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = array.length,</span><br><span class=\"line\">    i, <span class=\"comment\">//从第二项开始，与前一项作比较</span></span><br><span class=\"line\">    j <span class=\"comment\">//为了往前进行比较</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//从第j项开始，与前一项比较大小，如果前项大于后项，则交换位置；如果前项小于等于后项，说明当前排序完成，跳出当前循环，i++进行下一项比较，直到最后一项。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j - <span class=\"number\">1</span>] &gt; array[j]) &#123;</span><br><span class=\"line\">        swap(array, j - <span class=\"number\">1</span>, j)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"直接插入排序-JavaScript-实现代码，减少交换次数：\"><a href=\"#直接插入排序-JavaScript-实现代码，减少交换次数：\" class=\"headerlink\" title=\"直接插入排序 JavaScript 实现代码，减少交换次数：\"></a>直接插入排序 JavaScript 实现代码，减少交换次数：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = array.length,</span><br><span class=\"line\">    i,</span><br><span class=\"line\">    j,</span><br><span class=\"line\">    temp <span class=\"comment\">//为了临时保存arr[i]</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    temp = array[i] <span class=\"comment\">//因为如果前一项比后一项大，则前一项要移到后一项，会覆盖第项的值，直到第j项时，j-1小于等于第j项，说明之前第i项的顺序在第j项</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = i; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">        array[j] = array[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        array[j] = temp</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"直接插入排序-JavaScript-实现代码，二分查找排序\"><a href=\"#直接插入排序-JavaScript-实现代码，二分查找排序\" class=\"headerlink\" title=\"直接插入排序 JavaScript 实现代码，二分查找排序\"></a>直接插入排序 JavaScript 实现代码，二分查找排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort2</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, start, end, temp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> middle</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//向下取整，获得中间的坐标</span></span><br><span class=\"line\">      middle = <span class=\"built_in\">Math</span>.floor((start + end) / <span class=\"number\">2</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[middle] &lt; temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//说明temp在middle坐标后</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp &lt;= array[middle + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//说明第middle+1项刚大于middle项，返回middle+1</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> middle + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//范围减1，再次进行while循环，直到找到temp顺序位置</span></span><br><span class=\"line\">          start = middle + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//说明temp的顺序位置在middle之前</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//使用==的都使用===</span></span><br><span class=\"line\">          <span class=\"comment\">//说明temp最小</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//从0-middle开始找</span></span><br><span class=\"line\">          end = middle</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = array.length,</span><br><span class=\"line\">      i,</span><br><span class=\"line\">      j,</span><br><span class=\"line\">      k,</span><br><span class=\"line\">      temp</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      temp = array[i]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[i - <span class=\"number\">1</span>] &lt;= temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//前一项刚好小于等于第i项，不用再进行排序</span></span><br><span class=\"line\">        k = i</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//进行二分查找</span></span><br><span class=\"line\">        k = binarySearch(array, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>, temp)</span><br><span class=\"line\">        <span class=\"comment\">//找到temp的坐标k，将坐标后的都往后移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i; j &gt; k; j--) &#123;</span><br><span class=\"line\">          array[j] = array[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      array[k] = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> binarySort(array)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"http://bubkoo.com/2014/01/14/sort-algorithm/insertion-sort/\">常见排序算法 - 插入排序 (Insertion Sort)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22745278\">为什么推荐使用 === 不推荐 ==</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"直接插入排序-JavaScript-实现代码：\"><a href=\"#直接插入排序-JavaScript-实现代码：\" class=\"headerlink\" title=\"直接插入排序 JavaScript 实现代码：\"></a>直接插入排序 JavaScript 实现代码：</h3>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//自定义函数，交换i和j的位置</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">array, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = array[i]</span><br><span class=\"line\">    array[i] = array[j]</span><br><span class=\"line\">    array[j] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = array.length,</span><br><span class=\"line\">    i, <span class=\"comment\">//从第二项开始，与前一项作比较</span></span><br><span class=\"line\">    j <span class=\"comment\">//为了往前进行比较</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//从第j项开始，与前一项比较大小，如果前项大于后项，则交换位置；如果前项小于等于后项，说明当前排序完成，跳出当前循环，i++进行下一项比较，直到最后一项。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j - <span class=\"number\">1</span>] &gt; array[j]) &#123;</span><br><span class=\"line\">        swap(array, j - <span class=\"number\">1</span>, j)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"直接插入排序-JavaScript-实现代码，减少交换次数：\"><a href=\"#直接插入排序-JavaScript-实现代码，减少交换次数：\" class=\"headerlink\" title=\"直接插入排序 JavaScript 实现代码，减少交换次数：\"></a>直接插入排序 JavaScript 实现代码，减少交换次数：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = array.length,</span><br><span class=\"line\">    i,</span><br><span class=\"line\">    j,</span><br><span class=\"line\">    temp <span class=\"comment\">//为了临时保存arr[i]</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    temp = array[i] <span class=\"comment\">//因为如果前一项比后一项大，则前一项要移到后一项，会覆盖第项的值，直到第j项时，j-1小于等于第j项，说明之前第i项的顺序在第j项</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = i; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">        array[j] = array[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        array[j] = temp</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"直接插入排序-JavaScript-实现代码，二分查找排序\"><a href=\"#直接插入排序-JavaScript-实现代码，二分查找排序\" class=\"headerlink\" title=\"直接插入排序 JavaScript 实现代码，二分查找排序\"></a>直接插入排序 JavaScript 实现代码，二分查找排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort2</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, start, end, temp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> middle</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//向下取整，获得中间的坐标</span></span><br><span class=\"line\">      middle = <span class=\"built_in\">Math</span>.floor((start + end) / <span class=\"number\">2</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[middle] &lt; temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//说明temp在middle坐标后</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp &lt;= array[middle + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//说明第middle+1项刚大于middle项，返回middle+1</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> middle + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//范围减1，再次进行while循环，直到找到temp顺序位置</span></span><br><span class=\"line\">          start = middle + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//说明temp的顺序位置在middle之前</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//使用==的都使用===</span></span><br><span class=\"line\">          <span class=\"comment\">//说明temp最小</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//从0-middle开始找</span></span><br><span class=\"line\">          end = middle</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = array.length,</span><br><span class=\"line\">      i,</span><br><span class=\"line\">      j,</span><br><span class=\"line\">      k,</span><br><span class=\"line\">      temp</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      temp = array[i]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[i - <span class=\"number\">1</span>] &lt;= temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//前一项刚好小于等于第i项，不用再进行排序</span></span><br><span class=\"line\">        k = i</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//进行二分查找</span></span><br><span class=\"line\">        k = binarySearch(array, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>, temp)</span><br><span class=\"line\">        <span class=\"comment\">//找到temp的坐标k，将坐标后的都往后移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i; j &gt; k; j--) &#123;</span><br><span class=\"line\">          array[j] = array[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      array[k] = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> binarySort(array)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"http://bubkoo.com/2014/01/14/sort-algorithm/insertion-sort/\">常见排序算法 - 插入排序 (Insertion Sort)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22745278\">为什么推荐使用 === 不推荐 ==</a></li>\n</ul>"},{"title":"插槽slot","date":"2019-04-15T16:00:00.000Z","updated":"2019-04-15T16:00:00.000Z","_content":"\nslot 将父组件的内容传给子组件，弥补视图缺失\n\n<!-- more -->\n\n# 插槽的用法\n\n```html\n<div id=\"app\">\n  <child>\n    <p>父组件的内容</p>\n  </child>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n<script type=\"text/javascript\">\n  Vue.component('child', {\n    template: `\n    <div>\n      <slot>如果父组件没有插入内容，就默认出现这个</slot>\n    </div>\n    `\n  })\n\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n# 具名插槽\n\n倘若我们需要多个插槽，我们可以给插槽一个 name 属性，一个不带 name 的 `<slot>` 出口会带有隐含的名字“default”。\n\n```html\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n在向具名插槽提供内容的时候，我们可以在一个 <template> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称：\n\n```html\n<base-layout>\n  <template v-slot:header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <p>A paragraph for the main content.</p>\n  <p>And another one.</p>\n\n  <template v-slot:footer>\n    <p>Here's some contact info</p>\n  </template>\n</base-layout>\n```\n\n# 作用域插槽\n\n让插槽内容能够访问子组件中才有的数据。\n\n```html\n<div id=\"app\">\n  <child>\n    <template scope=\"xxx\"> {{xxx.text}} </template>\n  </child>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n<script type=\"text/javascript\">\n  Vue.component('child', {\n    render(createElement) {\n      return createElement(\n        'div',\n        this.$scopedSlots.default({\n          text: 'xxx'\n        })\n      )\n    }\n  })\n\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n# 访问 slot 里的内容\n\n通过 this.$slots 访问静态插槽的内容，得到的是一个 VNodes 数组\n\n# 动态组件\n\n```html\n<div id=\"dynamic-component-demo\" class=\"demo\">\n  <button\n    v-for=\"tab in tabs\"\n    v-bind:key=\"tab\"\n    v-bind:class=\"['tab-button', { active: currentTab === tab }]\"\n    v-on:click=\"currentTab = tab\"\n  >\n    {{ tab }}\n  </button>\n\n  <component v-bind:is=\"currentTabComponent\" class=\"tab\"></component>\n</div>\n<script>\n  Vue.component('tab-home', {\n    template: '<div>Home component</div>'\n  })\n  Vue.component('tab-posts', {\n    template: '<div>Posts component</div>'\n  })\n  Vue.component('tab-archive', {\n    template: '<div>Archive component</div>'\n  })\n\n  new Vue({\n    el: '#dynamic-component-demo',\n    data: {\n      currentTab: 'Home',\n      tabs: ['Home', 'Posts', 'Archive']\n    },\n    computed: {\n      currentTabComponent: function () {\n        return 'tab-' + this.currentTab.toLowerCase()\n      }\n    }\n  })\n</script>\n```\n","source":"_posts/插槽slot.md","raw":"---\ntitle: 插槽slot\ndate: 2019-04-16 00:00:00\nupdated: 2019-04-16 00:00:00\ntags:\n  - Vue\n  - slot\n---\n\nslot 将父组件的内容传给子组件，弥补视图缺失\n\n<!-- more -->\n\n# 插槽的用法\n\n```html\n<div id=\"app\">\n  <child>\n    <p>父组件的内容</p>\n  </child>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n<script type=\"text/javascript\">\n  Vue.component('child', {\n    template: `\n    <div>\n      <slot>如果父组件没有插入内容，就默认出现这个</slot>\n    </div>\n    `\n  })\n\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n# 具名插槽\n\n倘若我们需要多个插槽，我们可以给插槽一个 name 属性，一个不带 name 的 `<slot>` 出口会带有隐含的名字“default”。\n\n```html\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n在向具名插槽提供内容的时候，我们可以在一个 <template> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称：\n\n```html\n<base-layout>\n  <template v-slot:header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <p>A paragraph for the main content.</p>\n  <p>And another one.</p>\n\n  <template v-slot:footer>\n    <p>Here's some contact info</p>\n  </template>\n</base-layout>\n```\n\n# 作用域插槽\n\n让插槽内容能够访问子组件中才有的数据。\n\n```html\n<div id=\"app\">\n  <child>\n    <template scope=\"xxx\"> {{xxx.text}} </template>\n  </child>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n<script type=\"text/javascript\">\n  Vue.component('child', {\n    render(createElement) {\n      return createElement(\n        'div',\n        this.$scopedSlots.default({\n          text: 'xxx'\n        })\n      )\n    }\n  })\n\n  let vm = new Vue({\n    el: '#app',\n    data: {}\n  })\n</script>\n```\n\n# 访问 slot 里的内容\n\n通过 this.$slots 访问静态插槽的内容，得到的是一个 VNodes 数组\n\n# 动态组件\n\n```html\n<div id=\"dynamic-component-demo\" class=\"demo\">\n  <button\n    v-for=\"tab in tabs\"\n    v-bind:key=\"tab\"\n    v-bind:class=\"['tab-button', { active: currentTab === tab }]\"\n    v-on:click=\"currentTab = tab\"\n  >\n    {{ tab }}\n  </button>\n\n  <component v-bind:is=\"currentTabComponent\" class=\"tab\"></component>\n</div>\n<script>\n  Vue.component('tab-home', {\n    template: '<div>Home component</div>'\n  })\n  Vue.component('tab-posts', {\n    template: '<div>Posts component</div>'\n  })\n  Vue.component('tab-archive', {\n    template: '<div>Archive component</div>'\n  })\n\n  new Vue({\n    el: '#dynamic-component-demo',\n    data: {\n      currentTab: 'Home',\n      tabs: ['Home', 'Posts', 'Archive']\n    },\n    computed: {\n      currentTabComponent: function () {\n        return 'tab-' + this.currentTab.toLowerCase()\n      }\n    }\n  })\n</script>\n```\n","slug":"插槽slot","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpy9002vk4u9d6q33crw","content":"<p>slot 将父组件的内容传给子组件，弥补视图缺失</p>\n<span id=\"more\"></span>\n\n<h1 id=\"插槽的用法\"><a href=\"#插槽的用法\" class=\"headerlink\" title=\"插槽的用法\"></a>插槽的用法</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>父组件的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">      &lt;slot&gt;如果父组件没有插入内容，就默认出现这个&lt;/slot&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    `</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h1><p>倘若我们需要多个插槽，我们可以给插槽一个 name 属性，一个不带 name 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在向具名插槽提供内容的时候，我们可以在一个 <template> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h1><p>让插槽内容能够访问子组件中才有的数据。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;xxx&quot;</span>&gt;</span> &#123;&#123;xxx.text&#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> createElement(</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">&#x27;div&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.$scopedSlots.default(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">text</span>: <span class=\"string\">&#x27;xxx&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">      )</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"访问-slot-里的内容\"><a href=\"#访问-slot-里的内容\" class=\"headerlink\" title=\"访问 slot 里的内容\"></a>访问 slot 里的内容</h1><p>通过 this.$slots 访问静态插槽的内容，得到的是一个 VNodes 数组</p>\n<h1 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dynamic-component-demo&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;tab in tabs&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:key</span>=<span class=\"string\">&quot;tab&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;[&#x27;tab-button&#x27;, &#123; active: currentTab === tab &#125;]&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;currentTab = tab&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; tab &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">&quot;currentTabComponent&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;tab-home&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;div&gt;Home component&lt;/div&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;tab-posts&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;div&gt;Posts component&lt;/div&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;tab-archive&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;div&gt;Archive component&lt;/div&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#dynamic-component-demo&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">currentTab</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">tabs</span>: [<span class=\"string\">&#x27;Home&#x27;</span>, <span class=\"string\">&#x27;Posts&#x27;</span>, <span class=\"string\">&#x27;Archive&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">currentTabComponent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;tab-&#x27;</span> + <span class=\"built_in\">this</span>.currentTab.toLowerCase()</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>slot 将父组件的内容传给子组件，弥补视图缺失</p>","more":"<h1 id=\"插槽的用法\"><a href=\"#插槽的用法\" class=\"headerlink\" title=\"插槽的用法\"></a>插槽的用法</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>父组件的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">      &lt;slot&gt;如果父组件没有插入内容，就默认出现这个&lt;/slot&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"javascript\">    `</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h1><p>倘若我们需要多个插槽，我们可以给插槽一个 name 属性，一个不带 name 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在向具名插槽提供内容的时候，我们可以在一个 <template> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h1><p>让插槽内容能够访问子组件中才有的数据。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;xxx&quot;</span>&gt;</span> &#123;&#123;xxx.text&#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> createElement(</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">&#x27;div&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.$scopedSlots.default(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">text</span>: <span class=\"string\">&#x27;xxx&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">      )</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"访问-slot-里的内容\"><a href=\"#访问-slot-里的内容\" class=\"headerlink\" title=\"访问 slot 里的内容\"></a>访问 slot 里的内容</h1><p>通过 this.$slots 访问静态插槽的内容，得到的是一个 VNodes 数组</p>\n<h1 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dynamic-component-demo&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;tab in tabs&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:key</span>=<span class=\"string\">&quot;tab&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;[&#x27;tab-button&#x27;, &#123; active: currentTab === tab &#125;]&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;currentTab = tab&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; tab &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">&quot;currentTabComponent&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;tab-home&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;div&gt;Home component&lt;/div&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;tab-posts&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;div&gt;Posts component&lt;/div&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;tab-archive&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;div&gt;Archive component&lt;/div&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#dynamic-component-demo&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">currentTab</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">tabs</span>: [<span class=\"string\">&#x27;Home&#x27;</span>, <span class=\"string\">&#x27;Posts&#x27;</span>, <span class=\"string\">&#x27;Archive&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">currentTabComponent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;tab-&#x27;</span> + <span class=\"built_in\">this</span>.currentTab.toLowerCase()</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"模拟继承","date":"2019-03-07T16:00:00.000Z","updated":"2019-03-07T16:00:00.000Z","_content":"\n在 ES6 出现之前，JS 中是没有类的概念的，只是通过对象模拟类，因此继承也只是模拟继承。\n\n<!-- more -->\n\n# 利用原型链的继承\n\n```javascript\nfunction Human(name) {\n  this.name = name\n}\n\nHuman.prototype.run = function () {\n  console.log('跑')\n}\n\nfunction Man(name) {\n  Human.call(this, name) // 步骤1\n  this.gender = '男'\n}\n\n// 步骤2\n// 相当于 Man.prototype.__proto__ = Human.prototype\n// 通过new间接更改__proto__\n//\n// ES5 中Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__\n// Man.prototype  = Object.create(Human.prototype, {\n//   constructor: {\n//     value: Man,\n//     enumerable: false,\n//     configurable: true,\n//     writable: true\n//   }\n// });\n\nvar f = function () {}\nf.prototype = Human.prototype\nMan.prototype = new f()\n\nMan.prototype.fight = function () {\n  console.log('打人')\n}\n```\n\n# ES6 中类的继承\n\n```javascript\nclass Huamn {\n  constructor(name) {\n    this.name = name\n  }\n\n  run() {\n    console.log('跑')\n  }\n}\n\n// 通过关键字extends\nclass Man extends Human {\n  constructor(name) {\n    super(name) // 调用父类的constructor，实现属性继承\n    this.gender = '男'\n  }\n\n  fight() {\n    console.log('打人')\n  }\n}\n```\n\nES6 class 的继承并没有改变 js 的基于原型链继承的方式，只是将展现形式往 java 靠。\n\n# 总结\n\n1. 原型链继承的方式复杂，但是能清楚知道是怎么实现的。\n2. ES6 的 class 语法糖，实现方式简单，但并不能直观显示其过程，而且不能通过 `Person.prototyoe.xxx = xxx` 字面量的方式增加方法\n","source":"_posts/模拟继承.md","raw":"---\ntitle: 模拟继承\ndate: 2019-03-08 00:00:00\nupdated: 2019-03-08 00:00:00\ntags:\n  - 继承\n  - ES5\n  - ES6\n---\n\n在 ES6 出现之前，JS 中是没有类的概念的，只是通过对象模拟类，因此继承也只是模拟继承。\n\n<!-- more -->\n\n# 利用原型链的继承\n\n```javascript\nfunction Human(name) {\n  this.name = name\n}\n\nHuman.prototype.run = function () {\n  console.log('跑')\n}\n\nfunction Man(name) {\n  Human.call(this, name) // 步骤1\n  this.gender = '男'\n}\n\n// 步骤2\n// 相当于 Man.prototype.__proto__ = Human.prototype\n// 通过new间接更改__proto__\n//\n// ES5 中Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__\n// Man.prototype  = Object.create(Human.prototype, {\n//   constructor: {\n//     value: Man,\n//     enumerable: false,\n//     configurable: true,\n//     writable: true\n//   }\n// });\n\nvar f = function () {}\nf.prototype = Human.prototype\nMan.prototype = new f()\n\nMan.prototype.fight = function () {\n  console.log('打人')\n}\n```\n\n# ES6 中类的继承\n\n```javascript\nclass Huamn {\n  constructor(name) {\n    this.name = name\n  }\n\n  run() {\n    console.log('跑')\n  }\n}\n\n// 通过关键字extends\nclass Man extends Human {\n  constructor(name) {\n    super(name) // 调用父类的constructor，实现属性继承\n    this.gender = '男'\n  }\n\n  fight() {\n    console.log('打人')\n  }\n}\n```\n\nES6 class 的继承并没有改变 js 的基于原型链继承的方式，只是将展现形式往 java 靠。\n\n# 总结\n\n1. 原型链继承的方式复杂，但是能清楚知道是怎么实现的。\n2. ES6 的 class 语法糖，实现方式简单，但并不能直观显示其过程，而且不能通过 `Person.prototyoe.xxx = xxx` 字面量的方式增加方法\n","slug":"模拟继承","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyb002yk4u9dbav35m5","content":"<p>在 ES6 出现之前，JS 中是没有类的概念的，只是通过对象模拟类，因此继承也只是模拟继承。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"利用原型链的继承\"><a href=\"#利用原型链的继承\" class=\"headerlink\" title=\"利用原型链的继承\"></a>利用原型链的继承</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Human.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;跑&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Human.call(<span class=\"built_in\">this</span>, name) <span class=\"comment\">// 步骤1</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.gender = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 步骤2</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于 Man.prototype.__proto__ = Human.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// 通过new间接更改__proto__</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// ES5 中Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__</span></span><br><span class=\"line\"><span class=\"comment\">// Man.prototype  = Object.create(Human.prototype, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   constructor: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     value: Man,</span></span><br><span class=\"line\"><span class=\"comment\">//     enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//     configurable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//     writable: true</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">f.prototype = Human.prototype</span><br><span class=\"line\">Man.prototype = <span class=\"keyword\">new</span> f()</span><br><span class=\"line\"></span><br><span class=\"line\">Man.prototype.fight = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;打人&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中类的继承\"><a href=\"#ES6-中类的继承\" class=\"headerlink\" title=\"ES6 中类的继承\"></a>ES6 中类的继承</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Huamn</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;跑&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过关键字extends</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name) <span class=\"comment\">// 调用父类的constructor，实现属性继承</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.gender = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">fight</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;打人&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6 class 的继承并没有改变 js 的基于原型链继承的方式，只是将展现形式往 java 靠。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>原型链继承的方式复杂，但是能清楚知道是怎么实现的。</li>\n<li>ES6 的 class 语法糖，实现方式简单，但并不能直观显示其过程，而且不能通过 <code>Person.prototyoe.xxx = xxx</code> 字面量的方式增加方法</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>在 ES6 出现之前，JS 中是没有类的概念的，只是通过对象模拟类，因此继承也只是模拟继承。</p>","more":"<h1 id=\"利用原型链的继承\"><a href=\"#利用原型链的继承\" class=\"headerlink\" title=\"利用原型链的继承\"></a>利用原型链的继承</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Human.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;跑&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Human.call(<span class=\"built_in\">this</span>, name) <span class=\"comment\">// 步骤1</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.gender = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 步骤2</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于 Man.prototype.__proto__ = Human.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// 通过new间接更改__proto__</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// ES5 中Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__</span></span><br><span class=\"line\"><span class=\"comment\">// Man.prototype  = Object.create(Human.prototype, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   constructor: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     value: Man,</span></span><br><span class=\"line\"><span class=\"comment\">//     enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//     configurable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//     writable: true</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">f.prototype = Human.prototype</span><br><span class=\"line\">Man.prototype = <span class=\"keyword\">new</span> f()</span><br><span class=\"line\"></span><br><span class=\"line\">Man.prototype.fight = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;打人&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中类的继承\"><a href=\"#ES6-中类的继承\" class=\"headerlink\" title=\"ES6 中类的继承\"></a>ES6 中类的继承</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Huamn</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;跑&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过关键字extends</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name) <span class=\"comment\">// 调用父类的constructor，实现属性继承</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.gender = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">fight</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;打人&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6 class 的继承并没有改变 js 的基于原型链继承的方式，只是将展现形式往 java 靠。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>原型链继承的方式复杂，但是能清楚知道是怎么实现的。</li>\n<li>ES6 的 class 语法糖，实现方式简单，但并不能直观显示其过程，而且不能通过 <code>Person.prototyoe.xxx = xxx</code> 字面量的方式增加方法</li>\n</ol>"},{"title":"浅谈 JavaScript 解构赋值语法","date":"2019-06-02T16:00:00.000Z","updated":"2019-06-02T16:00:00.000Z","_content":"\n最近工作项目中，使用了解构赋值语法，感觉非常爽，但是有些写法只是有印象，每次都要查一下，非常麻烦，故写这篇博客巩固一下知识。\n\n<!-- more -->\n\n什么是解构赋值？MDN 上是这么描述的:\n\n> 解构赋值语法是一种 Javascript 表达式，它使得将值从数组，或属性从对象，提取到不同的变量中，成为可能。\n\n# 解构数组\n\n## 变量声明并赋值时的解构\n\n```javascript\nvar foo = [1, 2, 3]\n\nvar [a, b, c] = foo\nconsole.log(a) // 1\nconsole.log(c) // 3\n```\n\n## 变量先声明后赋值时的解构\n\n```javascript\nvar a, b\n;[a, b] = [1, 2]\nconsole.log(a) // 1\nconsole.log(b) // 2\n```\n\n## 默认值\n\n```javascript\nvar a, b\n;[a = 1, b = 2] = [3]\nconsole.log(a) // 3\nconsole.log(b) // 2\n```\n\n## 交换变量\n\n在 ES6 之前交换变量都需要一个临时变量。\n\n```javascript\nvar a = 1\nvar b = ((2)[(a, b)] = [b, a])\nconsole.log(a) // 2\nconsole.log(b) // 1\n```\n\n## 忽略某些返回值\n\n```javascript\nfunction f() {\n  return [1, 2, 3]\n}\n\nvar [a, , b] = f()\nconsole.log(a) // 1\nconsole.log(b) // 3\n```\n\n## 将剩余数组赋值给一个变量\n\n注意剩余元素必须是最后一个元素\n\n```javascript\nvar [a, ...b] = [1, 2, 3]\nconsole.log(a) // 1\nconsole.log(b) // [2, 3]\n```\n\n# 解构对象\n\n## 基本赋值\n\n和数组类似\n\n```javascript\nvar o = { p: 42, q: true }\nvar { p, q } = o\n\nconsole.log(p) // 42\nconsole.log(q) // true\n```\n\n## 无声明赋值\n\n和数组的类似，经常在项目中获取数据时用到。`{a, b} = {a: 1, b: 2}` 不是有效的独立语法，因为左边的` {a, b}` 被认为是一个块而不是对象字面量。`({a, b} = {a: 1, b: 2}) `是有效的，正如 `var {a, b} = {a: 1, b: 2}`\n\n## 给新的变量名赋值\n\n```javascript\nvar o = { p: 42, q: true }\nvar { p: foo, q: bar } = o\n\nconsole.log(foo) // 42\nconsole.log(bar) // true\n```\n\n## 默认值\n\n```javascript\nvar { a = 10, b = 5 } = { a: 3 }\n\nconsole.log(a) // 3\nconsole.log(b) // 5\n```\n\n## 给新的变量命名并提供默认值\n\n```javascript\nvar { a: aa = 10, b: bb = 5 } = { a: 3 }\n\nconsole.log(aa) // 3\nconsole.log(bb) // 5\n```\n\n## 函数参数默认值\n\n```javascript\nfunction drawES2015Chart({ size = 'big', cords = { x: 0, y: 0 }, radius = 25 } = {}) {\n  console.log(size, cords, radius)\n  // do some chart drawing\n}\n\ndrawES2015Chart({\n  cords: { x: 18, y: 30 },\n  radius: 30\n})\n```\n\n## 从作为函数实参的对象中提取数据\n\n```javascript\nfunction userId({ id }) {\n  return id\n}\n\nfunction whois({ displayName: displayName, fullName: { firstName: name } }) {\n  console.log(displayName + ' is ' + name)\n}\n\nvar user = {\n  id: 42,\n  displayName: 'jdoe',\n  fullName: {\n    firstName: 'John',\n    lastName: 'Doe'\n  }\n}\n\nconsole.log('userId: ' + userId(user)) // \"userId: 42\"\nwhois(user) // \"jdoe is John\"\n```\n\n## 对象属性计算名和解构\n\n```javascript\nlet key = 'z'\nlet { [key]: foo } = { z: 'bar' }\n\nconsole.log(foo) // \"bar\"\n```\n\n> 引用\n\n- [解构赋值语](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n","source":"_posts/浅谈 JavaScript 解构赋值语法.md","raw":"---\ntitle: 浅谈 JavaScript 解构赋值语法\ndate: 2019-06-03 00:00:00\nupdated: 2019-06-03 00:00:00\ntags:\n  - ES6\n  - JavaScript\n  - 解构赋值\n---\n\n最近工作项目中，使用了解构赋值语法，感觉非常爽，但是有些写法只是有印象，每次都要查一下，非常麻烦，故写这篇博客巩固一下知识。\n\n<!-- more -->\n\n什么是解构赋值？MDN 上是这么描述的:\n\n> 解构赋值语法是一种 Javascript 表达式，它使得将值从数组，或属性从对象，提取到不同的变量中，成为可能。\n\n# 解构数组\n\n## 变量声明并赋值时的解构\n\n```javascript\nvar foo = [1, 2, 3]\n\nvar [a, b, c] = foo\nconsole.log(a) // 1\nconsole.log(c) // 3\n```\n\n## 变量先声明后赋值时的解构\n\n```javascript\nvar a, b\n;[a, b] = [1, 2]\nconsole.log(a) // 1\nconsole.log(b) // 2\n```\n\n## 默认值\n\n```javascript\nvar a, b\n;[a = 1, b = 2] = [3]\nconsole.log(a) // 3\nconsole.log(b) // 2\n```\n\n## 交换变量\n\n在 ES6 之前交换变量都需要一个临时变量。\n\n```javascript\nvar a = 1\nvar b = ((2)[(a, b)] = [b, a])\nconsole.log(a) // 2\nconsole.log(b) // 1\n```\n\n## 忽略某些返回值\n\n```javascript\nfunction f() {\n  return [1, 2, 3]\n}\n\nvar [a, , b] = f()\nconsole.log(a) // 1\nconsole.log(b) // 3\n```\n\n## 将剩余数组赋值给一个变量\n\n注意剩余元素必须是最后一个元素\n\n```javascript\nvar [a, ...b] = [1, 2, 3]\nconsole.log(a) // 1\nconsole.log(b) // [2, 3]\n```\n\n# 解构对象\n\n## 基本赋值\n\n和数组类似\n\n```javascript\nvar o = { p: 42, q: true }\nvar { p, q } = o\n\nconsole.log(p) // 42\nconsole.log(q) // true\n```\n\n## 无声明赋值\n\n和数组的类似，经常在项目中获取数据时用到。`{a, b} = {a: 1, b: 2}` 不是有效的独立语法，因为左边的` {a, b}` 被认为是一个块而不是对象字面量。`({a, b} = {a: 1, b: 2}) `是有效的，正如 `var {a, b} = {a: 1, b: 2}`\n\n## 给新的变量名赋值\n\n```javascript\nvar o = { p: 42, q: true }\nvar { p: foo, q: bar } = o\n\nconsole.log(foo) // 42\nconsole.log(bar) // true\n```\n\n## 默认值\n\n```javascript\nvar { a = 10, b = 5 } = { a: 3 }\n\nconsole.log(a) // 3\nconsole.log(b) // 5\n```\n\n## 给新的变量命名并提供默认值\n\n```javascript\nvar { a: aa = 10, b: bb = 5 } = { a: 3 }\n\nconsole.log(aa) // 3\nconsole.log(bb) // 5\n```\n\n## 函数参数默认值\n\n```javascript\nfunction drawES2015Chart({ size = 'big', cords = { x: 0, y: 0 }, radius = 25 } = {}) {\n  console.log(size, cords, radius)\n  // do some chart drawing\n}\n\ndrawES2015Chart({\n  cords: { x: 18, y: 30 },\n  radius: 30\n})\n```\n\n## 从作为函数实参的对象中提取数据\n\n```javascript\nfunction userId({ id }) {\n  return id\n}\n\nfunction whois({ displayName: displayName, fullName: { firstName: name } }) {\n  console.log(displayName + ' is ' + name)\n}\n\nvar user = {\n  id: 42,\n  displayName: 'jdoe',\n  fullName: {\n    firstName: 'John',\n    lastName: 'Doe'\n  }\n}\n\nconsole.log('userId: ' + userId(user)) // \"userId: 42\"\nwhois(user) // \"jdoe is John\"\n```\n\n## 对象属性计算名和解构\n\n```javascript\nlet key = 'z'\nlet { [key]: foo } = { z: 'bar' }\n\nconsole.log(foo) // \"bar\"\n```\n\n> 引用\n\n- [解构赋值语](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n","slug":"浅谈 JavaScript 解构赋值语法","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyc002zk4u92vx9bqkx","content":"<p>最近工作项目中，使用了解构赋值语法，感觉非常爽，但是有些写法只是有印象，每次都要查一下，非常麻烦，故写这篇博客巩固一下知识。</p>\n<span id=\"more\"></span>\n\n<p>什么是解构赋值？MDN 上是这么描述的:</p>\n<blockquote>\n<p>解构赋值语法是一种 Javascript 表达式，它使得将值从数组，或属性从对象，提取到不同的变量中，成为可能。</p>\n</blockquote>\n<h1 id=\"解构数组\"><a href=\"#解构数组\" class=\"headerlink\" title=\"解构数组\"></a>解构数组</h1><h2 id=\"变量声明并赋值时的解构\"><a href=\"#变量声明并赋值时的解构\" class=\"headerlink\" title=\"变量声明并赋值时的解构\"></a>变量声明并赋值时的解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = foo</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量先声明后赋值时的解构\"><a href=\"#变量先声明后赋值时的解构\" class=\"headerlink\" title=\"变量先声明后赋值时的解构\"></a>变量先声明后赋值时的解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a, b</span><br><span class=\"line\">;[a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a, b</span><br><span class=\"line\">;[a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>] = [<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交换变量\"><a href=\"#交换变量\" class=\"headerlink\" title=\"交换变量\"></a>交换变量</h2><p>在 ES6 之前交换变量都需要一个临时变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = ((<span class=\"number\">2</span>)[(a, b)] = [b, a])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略某些返回值\"><a href=\"#忽略某些返回值\" class=\"headerlink\" title=\"忽略某些返回值\"></a>忽略某些返回值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, , b] = f()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将剩余数组赋值给一个变量\"><a href=\"#将剩余数组赋值给一个变量\" class=\"headerlink\" title=\"将剩余数组赋值给一个变量\"></a>将剩余数组赋值给一个变量</h2><p>注意剩余元素必须是最后一个元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [a, ...b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解构对象\"><a href=\"#解构对象\" class=\"headerlink\" title=\"解构对象\"></a>解构对象</h1><h2 id=\"基本赋值\"><a href=\"#基本赋值\" class=\"headerlink\" title=\"基本赋值\"></a>基本赋值</h2><p>和数组类似</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; p, q &#125; = o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p) <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"无声明赋值\"><a href=\"#无声明赋值\" class=\"headerlink\" title=\"无声明赋值\"></a>无声明赋值</h2><p>和数组的类似，经常在项目中获取数据时用到。<code>&#123;a, b&#125; = &#123;a: 1, b: 2&#125;</code> 不是有效的独立语法，因为左边的<code> &#123;a, b&#125;</code> 被认为是一个块而不是对象字面量。<code>(&#123;a, b&#125; = &#123;a: 1, b: 2&#125;) </code>是有效的，正如 <code>var &#123;a, b&#125; = &#123;a: 1, b: 2&#125;</code></p>\n<h2 id=\"给新的变量名赋值\"><a href=\"#给新的变量名赋值\" class=\"headerlink\" title=\"给新的变量名赋值\"></a>给新的变量名赋值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">p</span>: foo, <span class=\"attr\">q</span>: bar &#125; = o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo) <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认值-1\"><a href=\"#默认值-1\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; a = <span class=\"number\">10</span>, b = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给新的变量命名并提供默认值\"><a href=\"#给新的变量命名并提供默认值\" class=\"headerlink\" title=\"给新的变量命名并提供默认值\"></a>给新的变量命名并提供默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">a</span>: aa = <span class=\"number\">10</span>, <span class=\"attr\">b</span>: bb = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bb) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数默认值\"><a href=\"#函数参数默认值\" class=\"headerlink\" title=\"函数参数默认值\"></a>函数参数默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawES2015Chart</span>(<span class=\"params\">&#123; size = <span class=\"string\">&#x27;big&#x27;</span>, cords = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;, radius = <span class=\"number\">25</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(size, cords, radius)</span><br><span class=\"line\">  <span class=\"comment\">// do some chart drawing</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">drawES2015Chart(&#123;</span><br><span class=\"line\">  <span class=\"attr\">cords</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">18</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">radius</span>: <span class=\"number\">30</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从作为函数实参的对象中提取数据\"><a href=\"#从作为函数实参的对象中提取数据\" class=\"headerlink\" title=\"从作为函数实参的对象中提取数据\"></a>从作为函数实参的对象中提取数据</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userId</span>(<span class=\"params\">&#123; id &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">whois</span>(<span class=\"params\">&#123; displayName: displayName, fullName: &#123; firstName: name &#125; &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(displayName + <span class=\"string\">&#x27; is &#x27;</span> + name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">displayName</span>: <span class=\"string\">&#x27;jdoe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;John&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Doe&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;userId: &#x27;</span> + userId(user)) <span class=\"comment\">// &quot;userId: 42&quot;</span></span><br><span class=\"line\">whois(user) <span class=\"comment\">// &quot;jdoe is John&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象属性计算名和解构\"><a href=\"#对象属性计算名和解构\" class=\"headerlink\" title=\"对象属性计算名和解构\"></a>对象属性计算名和解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;z&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; [key]: foo &#125; = &#123; <span class=\"attr\">z</span>: <span class=\"string\">&#x27;bar&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo) <span class=\"comment\">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解构赋值语</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近工作项目中，使用了解构赋值语法，感觉非常爽，但是有些写法只是有印象，每次都要查一下，非常麻烦，故写这篇博客巩固一下知识。</p>","more":"<p>什么是解构赋值？MDN 上是这么描述的:</p>\n<blockquote>\n<p>解构赋值语法是一种 Javascript 表达式，它使得将值从数组，或属性从对象，提取到不同的变量中，成为可能。</p>\n</blockquote>\n<h1 id=\"解构数组\"><a href=\"#解构数组\" class=\"headerlink\" title=\"解构数组\"></a>解构数组</h1><h2 id=\"变量声明并赋值时的解构\"><a href=\"#变量声明并赋值时的解构\" class=\"headerlink\" title=\"变量声明并赋值时的解构\"></a>变量声明并赋值时的解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = foo</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量先声明后赋值时的解构\"><a href=\"#变量先声明后赋值时的解构\" class=\"headerlink\" title=\"变量先声明后赋值时的解构\"></a>变量先声明后赋值时的解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a, b</span><br><span class=\"line\">;[a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a, b</span><br><span class=\"line\">;[a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>] = [<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交换变量\"><a href=\"#交换变量\" class=\"headerlink\" title=\"交换变量\"></a>交换变量</h2><p>在 ES6 之前交换变量都需要一个临时变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = ((<span class=\"number\">2</span>)[(a, b)] = [b, a])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略某些返回值\"><a href=\"#忽略某些返回值\" class=\"headerlink\" title=\"忽略某些返回值\"></a>忽略某些返回值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, , b] = f()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将剩余数组赋值给一个变量\"><a href=\"#将剩余数组赋值给一个变量\" class=\"headerlink\" title=\"将剩余数组赋值给一个变量\"></a>将剩余数组赋值给一个变量</h2><p>注意剩余元素必须是最后一个元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [a, ...b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解构对象\"><a href=\"#解构对象\" class=\"headerlink\" title=\"解构对象\"></a>解构对象</h1><h2 id=\"基本赋值\"><a href=\"#基本赋值\" class=\"headerlink\" title=\"基本赋值\"></a>基本赋值</h2><p>和数组类似</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; p, q &#125; = o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p) <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"无声明赋值\"><a href=\"#无声明赋值\" class=\"headerlink\" title=\"无声明赋值\"></a>无声明赋值</h2><p>和数组的类似，经常在项目中获取数据时用到。<code>&#123;a, b&#125; = &#123;a: 1, b: 2&#125;</code> 不是有效的独立语法，因为左边的<code> &#123;a, b&#125;</code> 被认为是一个块而不是对象字面量。<code>(&#123;a, b&#125; = &#123;a: 1, b: 2&#125;) </code>是有效的，正如 <code>var &#123;a, b&#125; = &#123;a: 1, b: 2&#125;</code></p>\n<h2 id=\"给新的变量名赋值\"><a href=\"#给新的变量名赋值\" class=\"headerlink\" title=\"给新的变量名赋值\"></a>给新的变量名赋值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">p</span>: foo, <span class=\"attr\">q</span>: bar &#125; = o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo) <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认值-1\"><a href=\"#默认值-1\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; a = <span class=\"number\">10</span>, b = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给新的变量命名并提供默认值\"><a href=\"#给新的变量命名并提供默认值\" class=\"headerlink\" title=\"给新的变量命名并提供默认值\"></a>给新的变量命名并提供默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">a</span>: aa = <span class=\"number\">10</span>, <span class=\"attr\">b</span>: bb = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bb) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数默认值\"><a href=\"#函数参数默认值\" class=\"headerlink\" title=\"函数参数默认值\"></a>函数参数默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawES2015Chart</span>(<span class=\"params\">&#123; size = <span class=\"string\">&#x27;big&#x27;</span>, cords = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;, radius = <span class=\"number\">25</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(size, cords, radius)</span><br><span class=\"line\">  <span class=\"comment\">// do some chart drawing</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">drawES2015Chart(&#123;</span><br><span class=\"line\">  <span class=\"attr\">cords</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">18</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">radius</span>: <span class=\"number\">30</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从作为函数实参的对象中提取数据\"><a href=\"#从作为函数实参的对象中提取数据\" class=\"headerlink\" title=\"从作为函数实参的对象中提取数据\"></a>从作为函数实参的对象中提取数据</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userId</span>(<span class=\"params\">&#123; id &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">whois</span>(<span class=\"params\">&#123; displayName: displayName, fullName: &#123; firstName: name &#125; &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(displayName + <span class=\"string\">&#x27; is &#x27;</span> + name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">displayName</span>: <span class=\"string\">&#x27;jdoe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;John&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Doe&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;userId: &#x27;</span> + userId(user)) <span class=\"comment\">// &quot;userId: 42&quot;</span></span><br><span class=\"line\">whois(user) <span class=\"comment\">// &quot;jdoe is John&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象属性计算名和解构\"><a href=\"#对象属性计算名和解构\" class=\"headerlink\" title=\"对象属性计算名和解构\"></a>对象属性计算名和解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;z&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; [key]: foo &#125; = &#123; <span class=\"attr\">z</span>: <span class=\"string\">&#x27;bar&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo) <span class=\"comment\">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解构赋值语</a></li>\n</ul>"},{"title":"深度优先遍历和广度优先遍历","date":"2021-06-17T16:00:00.000Z","updated":"2021-06-17T16:00:00.000Z","_content":"\n用 JavaScript 实现深度优先遍历和广度优先遍历\n\n<!-- more -->\n\n首先得了解什么是实现深度优先遍历和广度优先遍历。\n\n深度优先遍历 DFS 是一种用于遍历或搜索树或图的算法。这个算法会尽可能深的搜索树的分支。当节点 v 的所在边都己被探寻过，搜索将回溯到发现节点 v 的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。\n\n广度优先遍历 BFS 是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。\n\n以下是代码\n\n深度优先遍历:\n\n```javascript\nfunction dfs(node) {\n  const nodes = []\n  const stack = []\n  if (node) {\n    stack.push(node)\n    while (stack.length) {\n      const item = stack.pop() // 取最后面一个\n      nodes.push(item)\n      const { children } = item\n      for (let index = children.length - 1; index >= 0; index--) {\n        stack.push(children[index])\n      }\n    }\n  }\n\n  return nodes\n}\n```\n\n广度优先遍历:\n\n```javascript\nfunction bfs(node) {\n  const nodes = []\n  const stack = []\n  if (node) {\n    stack.push(node)\n    while (stack.length) {\n      const item = stack.shift() // 取最第一个\n      nodes.push(item)\n      Array.prototype.slice.call(item.children).forEach(v => {\n        stack.push(v)\n      })\n    }\n  }\n\n  return nodes\n}\n```\n","source":"_posts/深度优先遍历和广度优先遍历.md","raw":"---\ntitle: 深度优先遍历和广度优先遍历\ndate: 2021-06-18 00:00:00\nupdated: 2021-06-18 00:00:00\ntags:\n  - JavaScript\n---\n\n用 JavaScript 实现深度优先遍历和广度优先遍历\n\n<!-- more -->\n\n首先得了解什么是实现深度优先遍历和广度优先遍历。\n\n深度优先遍历 DFS 是一种用于遍历或搜索树或图的算法。这个算法会尽可能深的搜索树的分支。当节点 v 的所在边都己被探寻过，搜索将回溯到发现节点 v 的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。\n\n广度优先遍历 BFS 是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。\n\n以下是代码\n\n深度优先遍历:\n\n```javascript\nfunction dfs(node) {\n  const nodes = []\n  const stack = []\n  if (node) {\n    stack.push(node)\n    while (stack.length) {\n      const item = stack.pop() // 取最后面一个\n      nodes.push(item)\n      const { children } = item\n      for (let index = children.length - 1; index >= 0; index--) {\n        stack.push(children[index])\n      }\n    }\n  }\n\n  return nodes\n}\n```\n\n广度优先遍历:\n\n```javascript\nfunction bfs(node) {\n  const nodes = []\n  const stack = []\n  if (node) {\n    stack.push(node)\n    while (stack.length) {\n      const item = stack.shift() // 取最第一个\n      nodes.push(item)\n      Array.prototype.slice.call(item.children).forEach(v => {\n        stack.push(v)\n      })\n    }\n  }\n\n  return nodes\n}\n```\n","slug":"深度优先遍历和广度优先遍历","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyd0031k4u9fz3z0uoc","content":"<p>用 JavaScript 实现深度优先遍历和广度优先遍历</p>\n<span id=\"more\"></span>\n\n<p>首先得了解什么是实现深度优先遍历和广度优先遍历。</p>\n<p>深度优先遍历 DFS 是一种用于遍历或搜索树或图的算法。这个算法会尽可能深的搜索树的分支。当节点 v 的所在边都己被探寻过，搜索将回溯到发现节点 v 的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。</p>\n<p>广度优先遍历 BFS 是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。</p>\n<p>以下是代码</p>\n<p>深度优先遍历:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    stack.push(node)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> item = stack.pop() <span class=\"comment\">// 取最后面一个</span></span><br><span class=\"line\">      nodes.push(item)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; children &#125; = item</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = children.length - <span class=\"number\">1</span>; index &gt;= <span class=\"number\">0</span>; index--) &#123;</span><br><span class=\"line\">        stack.push(children[index])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>广度优先遍历:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bfs</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    stack.push(node)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> item = stack.shift() <span class=\"comment\">// 取最第一个</span></span><br><span class=\"line\">      nodes.push(item)</span><br><span class=\"line\">      <span class=\"built_in\">Array</span>.prototype.slice.call(item.children).forEach(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        stack.push(v)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>用 JavaScript 实现深度优先遍历和广度优先遍历</p>","more":"<p>首先得了解什么是实现深度优先遍历和广度优先遍历。</p>\n<p>深度优先遍历 DFS 是一种用于遍历或搜索树或图的算法。这个算法会尽可能深的搜索树的分支。当节点 v 的所在边都己被探寻过，搜索将回溯到发现节点 v 的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。</p>\n<p>广度优先遍历 BFS 是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。</p>\n<p>以下是代码</p>\n<p>深度优先遍历:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    stack.push(node)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> item = stack.pop() <span class=\"comment\">// 取最后面一个</span></span><br><span class=\"line\">      nodes.push(item)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; children &#125; = item</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = children.length - <span class=\"number\">1</span>; index &gt;= <span class=\"number\">0</span>; index--) &#123;</span><br><span class=\"line\">        stack.push(children[index])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>广度优先遍历:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bfs</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    stack.push(node)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> item = stack.shift() <span class=\"comment\">// 取最第一个</span></span><br><span class=\"line\">      nodes.push(item)</span><br><span class=\"line\">      <span class=\"built_in\">Array</span>.prototype.slice.call(item.children).forEach(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        stack.push(v)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"理解 await","date":"2021-06-07T16:00:00.000Z","updated":"2021-06-07T16:00:00.000Z","_content":"\n输出以下代码执行结果\n\n<!-- more -->\n\n```javascript\nfunction wait() {\n  return new Promise(resolve => setTimeout(resolve, 10 * 1000))\n}\n\nasync function main() {\n  console.time()\n  const x = wait()\n  const y = wait()\n  const z = wait()\n  await x\n  await y\n  await z\n  console.timeEnd()\n}\nmain()\n```\n\n当执行到 `console.time();` 时，后面三句代码是同步的，因此会依次执行 `wait()` 里的代码，当执行到后面的 `await x` 时，10 秒后执行 `await y`，此时 x 、 y 也结束了。因同步任务也会耗时，故输出结果会比 10000ms 多一点。\n\n..脑筋急转弯呢\n\n> 引用\n\n- [第 129 题：输出以下代码执行结果](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/251)\n","source":"_posts/理解 await.md","raw":"---\ntitle: 理解 await\ndate: 2021-06-08 00:00:00\nupdated: 2021-06-08 00:00:00\ntags:\n  - await\n---\n\n输出以下代码执行结果\n\n<!-- more -->\n\n```javascript\nfunction wait() {\n  return new Promise(resolve => setTimeout(resolve, 10 * 1000))\n}\n\nasync function main() {\n  console.time()\n  const x = wait()\n  const y = wait()\n  const z = wait()\n  await x\n  await y\n  await z\n  console.timeEnd()\n}\nmain()\n```\n\n当执行到 `console.time();` 时，后面三句代码是同步的，因此会依次执行 `wait()` 里的代码，当执行到后面的 `await x` 时，10 秒后执行 `await y`，此时 x 、 y 也结束了。因同步任务也会耗时，故输出结果会比 10000ms 多一点。\n\n..脑筋急转弯呢\n\n> 引用\n\n- [第 129 题：输出以下代码执行结果](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/251)\n","slug":"理解 await","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyd0033k4u9ak5zaatr","content":"<p>输出以下代码执行结果</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wait</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">10</span> * <span class=\"number\">1000</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = wait()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = wait()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> z = wait()</span><br><span class=\"line\">  <span class=\"keyword\">await</span> x</span><br><span class=\"line\">  <span class=\"keyword\">await</span> y</span><br><span class=\"line\">  <span class=\"keyword\">await</span> z</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>当执行到 <code>console.time();</code> 时，后面三句代码是同步的，因此会依次执行 <code>wait()</code> 里的代码，当执行到后面的 <code>await x</code> 时，10 秒后执行 <code>await y</code>，此时 x 、 y 也结束了。因同步任务也会耗时，故输出结果会比 10000ms 多一点。</p>\n<p>..脑筋急转弯呢</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/251\">第 129 题：输出以下代码执行结果</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>输出以下代码执行结果</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wait</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">10</span> * <span class=\"number\">1000</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = wait()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = wait()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> z = wait()</span><br><span class=\"line\">  <span class=\"keyword\">await</span> x</span><br><span class=\"line\">  <span class=\"keyword\">await</span> y</span><br><span class=\"line\">  <span class=\"keyword\">await</span> z</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>当执行到 <code>console.time();</code> 时，后面三句代码是同步的，因此会依次执行 <code>wait()</code> 里的代码，当执行到后面的 <code>await x</code> 时，10 秒后执行 <code>await y</code>，此时 x 、 y 也结束了。因同步任务也会耗时，故输出结果会比 10000ms 多一点。</p>\n<p>..脑筋急转弯呢</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/251\">第 129 题：输出以下代码执行结果</a></li>\n</ul>"},{"title":"简单实现一个发布订阅模式和观察者模式","date":"2020-08-31T16:00:00.000Z","updated":"2020-08-31T16:00:00.000Z","_content":"\n补习一下发布订阅模式和观察者模式，比较两者区别\n\n<!-- more -->\n\n创建一个发布订阅模式 eventBus ，eventBus 有 events 属性，on，emit，off 等方法;\n\n```javascript\nconst eventBus = {\n  events: new Map(),\n  emit(event, data) {\n    let eventSet = this.events.get(event)\n    if (eventSet) {\n      eventSet.forEach(effect => {\n        effect(data)\n      })\n    }\n  },\n  on(event, fn) {\n    let eventSet = this.events.get(event)\n    if (!eventSet) {\n      this.events.set(event, (eventSet = new Set()))\n    }\n    eventSet.add(fn)\n  },\n  off(event) {\n    let result = this.events.delete(event)\n    if (result) {\n      console.log('删除成功')\n    } else {\n      console.log('删除失败')\n    }\n  }\n}\neventBus.on('xxx', xxx => {\n  console.log(xxx)\n})\neventBus.emit('xxx', 'xxx')\n```\n\n创建一个观察者模式\n\n```javascript\nconst subject = {\n  events: new Set(),\n  on(fn) {\n    this.events.add(fn)\n  },\n  emit() {\n    this.events.forEach(effect => {\n      effect()\n    })\n  }\n}\nsubject.on(() => {\n  console.log('xxx')\n})\nsubject.emit()\n```\n\n发布订阅模式比观察者模式多了一层，能选择发布哪一些事件内容，而观察者只能触发所有事件内容。\n","source":"_posts/简单实现一个发布订阅模式.md","raw":"---\ntitle: 简单实现一个发布订阅模式和观察者模式\ndate: 2020-09-01 00:00:00\nupdated: 2020-09-01 00:00:00\ntags:\n  - 发布订阅\n  - 设计模式\n---\n\n补习一下发布订阅模式和观察者模式，比较两者区别\n\n<!-- more -->\n\n创建一个发布订阅模式 eventBus ，eventBus 有 events 属性，on，emit，off 等方法;\n\n```javascript\nconst eventBus = {\n  events: new Map(),\n  emit(event, data) {\n    let eventSet = this.events.get(event)\n    if (eventSet) {\n      eventSet.forEach(effect => {\n        effect(data)\n      })\n    }\n  },\n  on(event, fn) {\n    let eventSet = this.events.get(event)\n    if (!eventSet) {\n      this.events.set(event, (eventSet = new Set()))\n    }\n    eventSet.add(fn)\n  },\n  off(event) {\n    let result = this.events.delete(event)\n    if (result) {\n      console.log('删除成功')\n    } else {\n      console.log('删除失败')\n    }\n  }\n}\neventBus.on('xxx', xxx => {\n  console.log(xxx)\n})\neventBus.emit('xxx', 'xxx')\n```\n\n创建一个观察者模式\n\n```javascript\nconst subject = {\n  events: new Set(),\n  on(fn) {\n    this.events.add(fn)\n  },\n  emit() {\n    this.events.forEach(effect => {\n      effect()\n    })\n  }\n}\nsubject.on(() => {\n  console.log('xxx')\n})\nsubject.emit()\n```\n\n发布订阅模式比观察者模式多了一层，能选择发布哪一些事件内容，而观察者只能触发所有事件内容。\n","slug":"简单实现一个发布订阅模式","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyf0036k4u9bbdn5h28","content":"<p>补习一下发布订阅模式和观察者模式，比较两者区别</p>\n<span id=\"more\"></span>\n\n<p>创建一个发布订阅模式 eventBus ，eventBus 有 events 属性，on，emit，off 等方法;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> eventBus = &#123;</span><br><span class=\"line\">  <span class=\"attr\">events</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">emit</span>(<span class=\"params\">event, data</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> eventSet = <span class=\"built_in\">this</span>.events.get(event)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventSet) &#123;</span><br><span class=\"line\">      eventSet.forEach(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> &#123;</span><br><span class=\"line\">        effect(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">on</span>(<span class=\"params\">event, fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> eventSet = <span class=\"built_in\">this</span>.events.get(event)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eventSet) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.events.set(event, (eventSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    eventSet.add(fn)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">off</span>(<span class=\"params\">event</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"built_in\">this</span>.events.delete(event)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;删除成功&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;删除失败&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">eventBus.on(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"function\"><span class=\"params\">xxx</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xxx)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">eventBus.emit(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"string\">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>创建一个观察者模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> subject = &#123;</span><br><span class=\"line\">  <span class=\"attr\">events</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">on</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.events.add(fn)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">emit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.events.forEach(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> &#123;</span><br><span class=\"line\">      effect()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">subject.on(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">subject.emit()</span><br></pre></td></tr></table></figure>\n\n<p>发布订阅模式比观察者模式多了一层，能选择发布哪一些事件内容，而观察者只能触发所有事件内容。</p>\n","site":{"data":{}},"excerpt":"<p>补习一下发布订阅模式和观察者模式，比较两者区别</p>","more":"<p>创建一个发布订阅模式 eventBus ，eventBus 有 events 属性，on，emit，off 等方法;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> eventBus = &#123;</span><br><span class=\"line\">  <span class=\"attr\">events</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">emit</span>(<span class=\"params\">event, data</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> eventSet = <span class=\"built_in\">this</span>.events.get(event)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventSet) &#123;</span><br><span class=\"line\">      eventSet.forEach(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> &#123;</span><br><span class=\"line\">        effect(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">on</span>(<span class=\"params\">event, fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> eventSet = <span class=\"built_in\">this</span>.events.get(event)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eventSet) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.events.set(event, (eventSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    eventSet.add(fn)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">off</span>(<span class=\"params\">event</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"built_in\">this</span>.events.delete(event)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;删除成功&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;删除失败&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">eventBus.on(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"function\"><span class=\"params\">xxx</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xxx)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">eventBus.emit(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"string\">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>创建一个观察者模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> subject = &#123;</span><br><span class=\"line\">  <span class=\"attr\">events</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">on</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.events.add(fn)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">emit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.events.forEach(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> &#123;</span><br><span class=\"line\">      effect()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">subject.on(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">subject.emit()</span><br></pre></td></tr></table></figure>\n\n<p>发布订阅模式比观察者模式多了一层，能选择发布哪一些事件内容，而观察者只能触发所有事件内容。</p>"},{"title":"简单的模块管理器","date":"2020-11-09T16:00:00.000Z","updated":"2020-11-09T16:00:00.000Z","_content":"\n双 11 的销售额不会自己增长，知识也是，需要时长充电。最近在看 `你不知道的 JavaScript`，里面讲了模块管理器的核心概念，梳理一下其思路。\n\n<!-- more -->\n\n```javascript\nconst MyModules = (function Manager() {\n  const modules = {}\n  /*\n  name：定义的模块名称；\n  deps：依赖的模块；\n  impl：执行函数。\n  */\n  function define(name, deps, impl) {\n    for (let i = 0; i < deps.length; i++) {\n      // 保存 modules 中对应的 module。\n      deps[i] = modules[deps[i]]\n    }\n    // 保存定义的模块，并将上面保存依赖模块传入到执行函数中，注意此处使用的是apply，参数是以数组的形式传入的，依次对应传入的 deps 顺序。\n    modules[name] = impl.apply(impl, deps)\n  }\n\n  function get(name) {\n    return modules[name]\n  }\n\n  return {\n    define: define,\n    get: get\n  }\n})()\n\nMyModules.define('bar', [], function () {\n  function hello(who) {\n    return 'Let me introduce: ' + who\n  }\n\n  return { hello: hello }\n})\n\nMyModules.define('foo', ['bar'], function (bar) {\n  const hungry = 'hippo'\n\n  function awesome() {\n    console.log(bar.hello(hungry).toUpperCase())\n  }\n\n  return {\n    awesome: awesome\n  }\n})\n\nconst bar = MyModules.get('bar')\nconst foo = MyModules.get('foo')\n\nconsole.log(bar.hello('hippo'))\n// Let me introduce: hippo\nfoo.awesome()\n// LET ME INTRODUCE: HIPPO\n```\n\n上面函数符合模块模式的两个必要条件：\n\n1. 必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）。\n2. 封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。\n","source":"_posts/简单的模块管理器.md","raw":"---\ntitle: 简单的模块管理器\ndate: 2020-11-10 00:00:00\nupdated: 2020-11-10 00:00:00\ntags:\n  - 模块\n---\n\n双 11 的销售额不会自己增长，知识也是，需要时长充电。最近在看 `你不知道的 JavaScript`，里面讲了模块管理器的核心概念，梳理一下其思路。\n\n<!-- more -->\n\n```javascript\nconst MyModules = (function Manager() {\n  const modules = {}\n  /*\n  name：定义的模块名称；\n  deps：依赖的模块；\n  impl：执行函数。\n  */\n  function define(name, deps, impl) {\n    for (let i = 0; i < deps.length; i++) {\n      // 保存 modules 中对应的 module。\n      deps[i] = modules[deps[i]]\n    }\n    // 保存定义的模块，并将上面保存依赖模块传入到执行函数中，注意此处使用的是apply，参数是以数组的形式传入的，依次对应传入的 deps 顺序。\n    modules[name] = impl.apply(impl, deps)\n  }\n\n  function get(name) {\n    return modules[name]\n  }\n\n  return {\n    define: define,\n    get: get\n  }\n})()\n\nMyModules.define('bar', [], function () {\n  function hello(who) {\n    return 'Let me introduce: ' + who\n  }\n\n  return { hello: hello }\n})\n\nMyModules.define('foo', ['bar'], function (bar) {\n  const hungry = 'hippo'\n\n  function awesome() {\n    console.log(bar.hello(hungry).toUpperCase())\n  }\n\n  return {\n    awesome: awesome\n  }\n})\n\nconst bar = MyModules.get('bar')\nconst foo = MyModules.get('foo')\n\nconsole.log(bar.hello('hippo'))\n// Let me introduce: hippo\nfoo.awesome()\n// LET ME INTRODUCE: HIPPO\n```\n\n上面函数符合模块模式的两个必要条件：\n\n1. 必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）。\n2. 封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。\n","slug":"简单的模块管理器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyg0038k4u9g570cd89","content":"<p>双 11 的销售额不会自己增长，知识也是，需要时长充电。最近在看 <code>你不知道的 JavaScript</code>，里面讲了模块管理器的核心概念，梳理一下其思路。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> modules = &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  name：定义的模块名称；</span></span><br><span class=\"line\"><span class=\"comment\">  deps：依赖的模块；</span></span><br><span class=\"line\"><span class=\"comment\">  impl：执行函数。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name, deps, impl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; deps.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 保存 modules 中对应的 module。</span></span><br><span class=\"line\">      deps[i] = modules[deps[i]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存定义的模块，并将上面保存依赖模块传入到执行函数中，注意此处使用的是apply，参数是以数组的形式传入的，依次对应传入的 deps 顺序。</span></span><br><span class=\"line\">    modules[name] = impl.apply(impl, deps)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modules[name]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">define</span>: define,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: get</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">&#x27;bar&#x27;</span>, [], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Let me introduce: &#x27;</span> + who</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">hello</span>: hello &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">&#x27;foo&#x27;</span>, [<span class=\"string\">&#x27;bar&#x27;</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hungry = <span class=\"string\">&#x27;hippo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar.hello(hungry).toUpperCase())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">awesome</span>: awesome</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = MyModules.get(<span class=\"string\">&#x27;bar&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = MyModules.get(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.hello(<span class=\"string\">&#x27;hippo&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">// Let me introduce: hippo</span></span><br><span class=\"line\">foo.awesome()</span><br><span class=\"line\"><span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></span><br></pre></td></tr></table></figure>\n\n<p>上面函数符合模块模式的两个必要条件：</p>\n<ol>\n<li>必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）。</li>\n<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>双 11 的销售额不会自己增长，知识也是，需要时长充电。最近在看 <code>你不知道的 JavaScript</code>，里面讲了模块管理器的核心概念，梳理一下其思路。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> modules = &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  name：定义的模块名称；</span></span><br><span class=\"line\"><span class=\"comment\">  deps：依赖的模块；</span></span><br><span class=\"line\"><span class=\"comment\">  impl：执行函数。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name, deps, impl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; deps.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 保存 modules 中对应的 module。</span></span><br><span class=\"line\">      deps[i] = modules[deps[i]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存定义的模块，并将上面保存依赖模块传入到执行函数中，注意此处使用的是apply，参数是以数组的形式传入的，依次对应传入的 deps 顺序。</span></span><br><span class=\"line\">    modules[name] = impl.apply(impl, deps)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modules[name]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">define</span>: define,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: get</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">&#x27;bar&#x27;</span>, [], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Let me introduce: &#x27;</span> + who</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">hello</span>: hello &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">&#x27;foo&#x27;</span>, [<span class=\"string\">&#x27;bar&#x27;</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hungry = <span class=\"string\">&#x27;hippo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar.hello(hungry).toUpperCase())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">awesome</span>: awesome</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = MyModules.get(<span class=\"string\">&#x27;bar&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = MyModules.get(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.hello(<span class=\"string\">&#x27;hippo&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">// Let me introduce: hippo</span></span><br><span class=\"line\">foo.awesome()</span><br><span class=\"line\"><span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></span><br></pre></td></tr></table></figure>\n\n<p>上面函数符合模块模式的两个必要条件：</p>\n<ol>\n<li>必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）。</li>\n<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>\n</ol>"},{"title":"造轮子时踩的坑","date":"2019-04-08T16:00:00.000Z","updated":"2019-04-08T16:00:00.000Z","_content":"\n# Vue 相关\n\n1. v-if：没有在 dom 中出现。v-show ：元素被加上 `display:none`\n2. scss 尽量都用变量 `$`\n3. 使用 prop 传 Boolean 值时，需要在所传属性前加`:`\n4. 需要获取组件的 `$refs` 值时，需要在 `mounted` 后才能获取，mounted 是异步的\n5. slot 不能直接出现在 template 中，会报错\n6. $children 子组件\n7. 声明组件后，再设置 name，方便调试\n8. scoped 会隔绝其他组件的样式，建议使用\n9. Vue 的[双向绑定](https://jsbin.com/bipojipeho/edit?html,output)，实质上是：\n\n<!-- more -->\n\n```javascript\n  <p>{{message}}<button @click=\"message++\">+</button></p>\n  <input type=\"text\" :value=\"message\" @input=\"message=$event.target.value\">\n```\n\n10. computed 的属性会被缓存\n11. prop 的 default 属性如果是对象就用函数返回，否者页面有多个相同组件时，改对象的数据会被共享\n12. [.sync](https://jsbin.com/jaxehabogu/1/edit?html,console,output)(类似 prop 的双向绑定) 实质上是：\n\n```html\n<p>{{xxx}}</p>\n<!-- <child @update:title=\"value => xxx=value\"  :title= \"xxx\"></child> -->\n<child :title.sync=\"xxx\"></child>\n```\n\n```JavaScript\n  <script>\n\n  Vue.component('child',{\n    template:`<div>{{newTitle}}<button @click=\"add\">+</button></div>`,\n    data(){\n      return {\n        newTitle:this.title\n      }\n    },\n    props:['title'],\n    methods:{\n       add(){\n      this.newTitle +=1\n      this.$emit('update:title', this.newTitle)\n    }\n    }\n\n  })\n\n  new Vue({\n    el: '#app',\n    data: {\n      xxx:'1'\n    }\n  })\n  </script>\n```\n\n13. props 需要用户传值，data 是内部自身维护的\n14. xxx.bind() 会生成新函数\n15. 不要在多个地方操作数据，保证数据单向流通\n\n# 规范相关\n\n1. 提交代码时，变更记录写详细，方便以后查阅\n2. 遵循用例-UI-代码-测试的开发流程\n3. 函数不要超 5 行\n\n# 工具相关\n\n1. 安装开发者使用的库：`npm i xxx -D`\n2. npm 不能用的时候，就用 yarn\n\n# 测试相关\n\n1. 本应出现的值没有出现，试试 setTimeout 或者$nextTick\n2. 测试时先错一次\n3. css 要渲染到页面上才能取到值\n4. 每次测试结束，dom.remove(),vm.$destroy()\n","source":"_posts/造轮子时踩的坑.md","raw":"---\ntitle: 造轮子时踩的坑\ndate: 2019-04-09 00:00:00\nupdated: 2019-04-09 00:00:00\ntags:\n  - Vue\n---\n\n# Vue 相关\n\n1. v-if：没有在 dom 中出现。v-show ：元素被加上 `display:none`\n2. scss 尽量都用变量 `$`\n3. 使用 prop 传 Boolean 值时，需要在所传属性前加`:`\n4. 需要获取组件的 `$refs` 值时，需要在 `mounted` 后才能获取，mounted 是异步的\n5. slot 不能直接出现在 template 中，会报错\n6. $children 子组件\n7. 声明组件后，再设置 name，方便调试\n8. scoped 会隔绝其他组件的样式，建议使用\n9. Vue 的[双向绑定](https://jsbin.com/bipojipeho/edit?html,output)，实质上是：\n\n<!-- more -->\n\n```javascript\n  <p>{{message}}<button @click=\"message++\">+</button></p>\n  <input type=\"text\" :value=\"message\" @input=\"message=$event.target.value\">\n```\n\n10. computed 的属性会被缓存\n11. prop 的 default 属性如果是对象就用函数返回，否者页面有多个相同组件时，改对象的数据会被共享\n12. [.sync](https://jsbin.com/jaxehabogu/1/edit?html,console,output)(类似 prop 的双向绑定) 实质上是：\n\n```html\n<p>{{xxx}}</p>\n<!-- <child @update:title=\"value => xxx=value\"  :title= \"xxx\"></child> -->\n<child :title.sync=\"xxx\"></child>\n```\n\n```JavaScript\n  <script>\n\n  Vue.component('child',{\n    template:`<div>{{newTitle}}<button @click=\"add\">+</button></div>`,\n    data(){\n      return {\n        newTitle:this.title\n      }\n    },\n    props:['title'],\n    methods:{\n       add(){\n      this.newTitle +=1\n      this.$emit('update:title', this.newTitle)\n    }\n    }\n\n  })\n\n  new Vue({\n    el: '#app',\n    data: {\n      xxx:'1'\n    }\n  })\n  </script>\n```\n\n13. props 需要用户传值，data 是内部自身维护的\n14. xxx.bind() 会生成新函数\n15. 不要在多个地方操作数据，保证数据单向流通\n\n# 规范相关\n\n1. 提交代码时，变更记录写详细，方便以后查阅\n2. 遵循用例-UI-代码-测试的开发流程\n3. 函数不要超 5 行\n\n# 工具相关\n\n1. 安装开发者使用的库：`npm i xxx -D`\n2. npm 不能用的时候，就用 yarn\n\n# 测试相关\n\n1. 本应出现的值没有出现，试试 setTimeout 或者$nextTick\n2. 测试时先错一次\n3. css 要渲染到页面上才能取到值\n4. 每次测试结束，dom.remove(),vm.$destroy()\n","slug":"造轮子时踩的坑","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyh003ak4u9grlqez4z","content":"<h1 id=\"Vue-相关\"><a href=\"#Vue-相关\" class=\"headerlink\" title=\"Vue 相关\"></a>Vue 相关</h1><ol>\n<li>v-if：没有在 dom 中出现。v-show ：元素被加上 <code>display:none</code></li>\n<li>scss 尽量都用变量 <code>$</code></li>\n<li>使用 prop 传 Boolean 值时，需要在所传属性前加<code>:</code></li>\n<li>需要获取组件的 <code>$refs</code> 值时，需要在 <code>mounted</code> 后才能获取，mounted 是异步的</li>\n<li>slot 不能直接出现在 template 中，会报错</li>\n<li>$children 子组件</li>\n<li>声明组件后，再设置 name，方便调试</li>\n<li>scoped 会隔绝其他组件的样式，建议使用</li>\n<li>Vue 的<a href=\"https://jsbin.com/bipojipeho/edit?html,output\">双向绑定</a>，实质上是：</li>\n</ol>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;button @click=<span class=\"string\">&quot;message++&quot;</span>&gt;+&lt;<span class=\"regexp\">/button&gt;&lt;/</span>p&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;message&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;message=$event.target.value&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>computed 的属性会被缓存</li>\n<li>prop 的 default 属性如果是对象就用函数返回，否者页面有多个相同组件时，改对象的数据会被共享</li>\n<li><a href=\"https://jsbin.com/jaxehabogu/1/edit?html,console,output\">.sync</a>(类似 prop 的双向绑定) 实质上是：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;xxx&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;child @update:title=&quot;value =&gt; xxx=value&quot;  :title= &quot;xxx&quot;&gt;&lt;/child&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:title.sync</span>=<span class=\"string\">&quot;xxx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;child&#x27;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>:<span class=\"string\">`&lt;div&gt;&#123;&#123;newTitle&#125;&#125;&lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">newTitle</span>:<span class=\"built_in\">this</span>.title</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>:[<span class=\"string\">&#x27;title&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.newTitle +=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;update:title&#x27;</span>, <span class=\"built_in\">this</span>.newTitle)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">xxx</span>:<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"13\">\n<li>props 需要用户传值，data 是内部自身维护的</li>\n<li>xxx.bind() 会生成新函数</li>\n<li>不要在多个地方操作数据，保证数据单向流通</li>\n</ol>\n<h1 id=\"规范相关\"><a href=\"#规范相关\" class=\"headerlink\" title=\"规范相关\"></a>规范相关</h1><ol>\n<li>提交代码时，变更记录写详细，方便以后查阅</li>\n<li>遵循用例-UI-代码-测试的开发流程</li>\n<li>函数不要超 5 行</li>\n</ol>\n<h1 id=\"工具相关\"><a href=\"#工具相关\" class=\"headerlink\" title=\"工具相关\"></a>工具相关</h1><ol>\n<li>安装开发者使用的库：<code>npm i xxx -D</code></li>\n<li>npm 不能用的时候，就用 yarn</li>\n</ol>\n<h1 id=\"测试相关\"><a href=\"#测试相关\" class=\"headerlink\" title=\"测试相关\"></a>测试相关</h1><ol>\n<li>本应出现的值没有出现，试试 setTimeout 或者$nextTick</li>\n<li>测试时先错一次</li>\n<li>css 要渲染到页面上才能取到值</li>\n<li>每次测试结束，dom.remove(),vm.$destroy()</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"Vue-相关\"><a href=\"#Vue-相关\" class=\"headerlink\" title=\"Vue 相关\"></a>Vue 相关</h1><ol>\n<li>v-if：没有在 dom 中出现。v-show ：元素被加上 <code>display:none</code></li>\n<li>scss 尽量都用变量 <code>$</code></li>\n<li>使用 prop 传 Boolean 值时，需要在所传属性前加<code>:</code></li>\n<li>需要获取组件的 <code>$refs</code> 值时，需要在 <code>mounted</code> 后才能获取，mounted 是异步的</li>\n<li>slot 不能直接出现在 template 中，会报错</li>\n<li>$children 子组件</li>\n<li>声明组件后，再设置 name，方便调试</li>\n<li>scoped 会隔绝其他组件的样式，建议使用</li>\n<li>Vue 的<a href=\"https://jsbin.com/bipojipeho/edit?html,output\">双向绑定</a>，实质上是：</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;button @click=<span class=\"string\">&quot;message++&quot;</span>&gt;+&lt;<span class=\"regexp\">/button&gt;&lt;/</span>p&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;message&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;message=$event.target.value&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>computed 的属性会被缓存</li>\n<li>prop 的 default 属性如果是对象就用函数返回，否者页面有多个相同组件时，改对象的数据会被共享</li>\n<li><a href=\"https://jsbin.com/jaxehabogu/1/edit?html,console,output\">.sync</a>(类似 prop 的双向绑定) 实质上是：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;xxx&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;child @update:title=&quot;value =&gt; xxx=value&quot;  :title= &quot;xxx&quot;&gt;&lt;/child&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:title.sync</span>=<span class=\"string\">&quot;xxx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;child&#x27;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>:<span class=\"string\">`&lt;div&gt;&#123;&#123;newTitle&#125;&#125;&lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">newTitle</span>:<span class=\"built_in\">this</span>.title</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>:[<span class=\"string\">&#x27;title&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.newTitle +=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;update:title&#x27;</span>, <span class=\"built_in\">this</span>.newTitle)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">xxx</span>:<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"13\">\n<li>props 需要用户传值，data 是内部自身维护的</li>\n<li>xxx.bind() 会生成新函数</li>\n<li>不要在多个地方操作数据，保证数据单向流通</li>\n</ol>\n<h1 id=\"规范相关\"><a href=\"#规范相关\" class=\"headerlink\" title=\"规范相关\"></a>规范相关</h1><ol>\n<li>提交代码时，变更记录写详细，方便以后查阅</li>\n<li>遵循用例-UI-代码-测试的开发流程</li>\n<li>函数不要超 5 行</li>\n</ol>\n<h1 id=\"工具相关\"><a href=\"#工具相关\" class=\"headerlink\" title=\"工具相关\"></a>工具相关</h1><ol>\n<li>安装开发者使用的库：<code>npm i xxx -D</code></li>\n<li>npm 不能用的时候，就用 yarn</li>\n</ol>\n<h1 id=\"测试相关\"><a href=\"#测试相关\" class=\"headerlink\" title=\"测试相关\"></a>测试相关</h1><ol>\n<li>本应出现的值没有出现，试试 setTimeout 或者$nextTick</li>\n<li>测试时先错一次</li>\n<li>css 要渲染到页面上才能取到值</li>\n<li>每次测试结束，dom.remove(),vm.$destroy()</li>\n</ol>"},{"title":"重排和重绘","date":"2020-07-27T16:00:00.000Z","updated":"2020-07-27T16:00:00.000Z","_content":"\n网页生成的时候，至少会渲染一次。用户访问的过程中，还会不断重新渲染。\n\n<!-- more -->\n\n以下三种情况，会导致网页重新渲染。\n\n- 修改 DOM\n- 修改样式表\n- 用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）\n\n重新渲染，就需要重新生成布局和重新绘制。前者叫做\"重排\"（reflow），后者叫做\"重绘\"（repaint）。\n\n需要注意的是，\"重绘\"不一定需要\"重排\"，比如改变某个网页元素的颜色，就只会触发\"重绘\"，不会触发\"重排\"，因为布局没有改变。但是，\"重排\"必然导致\"重绘\"，比如改变一个网页元素的位置，就会同时触发\"重排\"和\"重绘\"，因为布局改变了。\n\n有一些技巧，可以降低浏览器重新渲染的频率和成本。\n\n1. DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作；\n2. 如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排；\n3. 不要一条条地改变样式，而要通过改变 class，或者 csstext 属性，一次性地改变样式；\n4. 尽量使用离线 DOM，而不是真实的网面 DOM，来改变元素样式。比如，操作 Document Fragment 对象，完成后再把这个对象加入 DOM。再比如，使用 cloneNode() 方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点；\n5. 先将元素设为 display: none（需要 1 次重排和重绘），然后对这个节点进行 100 次操作，最后再恢复显示（需要 1 次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达 100 次的重新渲染；\n6. position 属性为 absolute 或 fixed 的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响；\n7. 只在必要的时候，才将元素的 display 属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden 的元素只对重绘有影响，不影响重排；\n8. 使用虚拟 DOM 的脚本库，比如 React，Vue 等；\n9. 使用 window.requestAnimationFrame()、window.requestIdleCallback() 这两个方法调节重新渲染。\n\n> 引用\n\n- [网页性能管理详解](https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html)\n","source":"_posts/重排和重绘.md","raw":"---\ntitle: 重排和重绘\ndate: 2020-07-28 00:00:00\nupdated: 2020-07-28 00:00:00\ntags:\n  - 性能\n---\n\n网页生成的时候，至少会渲染一次。用户访问的过程中，还会不断重新渲染。\n\n<!-- more -->\n\n以下三种情况，会导致网页重新渲染。\n\n- 修改 DOM\n- 修改样式表\n- 用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）\n\n重新渲染，就需要重新生成布局和重新绘制。前者叫做\"重排\"（reflow），后者叫做\"重绘\"（repaint）。\n\n需要注意的是，\"重绘\"不一定需要\"重排\"，比如改变某个网页元素的颜色，就只会触发\"重绘\"，不会触发\"重排\"，因为布局没有改变。但是，\"重排\"必然导致\"重绘\"，比如改变一个网页元素的位置，就会同时触发\"重排\"和\"重绘\"，因为布局改变了。\n\n有一些技巧，可以降低浏览器重新渲染的频率和成本。\n\n1. DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作；\n2. 如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排；\n3. 不要一条条地改变样式，而要通过改变 class，或者 csstext 属性，一次性地改变样式；\n4. 尽量使用离线 DOM，而不是真实的网面 DOM，来改变元素样式。比如，操作 Document Fragment 对象，完成后再把这个对象加入 DOM。再比如，使用 cloneNode() 方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点；\n5. 先将元素设为 display: none（需要 1 次重排和重绘），然后对这个节点进行 100 次操作，最后再恢复显示（需要 1 次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达 100 次的重新渲染；\n6. position 属性为 absolute 或 fixed 的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响；\n7. 只在必要的时候，才将元素的 display 属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden 的元素只对重绘有影响，不影响重排；\n8. 使用虚拟 DOM 的脚本库，比如 React，Vue 等；\n9. 使用 window.requestAnimationFrame()、window.requestIdleCallback() 这两个方法调节重新渲染。\n\n> 引用\n\n- [网页性能管理详解](https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html)\n","slug":"重排和重绘","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyh003bk4u9867k1v78","content":"<p>网页生成的时候，至少会渲染一次。用户访问的过程中，还会不断重新渲染。</p>\n<span id=\"more\"></span>\n\n<p>以下三种情况，会导致网页重新渲染。</p>\n<ul>\n<li>修改 DOM</li>\n<li>修改样式表</li>\n<li>用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）</li>\n</ul>\n<p>重新渲染，就需要重新生成布局和重新绘制。前者叫做”重排”（reflow），后者叫做”重绘”（repaint）。</p>\n<p>需要注意的是，”重绘”不一定需要”重排”，比如改变某个网页元素的颜色，就只会触发”重绘”，不会触发”重排”，因为布局没有改变。但是，”重排”必然导致”重绘”，比如改变一个网页元素的位置，就会同时触发”重排”和”重绘”，因为布局改变了。</p>\n<p>有一些技巧，可以降低浏览器重新渲染的频率和成本。</p>\n<ol>\n<li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作；</li>\n<li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排；</li>\n<li>不要一条条地改变样式，而要通过改变 class，或者 csstext 属性，一次性地改变样式；</li>\n<li>尽量使用离线 DOM，而不是真实的网面 DOM，来改变元素样式。比如，操作 Document Fragment 对象，完成后再把这个对象加入 DOM。再比如，使用 cloneNode() 方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点；</li>\n<li>先将元素设为 display: none（需要 1 次重排和重绘），然后对这个节点进行 100 次操作，最后再恢复显示（需要 1 次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达 100 次的重新渲染；</li>\n<li>position 属性为 absolute 或 fixed 的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响；</li>\n<li>只在必要的时候，才将元素的 display 属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden 的元素只对重绘有影响，不影响重排；</li>\n<li>使用虚拟 DOM 的脚本库，比如 React，Vue 等；</li>\n<li>使用 window.requestAnimationFrame()、window.requestIdleCallback() 这两个方法调节重新渲染。</li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\">网页性能管理详解</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>网页生成的时候，至少会渲染一次。用户访问的过程中，还会不断重新渲染。</p>","more":"<p>以下三种情况，会导致网页重新渲染。</p>\n<ul>\n<li>修改 DOM</li>\n<li>修改样式表</li>\n<li>用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）</li>\n</ul>\n<p>重新渲染，就需要重新生成布局和重新绘制。前者叫做”重排”（reflow），后者叫做”重绘”（repaint）。</p>\n<p>需要注意的是，”重绘”不一定需要”重排”，比如改变某个网页元素的颜色，就只会触发”重绘”，不会触发”重排”，因为布局没有改变。但是，”重排”必然导致”重绘”，比如改变一个网页元素的位置，就会同时触发”重排”和”重绘”，因为布局改变了。</p>\n<p>有一些技巧，可以降低浏览器重新渲染的频率和成本。</p>\n<ol>\n<li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作；</li>\n<li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排；</li>\n<li>不要一条条地改变样式，而要通过改变 class，或者 csstext 属性，一次性地改变样式；</li>\n<li>尽量使用离线 DOM，而不是真实的网面 DOM，来改变元素样式。比如，操作 Document Fragment 对象，完成后再把这个对象加入 DOM。再比如，使用 cloneNode() 方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点；</li>\n<li>先将元素设为 display: none（需要 1 次重排和重绘），然后对这个节点进行 100 次操作，最后再恢复显示（需要 1 次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达 100 次的重新渲染；</li>\n<li>position 属性为 absolute 或 fixed 的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响；</li>\n<li>只在必要的时候，才将元素的 display 属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden 的元素只对重绘有影响，不影响重排；</li>\n<li>使用虚拟 DOM 的脚本库，比如 React，Vue 等；</li>\n<li>使用 window.requestAnimationFrame()、window.requestIdleCallback() 这两个方法调节重新渲染。</li>\n</ol>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\">网页性能管理详解</a></li>\n</ul>"},{"title":"闭包","date":"2019-01-18T16:00:00.000Z","updated":"2019-01-18T16:00:00.000Z","_content":"\n今天我们搞清楚闭包是什么。\n\n# 什么是闭包\n\nMDN 就是简单的一句话：\n\n> A closure is the combination of a function and the lexical environment within which that function was declared.\n\n翻译过来就是：闭包是函数和该函数内部能访问到的**环境**变量的总和。\n\n<!-- more -->\n\n举个例子：\n\n```javascript\nfunction init() {\n  var name = 'Mozilla' // name是 init 创建的局部变量\n  function displayName() {\n    // displayName() 是一个内部函数，闭包\n    alert(name) // 使用了父函数申明的变量\n  }\n  displayName()\n}\ninit()\n```\n\n`init()` 函数创建了局部变量 `name` 和函数 `displayName()` 函数。`displayName()` 函数是一个定义在 `init()`函数内部的函数，并且只能在`init()`函数内部可用。`displayName()` 函数没有自己的局部变量。但是是因为内部函数有权访问外部函数的变量，所以 `displayName()` 可以使用父函数定义的变量 `name` 。但如果 `displayName()` 中也有相同的变量，则会使用内部定义的变量。\n\n这个环境包含了这个闭包**创建时**所能访问的**所有**局部变量\n\n```javascript\nfunction makeAdder(x) {\n  return function (y) {\n    return x + y\n  }\n}\n\nvar add5 = makeAdder(5)\nvar add10 = makeAdder(10)\n\nconsole.log(add5(2)) // 7\nconsole.log(add10(2)) // 12\n```\n\n上面的这个例子中函数 `makeAdder()` 将闭包函数 return，以供使用。 `add5` 和 `add10` 都是闭包。他们共享了相同函数的定义，但是保存了不同的环境。在 `add5` 中 `x` 为 5，在 `add10` 中， `x` 则为 10。\n\n# 闭包的作用\n\n闭包常常用来“间接访问一个变量”。换句话说，“隐藏一个变量”。\n\n```javascript\nvar Counter = (function () {\n  var privateCounter = 0\n  function changeBy(val) {\n    privateCounter += val\n  }\n  return {\n    increment: function () {\n      changeBy(1)\n    },\n    decrement: function () {\n      changeBy(-1)\n    },\n    value: function () {\n      return privateCounter\n    }\n  }\n})()\n\nconsole.log(Counter.value()) /* logs 0 */\nCounter.increment()\nCounter.increment()\nconsole.log(Counter.value()) /* logs 2 */\nCounter.decrement()\nconsole.log(Counter.value()) /* logs 1 */\n```\n\n该共享环境创建于一个立即执行的匿名函数体内。这个环境中包含两个私有项：名为 privateCounter 的变量和名为 changeBy 的函数。这两项都无法在这个匿名函数外部直接访问。必须通过匿名函数返回的三个公共函数访问。\n\n# 常见错误\n\n```html\n<p id=\"help\">Helpful notes will appear here</p>\n<p>E-mail: <input type=\"text\" id=\"email\" name=\"email\" /></p>\n<p>Name: <input type=\"text\" id=\"name\" name=\"name\" /></p>\n<p>Age: <input type=\"text\" id=\"age\" name=\"age\" /></p>\n```\n\n```javascript\nfunction showHelp(help) {\n  document.getElementById('help').innerHTML = help\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: 'email', help: 'Your e-mail address' },\n    { id: 'name', help: 'Your full name' },\n    { id: 'age', help: 'Your age (you must be over 16)' }\n  ]\n\n  for (var i = 0; i < helpText.length; i++) {\n    var item = helpText[i]\n    document.getElementById(item.id).onfocus = function () {\n      showHelp(item.help)\n    }\n  }\n\n  //   for (let i = 0; i < helpText.length; i++) {\n  //   var item = helpText[i];\n  //   document.getElementById(item.id).onfocus = function() {\n  //     showHelp(item.help);\n  //   }\n  // }//使用let而不是var，每个闭包都绑定了块作用域的变量。\n}\n\nsetupHelp()\n```\n\n数组 helpText 中定义了三个有用的提示信息，每一个都关联于对应的文档中的 input 的 ID。通过循环这三项定义，依次为相应 input 添加了一个 onfocus 事件处理函数，以便显示帮助信息。\n\n运行这段代码后，您会发现它没有达到想要的效果。无论焦点在哪个 input 上，显示的都是关于年龄的信息。\n\n原因是赋值给 onfocus 的是闭包。这些闭包是由他们的函数定义和在 setupHelp 作用域中捕获的环境所组成的。这三个闭包在循环中被创建，但他们共享了同一个词法作用域，在这个作用域中存在一个变量 item。当 onfocus 的回调执行时，item.help 的值被决定。由于循环在事件触发之前早已执行完毕，变量对象 item（被三个闭包所共享）已经指向了 helpText 的最后一项。\n\n> 引用\n\n- [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ndate: 2019-01-19 00:00:00\nupdated: 2019-01-19 00:00:00\ntags:\n  - JavaScript\n  - 闭包\n---\n\n今天我们搞清楚闭包是什么。\n\n# 什么是闭包\n\nMDN 就是简单的一句话：\n\n> A closure is the combination of a function and the lexical environment within which that function was declared.\n\n翻译过来就是：闭包是函数和该函数内部能访问到的**环境**变量的总和。\n\n<!-- more -->\n\n举个例子：\n\n```javascript\nfunction init() {\n  var name = 'Mozilla' // name是 init 创建的局部变量\n  function displayName() {\n    // displayName() 是一个内部函数，闭包\n    alert(name) // 使用了父函数申明的变量\n  }\n  displayName()\n}\ninit()\n```\n\n`init()` 函数创建了局部变量 `name` 和函数 `displayName()` 函数。`displayName()` 函数是一个定义在 `init()`函数内部的函数，并且只能在`init()`函数内部可用。`displayName()` 函数没有自己的局部变量。但是是因为内部函数有权访问外部函数的变量，所以 `displayName()` 可以使用父函数定义的变量 `name` 。但如果 `displayName()` 中也有相同的变量，则会使用内部定义的变量。\n\n这个环境包含了这个闭包**创建时**所能访问的**所有**局部变量\n\n```javascript\nfunction makeAdder(x) {\n  return function (y) {\n    return x + y\n  }\n}\n\nvar add5 = makeAdder(5)\nvar add10 = makeAdder(10)\n\nconsole.log(add5(2)) // 7\nconsole.log(add10(2)) // 12\n```\n\n上面的这个例子中函数 `makeAdder()` 将闭包函数 return，以供使用。 `add5` 和 `add10` 都是闭包。他们共享了相同函数的定义，但是保存了不同的环境。在 `add5` 中 `x` 为 5，在 `add10` 中， `x` 则为 10。\n\n# 闭包的作用\n\n闭包常常用来“间接访问一个变量”。换句话说，“隐藏一个变量”。\n\n```javascript\nvar Counter = (function () {\n  var privateCounter = 0\n  function changeBy(val) {\n    privateCounter += val\n  }\n  return {\n    increment: function () {\n      changeBy(1)\n    },\n    decrement: function () {\n      changeBy(-1)\n    },\n    value: function () {\n      return privateCounter\n    }\n  }\n})()\n\nconsole.log(Counter.value()) /* logs 0 */\nCounter.increment()\nCounter.increment()\nconsole.log(Counter.value()) /* logs 2 */\nCounter.decrement()\nconsole.log(Counter.value()) /* logs 1 */\n```\n\n该共享环境创建于一个立即执行的匿名函数体内。这个环境中包含两个私有项：名为 privateCounter 的变量和名为 changeBy 的函数。这两项都无法在这个匿名函数外部直接访问。必须通过匿名函数返回的三个公共函数访问。\n\n# 常见错误\n\n```html\n<p id=\"help\">Helpful notes will appear here</p>\n<p>E-mail: <input type=\"text\" id=\"email\" name=\"email\" /></p>\n<p>Name: <input type=\"text\" id=\"name\" name=\"name\" /></p>\n<p>Age: <input type=\"text\" id=\"age\" name=\"age\" /></p>\n```\n\n```javascript\nfunction showHelp(help) {\n  document.getElementById('help').innerHTML = help\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: 'email', help: 'Your e-mail address' },\n    { id: 'name', help: 'Your full name' },\n    { id: 'age', help: 'Your age (you must be over 16)' }\n  ]\n\n  for (var i = 0; i < helpText.length; i++) {\n    var item = helpText[i]\n    document.getElementById(item.id).onfocus = function () {\n      showHelp(item.help)\n    }\n  }\n\n  //   for (let i = 0; i < helpText.length; i++) {\n  //   var item = helpText[i];\n  //   document.getElementById(item.id).onfocus = function() {\n  //     showHelp(item.help);\n  //   }\n  // }//使用let而不是var，每个闭包都绑定了块作用域的变量。\n}\n\nsetupHelp()\n```\n\n数组 helpText 中定义了三个有用的提示信息，每一个都关联于对应的文档中的 input 的 ID。通过循环这三项定义，依次为相应 input 添加了一个 onfocus 事件处理函数，以便显示帮助信息。\n\n运行这段代码后，您会发现它没有达到想要的效果。无论焦点在哪个 input 上，显示的都是关于年龄的信息。\n\n原因是赋值给 onfocus 的是闭包。这些闭包是由他们的函数定义和在 setupHelp 作用域中捕获的环境所组成的。这三个闭包在循环中被创建，但他们共享了同一个词法作用域，在这个作用域中存在一个变量 item。当 onfocus 的回调执行时，item.help 的值被决定。由于循环在事件触发之前早已执行完毕，变量对象 item（被三个闭包所共享）已经指向了 helpText 的最后一项。\n\n> 引用\n\n- [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n","slug":"闭包","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyscmpyi003ck4u98hi5hi4s","content":"<p>今天我们搞清楚闭包是什么。</p>\n<h1 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h1><p>MDN 就是简单的一句话：</p>\n<blockquote>\n<p>A closure is the combination of a function and the lexical environment within which that function was declared.</p>\n</blockquote>\n<p>翻译过来就是：闭包是函数和该函数内部能访问到的<strong>环境</strong>变量的总和。</p>\n<span id=\"more\"></span>\n\n<p>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Mozilla&#x27;</span> <span class=\"comment\">// name是 init 创建的局部变量</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// displayName() 是一个内部函数，闭包</span></span><br><span class=\"line\">    alert(name) <span class=\"comment\">// 使用了父函数申明的变量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  displayName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init()</span><br></pre></td></tr></table></figure>\n\n<p><code>init()</code> 函数创建了局部变量 <code>name</code> 和函数 <code>displayName()</code> 函数。<code>displayName()</code> 函数是一个定义在 <code>init()</code>函数内部的函数，并且只能在<code>init()</code>函数内部可用。<code>displayName()</code> 函数没有自己的局部变量。但是是因为内部函数有权访问外部函数的变量，所以 <code>displayName()</code> 可以使用父函数定义的变量 <code>name</code> 。但如果 <code>displayName()</code> 中也有相同的变量，则会使用内部定义的变量。</p>\n<p>这个环境包含了这个闭包<strong>创建时</strong>所能访问的<strong>所有</strong>局部变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAdder</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = makeAdder(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> add10 = makeAdder(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add5(<span class=\"number\">2</span>)) <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add10(<span class=\"number\">2</span>)) <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的这个例子中函数 <code>makeAdder()</code> 将闭包函数 return，以供使用。 <code>add5</code> 和 <code>add10</code> 都是闭包。他们共享了相同函数的定义，但是保存了不同的环境。在 <code>add5</code> 中 <code>x</code> 为 5，在 <code>add10</code> 中， <code>x</code> 则为 10。</p>\n<h1 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h1><p>闭包常常用来“间接访问一个变量”。换句话说，“隐藏一个变量”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Counter = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateCounter = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeBy</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    privateCounter += val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      changeBy(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">decrement</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      changeBy(-<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateCounter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Counter.value()) <span class=\"comment\">/* logs 0 */</span></span><br><span class=\"line\">Counter.increment()</span><br><span class=\"line\">Counter.increment()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Counter.value()) <span class=\"comment\">/* logs 2 */</span></span><br><span class=\"line\">Counter.decrement()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Counter.value()) <span class=\"comment\">/* logs 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p>该共享环境创建于一个立即执行的匿名函数体内。这个环境中包含两个私有项：名为 privateCounter 的变量和名为 changeBy 的函数。这两项都无法在这个匿名函数外部直接访问。必须通过匿名函数返回的三个公共函数访问。</p>\n<h1 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;help&quot;</span>&gt;</span>Helpful notes will appear here<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>E-mail: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Age: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHelp</span>(<span class=\"params\">help</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;help&#x27;</span>).innerHTML = help</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupHelp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> helpText = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;email&#x27;</span>, <span class=\"attr\">help</span>: <span class=\"string\">&#x27;Your e-mail address&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"attr\">help</span>: <span class=\"string\">&#x27;Your full name&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"attr\">help</span>: <span class=\"string\">&#x27;Your age (you must be over 16)&#x27;</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; helpText.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = helpText[i]</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      showHelp(item.help)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//   for (let i = 0; i &lt; helpText.length; i++) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   var item = helpText[i];</span></span><br><span class=\"line\">  <span class=\"comment\">//   document.getElementById(item.id).onfocus = function() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     showHelp(item.help);</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;//使用let而不是var，每个闭包都绑定了块作用域的变量。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setupHelp()</span><br></pre></td></tr></table></figure>\n\n<p>数组 helpText 中定义了三个有用的提示信息，每一个都关联于对应的文档中的 input 的 ID。通过循环这三项定义，依次为相应 input 添加了一个 onfocus 事件处理函数，以便显示帮助信息。</p>\n<p>运行这段代码后，您会发现它没有达到想要的效果。无论焦点在哪个 input 上，显示的都是关于年龄的信息。</p>\n<p>原因是赋值给 onfocus 的是闭包。这些闭包是由他们的函数定义和在 setupHelp 作用域中捕获的环境所组成的。这三个闭包在循环中被创建，但他们共享了同一个词法作用域，在这个作用域中存在一个变量 item。当 onfocus 的回调执行时，item.help 的值被决定。由于循环在事件触发之前早已执行完毕，变量对象 item（被三个闭包所共享）已经指向了 helpText 的最后一项。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今天我们搞清楚闭包是什么。</p>\n<h1 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h1><p>MDN 就是简单的一句话：</p>\n<blockquote>\n<p>A closure is the combination of a function and the lexical environment within which that function was declared.</p>\n</blockquote>\n<p>翻译过来就是：闭包是函数和该函数内部能访问到的<strong>环境</strong>变量的总和。</p>","more":"<p>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Mozilla&#x27;</span> <span class=\"comment\">// name是 init 创建的局部变量</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// displayName() 是一个内部函数，闭包</span></span><br><span class=\"line\">    alert(name) <span class=\"comment\">// 使用了父函数申明的变量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  displayName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init()</span><br></pre></td></tr></table></figure>\n\n<p><code>init()</code> 函数创建了局部变量 <code>name</code> 和函数 <code>displayName()</code> 函数。<code>displayName()</code> 函数是一个定义在 <code>init()</code>函数内部的函数，并且只能在<code>init()</code>函数内部可用。<code>displayName()</code> 函数没有自己的局部变量。但是是因为内部函数有权访问外部函数的变量，所以 <code>displayName()</code> 可以使用父函数定义的变量 <code>name</code> 。但如果 <code>displayName()</code> 中也有相同的变量，则会使用内部定义的变量。</p>\n<p>这个环境包含了这个闭包<strong>创建时</strong>所能访问的<strong>所有</strong>局部变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAdder</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = makeAdder(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> add10 = makeAdder(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add5(<span class=\"number\">2</span>)) <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add10(<span class=\"number\">2</span>)) <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的这个例子中函数 <code>makeAdder()</code> 将闭包函数 return，以供使用。 <code>add5</code> 和 <code>add10</code> 都是闭包。他们共享了相同函数的定义，但是保存了不同的环境。在 <code>add5</code> 中 <code>x</code> 为 5，在 <code>add10</code> 中， <code>x</code> 则为 10。</p>\n<h1 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h1><p>闭包常常用来“间接访问一个变量”。换句话说，“隐藏一个变量”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Counter = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateCounter = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeBy</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    privateCounter += val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      changeBy(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">decrement</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      changeBy(-<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateCounter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Counter.value()) <span class=\"comment\">/* logs 0 */</span></span><br><span class=\"line\">Counter.increment()</span><br><span class=\"line\">Counter.increment()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Counter.value()) <span class=\"comment\">/* logs 2 */</span></span><br><span class=\"line\">Counter.decrement()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Counter.value()) <span class=\"comment\">/* logs 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p>该共享环境创建于一个立即执行的匿名函数体内。这个环境中包含两个私有项：名为 privateCounter 的变量和名为 changeBy 的函数。这两项都无法在这个匿名函数外部直接访问。必须通过匿名函数返回的三个公共函数访问。</p>\n<h1 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;help&quot;</span>&gt;</span>Helpful notes will appear here<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>E-mail: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Age: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHelp</span>(<span class=\"params\">help</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;help&#x27;</span>).innerHTML = help</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupHelp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> helpText = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;email&#x27;</span>, <span class=\"attr\">help</span>: <span class=\"string\">&#x27;Your e-mail address&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"attr\">help</span>: <span class=\"string\">&#x27;Your full name&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"attr\">help</span>: <span class=\"string\">&#x27;Your age (you must be over 16)&#x27;</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; helpText.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = helpText[i]</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      showHelp(item.help)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//   for (let i = 0; i &lt; helpText.length; i++) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   var item = helpText[i];</span></span><br><span class=\"line\">  <span class=\"comment\">//   document.getElementById(item.id).onfocus = function() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     showHelp(item.help);</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;//使用let而不是var，每个闭包都绑定了块作用域的变量。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setupHelp()</span><br></pre></td></tr></table></figure>\n\n<p>数组 helpText 中定义了三个有用的提示信息，每一个都关联于对应的文档中的 input 的 ID。通过循环这三项定义，依次为相应 input 添加了一个 onfocus 事件处理函数，以便显示帮助信息。</p>\n<p>运行这段代码后，您会发现它没有达到想要的效果。无论焦点在哪个 input 上，显示的都是关于年龄的信息。</p>\n<p>原因是赋值给 onfocus 的是闭包。这些闭包是由他们的函数定义和在 setupHelp 作用域中捕获的环境所组成的。这三个闭包在循环中被创建，但他们共享了同一个词法作用域，在这个作用域中存在一个变量 item。当 onfocus 的回调执行时，item.help 的值被决定。由于循环在事件触发之前早已执行完毕，变量对象 item（被三个闭包所共享）已经指向了 helpText 的最后一项。</p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckyscmpw50001k4u94cue1l1e","tag_id":"ckyscmpwa0003k4u99b6bdhhk","_id":"ckyscmpwh0008k4u911zwdswb"},{"post_id":"ckyscmpw90002k4u90cw3f3si","tag_id":"ckyscmpwg0007k4u9fi3k6u64","_id":"ckyscmpwq000jk4u9d1492ktt"},{"post_id":"ckyscmpw90002k4u90cw3f3si","tag_id":"ckyscmpwj000bk4u9dv9lhudw","_id":"ckyscmpwr000lk4u97nn4gh20"},{"post_id":"ckyscmpw90002k4u90cw3f3si","tag_id":"ckyscmpwn000ek4u92m783ayf","_id":"ckyscmpwt000ok4u92n7kdbcd"},{"post_id":"ckyscmpwc0004k4u91f7653yn","tag_id":"ckyscmpwn000ek4u92m783ayf","_id":"ckyscmpwu000qk4u91rk952mf"},{"post_id":"ckyscmpwe0005k4u96gnkfx26","tag_id":"ckyscmpwn000ek4u92m783ayf","_id":"ckyscmpwy000wk4u9f1n6b4v5"},{"post_id":"ckyscmpwe0005k4u96gnkfx26","tag_id":"ckyscmpwu000rk4u93tc83bp6","_id":"ckyscmpwy000yk4u92uke911a"},{"post_id":"ckyscmpwf0006k4u908vzbd2r","tag_id":"ckyscmpwn000ek4u92m783ayf","_id":"ckyscmpx00011k4u9aeiy1c4z"},{"post_id":"ckyscmpwh0009k4u90m8s7etr","tag_id":"ckyscmpwn000ek4u92m783ayf","_id":"ckyscmpx20015k4u97zb97b9l"},{"post_id":"ckyscmpwi000ak4u9h9j0ap37","tag_id":"ckyscmpx10014k4u96nya9yin","_id":"ckyscmpx4001ak4u9ds1m0x8u"},{"post_id":"ckyscmpwk000ck4u93ki720ls","tag_id":"ckyscmpx30018k4u9d29dh4g8","_id":"ckyscmpx6001ek4u92dwt01ic"},{"post_id":"ckyscmpwm000dk4u91a2ogxnb","tag_id":"ckyscmpx5001ck4u910jlbsxk","_id":"ckyscmpxe001ik4u9g26dchha"},{"post_id":"ckyscmpwn000fk4u98gixe0ot","tag_id":"ckyscmpxd001gk4u9d8op4kl8","_id":"ckyscmpxg001mk4u9dl231zyi"},{"post_id":"ckyscmpwo000gk4u97epl5epi","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpxm001uk4u9447vdw2q"},{"post_id":"ckyscmpwo000gk4u97epl5epi","tag_id":"ckyscmpxh001pk4u94amhde03","_id":"ckyscmpxn001wk4u903222c3n"},{"post_id":"ckyscmpwp000ik4u97ry63pcl","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpxq0022k4u9412k3f28"},{"post_id":"ckyscmpwp000ik4u97ry63pcl","tag_id":"ckyscmpxn001xk4u9832z8fp3","_id":"ckyscmpxs0024k4u9d4xf3pfc"},{"post_id":"ckyscmpwr000kk4u9bjhq5e77","tag_id":"ckyscmpxo0020k4u9dro6clb1","_id":"ckyscmpy0002ek4u9eco08n7y"},{"post_id":"ckyscmpwr000kk4u9bjhq5e77","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpy0002gk4u9c3ghg8vm"},{"post_id":"ckyscmpwr000kk4u9bjhq5e77","tag_id":"ckyscmpxv0029k4u9ap472yc5","_id":"ckyscmpy2002jk4u938mmcqk1"},{"post_id":"ckyscmpws000nk4u90dld4a61","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpy4002nk4u9dllg6xgc"},{"post_id":"ckyscmpws000nk4u90dld4a61","tag_id":"ckyscmpy1002hk4u92pdic42c","_id":"ckyscmpy5002pk4u99nz8fzs9"},{"post_id":"ckyscmpwt000pk4u96cnw0qaz","tag_id":"ckyscmpy3002lk4u91k6ndflc","_id":"ckyscmpy7002sk4u9blabfabm"},{"post_id":"ckyscmpy4002ok4u9gbw5bgon","tag_id":"ckyscmpy3002lk4u91k6ndflc","_id":"ckyscmpy9002uk4u9cuflbo04"},{"post_id":"ckyscmpy5002rk4u92yjsb8vs","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpyb002xk4u98me4264q"},{"post_id":"ckyscmpwv000sk4u9ha78az6a","tag_id":"ckyscmpy5002qk4u9161o28ct","_id":"ckyscmpyd0032k4u97vw56v9k"},{"post_id":"ckyscmpwv000sk4u9ha78az6a","tag_id":"ckyscmpy9002wk4u9hhid6nxy","_id":"ckyscmpye0034k4u97oueaqpl"},{"post_id":"ckyscmpyd0031k4u9fz3z0uoc","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpyg0037k4u9dp0u9qgz"},{"post_id":"ckyscmpww000tk4u97eyxbn0a","tag_id":"ckyscmpyc0030k4u97lczg7zp","_id":"ckyscmpyj003fk4u974z74p5o"},{"post_id":"ckyscmpww000tk4u97eyxbn0a","tag_id":"ckyscmpye0035k4u99kk3hl8o","_id":"ckyscmpyj003gk4u96mov1i6x"},{"post_id":"ckyscmpww000tk4u97eyxbn0a","tag_id":"ckyscmpyh0039k4u9ft7t2lzm","_id":"ckyscmpyj003ik4u904zb57vr"},{"post_id":"ckyscmpww000tk4u97eyxbn0a","tag_id":"ckyscmpyi003dk4u9ayglf9nh","_id":"ckyscmpyj003jk4u94h3afgoa"},{"post_id":"ckyscmpwx000uk4u95801et3b","tag_id":"ckyscmpyj003ek4u95f79du63","_id":"ckyscmpyj003lk4u93ext4g73"},{"post_id":"ckyscmpwy000xk4u9goh6hg7p","tag_id":"ckyscmpyj003hk4u94nxc9elw","_id":"ckyscmpyk003nk4u96pp9a7m2"},{"post_id":"ckyscmpwy000xk4u9goh6hg7p","tag_id":"ckyscmpyj003kk4u9hjqkgwqd","_id":"ckyscmpyk003ok4u97hup3snx"},{"post_id":"ckyscmpwy000zk4u94vyo8j7x","tag_id":"ckyscmpyj003hk4u94nxc9elw","_id":"ckyscmpyl003sk4u9gkrma4s9"},{"post_id":"ckyscmpwy000zk4u94vyo8j7x","tag_id":"ckyscmpyk003pk4u981kr6pg9","_id":"ckyscmpyl003tk4u95oy5de3y"},{"post_id":"ckyscmpwy000zk4u94vyo8j7x","tag_id":"ckyscmpyl003qk4u9fkax51lc","_id":"ckyscmpym003vk4u98it60s7p"},{"post_id":"ckyscmpx00012k4u91baf742s","tag_id":"ckyscmpyj003hk4u94nxc9elw","_id":"ckyscmpym003wk4u90pnu9fkx"},{"post_id":"ckyscmpx10013k4u92ltf83o1","tag_id":"ckyscmpyl003uk4u95nbzesje","_id":"ckyscmpyn003yk4u97uhh5hd5"},{"post_id":"ckyscmpx20016k4u9a7pjcyt4","tag_id":"ckyscmpyj003hk4u94nxc9elw","_id":"ckyscmpyn0041k4u9bghdbq8v"},{"post_id":"ckyscmpx20016k4u9a7pjcyt4","tag_id":"ckyscmpyn003zk4u9e3iz5z3g","_id":"ckyscmpyo0042k4u94ca791cn"},{"post_id":"ckyscmpx30017k4u9gdttdywn","tag_id":"ckyscmpyn0040k4u98mq42139","_id":"ckyscmpyo0044k4u91px0frrw"},{"post_id":"ckyscmpx40019k4u9epha63j0","tag_id":"ckyscmpyo0043k4u91uc8grqh","_id":"ckyscmpyp0046k4u99zxxfcr6"},{"post_id":"ckyscmpx4001bk4u92oozbcce","tag_id":"ckyscmpyo0045k4u9bmfu3may","_id":"ckyscmpyr004ck4u949xh8t33"},{"post_id":"ckyscmpx4001bk4u92oozbcce","tag_id":"ckyscmpyp0047k4u95vbweunv","_id":"ckyscmpyr004dk4u93mjd1ues"},{"post_id":"ckyscmpx4001bk4u92oozbcce","tag_id":"ckyscmpyp0048k4u9h45odlbk","_id":"ckyscmpys004fk4u9679rfxsx"},{"post_id":"ckyscmpx4001bk4u92oozbcce","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpys004gk4u9apxf9i1t"},{"post_id":"ckyscmpx4001bk4u92oozbcce","tag_id":"ckyscmpyq004ak4u9aikn2p68","_id":"ckyscmpys004ik4u9falbgv9u"},{"post_id":"ckyscmpx5001dk4u9g7zrdxe6","tag_id":"ckyscmpyj003hk4u94nxc9elw","_id":"ckyscmpys004jk4u942psadny"},{"post_id":"ckyscmpx5001dk4u9g7zrdxe6","tag_id":"ckyscmpyr004ek4u9akj7gali","_id":"ckyscmpys004lk4u99m3r3z4b"},{"post_id":"ckyscmpx6001fk4u99tih4v56","tag_id":"ckyscmpys004hk4u9fxka4mly","_id":"ckyscmpyt004ok4u9ctqw5xpb"},{"post_id":"ckyscmpx6001fk4u99tih4v56","tag_id":"ckyscmpys004kk4u9c4h4bjhe","_id":"ckyscmpyt004pk4u9hect9688"},{"post_id":"ckyscmpx6001fk4u99tih4v56","tag_id":"ckyscmpyt004mk4u98613foqj","_id":"ckyscmpyt004rk4u9cx0eb2hz"},{"post_id":"ckyscmpxe001hk4u9gua3boqx","tag_id":"ckyscmpyt004nk4u9eb7d5qa3","_id":"ckyscmpyu004tk4u9f72chhdl"},{"post_id":"ckyscmpxe001hk4u9gua3boqx","tag_id":"ckyscmpyt004qk4u98ez11oqp","_id":"ckyscmpyu004uk4u95d190ujg"},{"post_id":"ckyscmpxe001jk4u978aydiyk","tag_id":"ckyscmpyt004sk4u96vxl2kym","_id":"ckyscmpyv004yk4u9dnsf1m5k"},{"post_id":"ckyscmpxe001jk4u978aydiyk","tag_id":"ckyscmpyu004vk4u95y8s2n49","_id":"ckyscmpyv004zk4u95smbauw0"},{"post_id":"ckyscmpxe001jk4u978aydiyk","tag_id":"ckyscmpyu004wk4u98jv4gwvg","_id":"ckyscmpyw0051k4u9bcgb6cyb"},{"post_id":"ckyscmpxf001kk4u9dn4r7avu","tag_id":"ckyscmpyu004xk4u92jg7gmlf","_id":"ckyscmpyw0052k4u9bqx3c680"},{"post_id":"ckyscmpxg001nk4u91ycl03vn","tag_id":"ckyscmpyv0050k4u961g30izr","_id":"ckyscmpyy0055k4u9fi87hf4h"},{"post_id":"ckyscmpxg001nk4u91ycl03vn","tag_id":"ckyscmpyw0053k4u9hp5uaiei","_id":"ckyscmpyy0056k4u9bnziea33"},{"post_id":"ckyscmpxg001ok4u9269ob607","tag_id":"ckyscmpyx0054k4u98gz8bfc0","_id":"ckyscmpyy0058k4u92dd56j45"},{"post_id":"ckyscmpxk001qk4u9efgi4tf0","tag_id":"ckyscmpyy0057k4u9fk0xap36","_id":"ckyscmpz1005ak4u96home53m"},{"post_id":"ckyscmpxl001rk4u90rklgdfj","tag_id":"ckyscmpyy0059k4u946vyhv7a","_id":"ckyscmpz2005ck4u928p36jk2"},{"post_id":"ckyscmpxm001tk4u9gug15kfk","tag_id":"ckyscmpz1005bk4u9dgates48","_id":"ckyscmpz2005ek4u93zs20kyh"},{"post_id":"ckyscmpxm001vk4u951jaezit","tag_id":"ckyscmpyj003hk4u94nxc9elw","_id":"ckyscmpz3005ik4u98adfefk1"},{"post_id":"ckyscmpxm001vk4u951jaezit","tag_id":"ckyscmpz2005fk4u94lay6o8a","_id":"ckyscmpz3005jk4u93oha82dt"},{"post_id":"ckyscmpxm001vk4u951jaezit","tag_id":"ckyscmpz2005gk4u92tzb50p7","_id":"ckyscmpz4005lk4u9di8kg0sf"},{"post_id":"ckyscmpxn001yk4u906o586k6","tag_id":"ckyscmpz3005hk4u9cndgdrh8","_id":"ckyscmpz5005mk4u97t8713cm"},{"post_id":"ckyscmpxn001yk4u906o586k6","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpz6005ok4u92k1c8qcq"},{"post_id":"ckyscmpxo001zk4u9a8ubhsbn","tag_id":"ckyscmpz3005kk4u98c9l8ti6","_id":"ckyscmpz6005pk4u94gr85g3z"},{"post_id":"ckyscmpxo0021k4u9fp3n5wnd","tag_id":"ckyscmpz6005nk4u9ata1ggkj","_id":"ckyscmpz7005rk4u9cb1l40y9"},{"post_id":"ckyscmpxq0023k4u95ugb5me2","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpz7005uk4u9g5l6a0i1"},{"post_id":"ckyscmpxq0023k4u95ugb5me2","tag_id":"ckyscmpz6005qk4u96u0l5n3z","_id":"ckyscmpz7005vk4u9aksugfr4"},{"post_id":"ckyscmpxq0023k4u95ugb5me2","tag_id":"ckyscmpz7005sk4u94ygl4pge","_id":"ckyscmpzh005xk4u97a4rclyo"},{"post_id":"ckyscmpxs0025k4u9ffohcyv3","tag_id":"ckyscmpyl003qk4u9fkax51lc","_id":"ckyscmpzi005zk4u927b3hcbe"},{"post_id":"ckyscmpxs0025k4u9ffohcyv3","tag_id":"ckyscmpz7005wk4u9dkrl9t95","_id":"ckyscmpzi0060k4u9eq26a9ni"},{"post_id":"ckyscmpxs0025k4u9ffohcyv3","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpzj0062k4u993yafp9f"},{"post_id":"ckyscmpxt0027k4u99qhbdjcb","tag_id":"ckyscmpzi005yk4u9992fcus4","_id":"ckyscmpzj0063k4u9b0fz5c94"},{"post_id":"ckyscmpxu0028k4u9f9lm4xkp","tag_id":"ckyscmpzi0061k4u9328q195t","_id":"ckyscmpzm0065k4u964is8104"},{"post_id":"ckyscmpxx002ak4u98tksdz0z","tag_id":"ckyscmpzm0064k4u9372fdhkx","_id":"ckyscmpzn0069k4u93oiz4ui4"},{"post_id":"ckyscmpxx002ak4u98tksdz0z","tag_id":"ckyscmpzm0066k4u90r93685p","_id":"ckyscmpzo006ak4u9ddm97vmc"},{"post_id":"ckyscmpxx002ak4u98tksdz0z","tag_id":"ckyscmpzn0067k4u9cwk7eewy","_id":"ckyscmpzo006ck4u9bj33a36r"},{"post_id":"ckyscmpxy002bk4u96voy5sou","tag_id":"ckyscmpzn0068k4u99o3cafmt","_id":"ckyscmpzo006ek4u98u7b0u75"},{"post_id":"ckyscmpxy002bk4u96voy5sou","tag_id":"ckyscmpzo006bk4u90hms3dmy","_id":"ckyscmpzo006fk4u95k3malds"},{"post_id":"ckyscmpxz002dk4u90x2rhr4q","tag_id":"ckyscmpzo006dk4u923p8hypb","_id":"ckyscmpzp006ik4u9e5c27s68"},{"post_id":"ckyscmpxz002dk4u90x2rhr4q","tag_id":"ckyscmpzo006gk4u94xa72gjb","_id":"ckyscmpzp006jk4u9dnuk027r"},{"post_id":"ckyscmpy0002fk4u924a29mwv","tag_id":"ckyscmpzp006hk4u95fclffp3","_id":"ckyscmpzq006mk4u9haax70ae"},{"post_id":"ckyscmpy0002fk4u924a29mwv","tag_id":"ckyscmpzp006kk4u97a4h81ba","_id":"ckyscmpzq006nk4u962v5785s"},{"post_id":"ckyscmpy1002ik4u9gr3t4koz","tag_id":"ckyscmpzq006lk4u9dcoddpvz","_id":"ckyscmpzq006pk4u9f6f15bgp"},{"post_id":"ckyscmpy2002kk4u9anlfgq8f","tag_id":"ckyscmpzq006ok4u99hdq8wjk","_id":"ckyscmpzs006uk4u948kp2sqs"},{"post_id":"ckyscmpy2002kk4u9anlfgq8f","tag_id":"ckyscmpzq006qk4u9fz2vb19i","_id":"ckyscmpzs006vk4u958q13tao"},{"post_id":"ckyscmpy2002kk4u9anlfgq8f","tag_id":"ckyscmpzr006rk4u9dmwlag50","_id":"ckyscmpzs006xk4u94bzz2qyd"},{"post_id":"ckyscmpy2002kk4u9anlfgq8f","tag_id":"ckyscmpzr006sk4u90lta9hmj","_id":"ckyscmpzs006yk4u9efe1cffp"},{"post_id":"ckyscmpy2002kk4u9anlfgq8f","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpzt0070k4u942ep9ck0"},{"post_id":"ckyscmpy3002mk4u9bwcrg8ij","tag_id":"ckyscmpy3002lk4u91k6ndflc","_id":"ckyscmpzu0071k4u99a835xdy"},{"post_id":"ckyscmpy3002mk4u9bwcrg8ij","tag_id":"ckyscmpzr006tk4u9gol8dpv0","_id":"ckyscmpzu0073k4u96he4gyr6"},{"post_id":"ckyscmpy3002mk4u9bwcrg8ij","tag_id":"ckyscmpzs006wk4u9gf6e2nk2","_id":"ckyscmpzu0074k4u92bbq3dij"},{"post_id":"ckyscmpy7002tk4u94oob2448","tag_id":"ckyscmpyl003qk4u9fkax51lc","_id":"ckyscmpzv0076k4u91ld13r90"},{"post_id":"ckyscmpy7002tk4u94oob2448","tag_id":"ckyscmpz7005wk4u9dkrl9t95","_id":"ckyscmpzv0077k4u9gdscanar"},{"post_id":"ckyscmpy7002tk4u94oob2448","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmpzv0079k4u9ecwj3hty"},{"post_id":"ckyscmpy9002vk4u9d6q33crw","tag_id":"ckyscmpyj003hk4u94nxc9elw","_id":"ckyscmpzv007bk4u983hocwam"},{"post_id":"ckyscmpy9002vk4u9d6q33crw","tag_id":"ckyscmpzv0078k4u9ck61hyik","_id":"ckyscmpzw007ck4u92dtahvy2"},{"post_id":"ckyscmpyb002yk4u9dbav35m5","tag_id":"ckyscmpzv007ak4u9bncw4kdn","_id":"ckyscmpzx007fk4u96wxd3z65"},{"post_id":"ckyscmpyb002yk4u9dbav35m5","tag_id":"ckyscmpzw007dk4u93b29d2rg","_id":"ckyscmpzx007gk4u90f5n7zqj"},{"post_id":"ckyscmpyb002yk4u9dbav35m5","tag_id":"ckyscmpxo0020k4u9dro6clb1","_id":"ckyscmq00007ik4u9hf43a80r"},{"post_id":"ckyscmpyc002zk4u92vx9bqkx","tag_id":"ckyscmpxo0020k4u9dro6clb1","_id":"ckyscmq00007jk4u9gxfya4me"},{"post_id":"ckyscmpyc002zk4u92vx9bqkx","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmq01007lk4u9efb22ots"},{"post_id":"ckyscmpyc002zk4u92vx9bqkx","tag_id":"ckyscmpzw007ek4u9f9az6dk3","_id":"ckyscmq01007mk4u9h9uu4zcu"},{"post_id":"ckyscmpyd0033k4u9ak5zaatr","tag_id":"ckyscmpzs006wk4u9gf6e2nk2","_id":"ckyscmq01007ok4u9f38fbv48"},{"post_id":"ckyscmpyf0036k4u9bbdn5h28","tag_id":"ckyscmq01007kk4u9cf9g8knp","_id":"ckyscmq02007qk4u94jrvarea"},{"post_id":"ckyscmpyf0036k4u9bbdn5h28","tag_id":"ckyscmq01007nk4u92yu4gijj","_id":"ckyscmq02007rk4u9468bdy7w"},{"post_id":"ckyscmpyg0038k4u9g570cd89","tag_id":"ckyscmq02007pk4u90u38dukw","_id":"ckyscmq02007tk4u94kqv1v33"},{"post_id":"ckyscmpyh003ak4u9grlqez4z","tag_id":"ckyscmpyj003hk4u94nxc9elw","_id":"ckyscmq03007vk4u91a9lg9v5"},{"post_id":"ckyscmpyh003bk4u9867k1v78","tag_id":"ckyscmpyt004nk4u9eb7d5qa3","_id":"ckyscmq03007xk4u9f7gygz2m"},{"post_id":"ckyscmpyi003ck4u98hi5hi4s","tag_id":"ckyscmpxg001lk4u9cirtap9q","_id":"ckyscmq04007yk4u99kax0bz6"},{"post_id":"ckyscmpyi003ck4u98hi5hi4s","tag_id":"ckyscmq03007wk4u947t5a238","_id":"ckyscmq04007zk4u9atte19xx"}],"Tag":[{"name":"命令","_id":"ckyscmpwa0003k4u99b6bdhhk"},{"name":"堆叠上下文","_id":"ckyscmpwg0007k4u9fi3k6u64"},{"name":"z-index","_id":"ckyscmpwj000bk4u9dv9lhudw"},{"name":"CSS","_id":"ckyscmpwn000ek4u92m783ayf"},{"name":"布局","_id":"ckyscmpwu000rk4u93tc83bp6"},{"name":"Cookie","_id":"ckyscmpx10014k4u96nya9yin"},{"name":"Docker","_id":"ckyscmpx30018k4u9d29dh4g8"},{"name":"HTTP","_id":"ckyscmpx5001ck4u910jlbsxk"},{"name":"Hexo","_id":"ckyscmpxd001gk4u9d8op4kl8"},{"name":"JavaScript","_id":"ckyscmpxg001lk4u9cirtap9q"},{"name":"数据类型","_id":"ckyscmpxh001pk4u94amhde03"},{"name":"内存","_id":"ckyscmpxn001xk4u9832z8fp3"},{"name":"ES6","_id":"ckyscmpxo0020k4u9dro6clb1"},{"name":"生成器","_id":"ckyscmpxv0029k4u9ap472yc5"},{"name":"深拷贝","_id":"ckyscmpy1002hk4u92pdic42c"},{"name":"Promise","_id":"ckyscmpy3002lk4u91k6ndflc"},{"name":"React","_id":"ckyscmpy5002qk4u9161o28ct"},{"name":"Hooks","_id":"ckyscmpy9002wk4u9hhid6nxy"},{"name":"Session","_id":"ckyscmpyc0030k4u97lczg7zp"},{"name":"LocalStorage","_id":"ckyscmpye0035k4u99kk3hl8o"},{"name":"Cache-Control","_id":"ckyscmpyh0039k4u9ft7t2lzm"},{"name":"HTTP缓存","_id":"ckyscmpyi003dk4u9ayglf9nh"},{"name":"VSCode","_id":"ckyscmpyj003ek4u95f79du63"},{"name":"Vue","_id":"ckyscmpyj003hk4u94nxc9elw"},{"name":"Vue Router","_id":"ckyscmpyj003kk4u9hjqkgwqd"},{"name":"diff","_id":"ckyscmpyk003pk4u981kr6pg9"},{"name":"算法","_id":"ckyscmpyl003qk4u9fkax51lc"},{"name":"Vuex","_id":"ckyscmpyl003uk4u95nbzesje"},{"name":"通信","_id":"ckyscmpyn003zk4u9e3iz5z3g"},{"name":"express","_id":"ckyscmpyn0040k4u98mq42139"},{"name":"git","_id":"ckyscmpyo0043k4u91uc8grqh"},{"name":"mixin","_id":"ckyscmpyo0045k4u9bmfu3may"},{"name":"柯里化","_id":"ckyscmpyp0047k4u95vbweunv"},{"name":"高阶函数","_id":"ckyscmpyp0048k4u9h45odlbk"},{"name":"bind","_id":"ckyscmpyq004ak4u9aikn2p68"},{"name":"render","_id":"ckyscmpyr004ek4u9akj7gali"},{"name":"var","_id":"ckyscmpys004hk4u9fxka4mly"},{"name":"let","_id":"ckyscmpys004kk4u9c4h4bjhe"},{"name":"const","_id":"ckyscmpyt004mk4u98613foqj"},{"name":"性能","_id":"ckyscmpyt004nk4u9eb7d5qa3"},{"name":"优化","_id":"ckyscmpyt004qk4u98ez11oqp"},{"name":"冒泡排序","_id":"ckyscmpyt004sk4u96vxl2kym"},{"name":"选择排序","_id":"ckyscmpyu004vk4u95y8s2n49"},{"name":"快速排序","_id":"ckyscmpyu004wk4u98jv4gwvg"},{"name":"echarts","_id":"ckyscmpyu004xk4u92jg7gmlf"},{"name":"事件委托","_id":"ckyscmpyv0050k4u961g30izr"},{"name":"冒泡","_id":"ckyscmpyw0053k4u9hp5uaiei"},{"name":"二分法","_id":"ckyscmpyx0054k4u98gz8bfc0"},{"name":"AJAX","_id":"ckyscmpyy0057k4u9fk0xap36"},{"name":"MVC","_id":"ckyscmpyy0059k4u946vyhv7a"},{"name":"JSONP","_id":"ckyscmpz1005bk4u9dgates48"},{"name":"directives","_id":"ckyscmpz2005fk4u94lay6o8a"},{"name":"clipboard","_id":"ckyscmpz2005gk4u92tzb50p7"},{"name":"new","_id":"ckyscmpz3005hk4u9cndgdrh8"},{"name":"函数节流","_id":"ckyscmpz3005kk4u98c9l8ti6"},{"name":"jQuery","_id":"ckyscmpz6005nk4u9ata1ggkj"},{"name":"原型链","_id":"ckyscmpz6005qk4u96u0l5n3z"},{"name":"原型","_id":"ckyscmpz7005sk4u94ygl4pge"},{"name":"排序","_id":"ckyscmpz7005wk4u9dkrl9t95"},{"name":"迭代器","_id":"ckyscmpzi005yk4u9992fcus4"},{"name":"npm","_id":"ckyscmpzi0061k4u9328q195t"},{"name":"console","_id":"ckyscmpzm0064k4u9372fdhkx"},{"name":"手机端","_id":"ckyscmpzm0066k4u90r93685p"},{"name":"调试","_id":"ckyscmpzn0067k4u9cwk7eewy"},{"name":"Vue3","_id":"ckyscmpzn0068k4u99o3cafmt"},{"name":"Proxy","_id":"ckyscmpzo006bk4u90hms3dmy"},{"name":"面向对象","_id":"ckyscmpzo006dk4u923p8hypb"},{"name":"类","_id":"ckyscmpzo006gk4u94xa72gjb"},{"name":"XSS","_id":"ckyscmpzp006hk4u95fclffp3"},{"name":"CSRF","_id":"ckyscmpzp006kk4u97a4h81ba"},{"name":"Git","_id":"ckyscmpzq006lk4u9dcoddpvz"},{"name":"macroTask","_id":"ckyscmpzq006ok4u99hdq8wjk"},{"name":"microTask","_id":"ckyscmpzq006qk4u9fz2vb19i"},{"name":"宏任务","_id":"ckyscmpzr006rk4u9dmwlag50"},{"name":"微任务","_id":"ckyscmpzr006sk4u90lta9hmj"},{"name":"async","_id":"ckyscmpzr006tk4u9gol8dpv0"},{"name":"await","_id":"ckyscmpzs006wk4u9gf6e2nk2"},{"name":"slot","_id":"ckyscmpzv0078k4u9ck61hyik"},{"name":"继承","_id":"ckyscmpzv007ak4u9bncw4kdn"},{"name":"ES5","_id":"ckyscmpzw007dk4u93b29d2rg"},{"name":"解构赋值","_id":"ckyscmpzw007ek4u9f9az6dk3"},{"name":"发布订阅","_id":"ckyscmq01007kk4u9cf9g8knp"},{"name":"设计模式","_id":"ckyscmq01007nk4u92yu4gijj"},{"name":"模块","_id":"ckyscmq02007pk4u90u38dukw"},{"name":"闭包","_id":"ckyscmq03007wk4u947t5a238"}]}}